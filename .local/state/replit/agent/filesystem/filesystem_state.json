{"file_contents":{"dev-server.js":{"content":"#!/usr/bin/env node\n\nimport { createServer } from 'vite'\nimport { spawn } from 'child_process'\n\nasync function startServers() {\n  // Start backend on port 5000\n  console.log('🚀 Starting backend server...')\n  const backend = spawn('npm', ['run', 'dev'], {\n    cwd: './backend',\n    stdio: 'inherit',\n    env: { ...process.env, NODE_ENV: 'development', PORT: '5000' }\n  })\n\n  // Start frontend Vite server on port 5173\n  console.log('🚀 Starting Vite dev server...')\n  const server = await createServer({\n    mode: 'development',\n    server: {\n      host: '0.0.0.0',\n      port: 5173,\n      allowedHosts: true\n    }\n  })\n  \n  await server.listen()\n  console.log('✅ Frontend server ready on port 5173')\n  \n  // Handle graceful shutdown\n  process.on('SIGINT', async () => {\n    console.log('\\n⏹️  Shutting down servers...')\n    backend.kill()\n    await server.close()\n    process.exit(0)\n  })\n\n  process.on('SIGTERM', async () => {\n    backend.kill()\n    await server.close()\n    process.exit(0)\n  })\n}\n\nstartServers().catch((err) => {\n  console.error('Error starting servers:', err)\n  process.exit(1)\n})","size_bytes":1111},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nVisionCRM is a modern customer relationship management platform built with React and Node.js. The application features a comprehensive sales pipeline, client management, task tracking, and integrated chat functionality. It provides a centralized dashboard for managing customer interactions, sales opportunities, and business workflows.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built using React with TypeScript and employs a component-based architecture:\n\n- **UI Framework**: React 18 with TypeScript for type safety\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **State Management**: TanStack Query for server state management\n- **Routing**: React Router for client-side navigation\n- **Theme System**: Custom theme context with light/dark mode support\n\nThe frontend follows a modular structure with pages, components, and services organized separately. The UI emphasizes glassmorphism design patterns with responsive layouts optimized for both desktop and mobile devices.\n\n## Backend Architecture\n\nThe backend uses Express.js with TypeScript in an ESM configuration:\n\n- **Server Framework**: Express.js with middleware for JSON parsing and request logging\n- **Database Layer**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Storage Interface**: Abstracted storage layer with in-memory implementation for development\n- **Development Setup**: Vite integration for hot module replacement and development server\n\nThe server implements a clean separation between routes, storage, and business logic with proper error handling middleware.\n\n## Data Storage Solutions\n\n- **Database**: PostgreSQL configured through Drizzle ORM\n- **Schema Management**: Type-safe schema definitions using Drizzle with Zod validation\n- **Development Storage**: In-memory storage implementation for rapid prototyping\n- **Migration System**: Drizzle Kit for database schema migrations\n\nThe database schema currently includes user management with extensible design for CRM entities like clients, opportunities, and tasks.\n\n## Authentication and Authorization\n\n- **Session Management**: Planned implementation with connect-pg-simple for PostgreSQL session storage\n- **Token-based Auth**: Local storage for demo authentication with provision for JWT implementation\n- **Demo Access**: Built-in demo credentials for testing and evaluation\n\n## External Service Integrations\n\n- **Chat Platforms**: Planned integrations with WhatsApp, Facebook Messenger, and Instagram Direct\n- **Webhook Support**: Configurable webhook endpoints for external platform integrations\n- **Third-party Services**: Designed for integration with Zapier, Make.com, and other automation platforms\n\nThe application architecture supports multiple deployment environments with proper configuration management and includes comprehensive error handling and logging systems.","size_bytes":2991},"start-dev.js":{"content":"#!/usr/bin/env node\n\nimport { spawn } from 'child_process';\nimport { createProxyMiddleware } from 'http-proxy-middleware';\nimport express from 'express';\n\n// Start backend server on port 5000  \nconsole.log('🚀 Starting backend server on port 5000...');\nconst backend = spawn('npx', ['tsx', 'src/index.ts'], { \n  cwd: './backend',\n  stdio: 'pipe',\n  env: { ...process.env, PORT: '5000', NODE_ENV: 'development' }\n});\n\n// Capture backend output\nbackend.stdout.on('data', (data) => {\n  console.log(`[BACKEND] ${data.toString().trim()}`);\n});\n\nbackend.stderr.on('data', (data) => {\n  console.error(`[BACKEND ERROR] ${data.toString().trim()}`);\n});\n\n// Wait for backend to start, then start frontend\nsetTimeout(() => {\n  console.log('🚀 Starting frontend server on port 5173...');\n  const frontend = spawn('npx', ['vite', '--host', '0.0.0.0', '--port', '5173'], {\n    stdio: 'pipe'\n  });\n  \n  // Capture frontend output\n  frontend.stdout.on('data', (data) => {\n    console.log(`[FRONTEND] ${data.toString().trim()}`);\n  });\n\n  frontend.stderr.on('data', (data) => {\n    console.error(`[FRONTEND ERROR] ${data.toString().trim()}`);\n  });\n  \n  frontend.on('error', (err) => {\n    console.error('Frontend error:', err);\n  });\n}, 3000);\n\nbackend.on('error', (err) => {\n  console.error('Backend error:', err);\n});\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('\\n⏹️  Shutting down servers...');\n  backend.kill();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  backend.kill();\n  process.exit(0);\n});","size_bytes":1531},"start.js":{"content":"#!/usr/bin/env node\n\nimport { spawn } from 'child_process';\n\n// Set environment variables for proper configuration\nprocess.env.JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';\nprocess.env.FRONTEND_URL = process.env.FRONTEND_URL || 'http://0.0.0.0:5000';\n\nconsole.log('🚀 Iniciando backend na porta 5050...');\nconst backend = spawn('npm', ['run', 'dev'], { \n  cwd: './backend',\n  stdio: 'inherit',\n  env: { \n    ...process.env, \n    PORT: '5050',\n    NODE_ENV: 'development'\n  }\n});\n\n// Aguardar o backend iniciar antes de iniciar o frontend\nsetTimeout(() => {\n  console.log('🚀 Iniciando frontend na porta 5000...');\n  const frontend = spawn('npx', ['vite', '--host', '0.0.0.0', '--port', '5000'], {\n    stdio: 'inherit',\n    env: { \n      ...process.env,\n      VITE_API_URL: 'http://0.0.0.0:5050'\n    }\n  });\n\n  frontend.on('error', (err) => {\n    console.error('❌ Erro no frontend:', err);\n  });\n}, 3000);\n\nbackend.on('error', (err) => {\n  console.error('❌ Erro no backend:', err);\n});\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('\\n⏹️  Desligando servidores...');\n  backend.kill();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  backend.kill();\n  process.exit(0);\n});","size_bytes":1259},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./index.html\", \"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2773},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5173,\n    allowedHosts: \"all\",\n  },\n});\n","size_bytes":946},"backend/setup.js":{"content":"\nconst { Client } = require('pg')\nconst { execSync } = require('child_process')\nconst fs = require('fs')\nconst path = require('path')\nrequire('dotenv').config()\n\n// ===== Configs de acesso admin (postgres padrão) =====\nconst CONFIG_ADMIN = {\n  host: process.env.PGHOST || 'localhost',\n  port: Number(process.env.PGPORT || 5432),\n  user: process.env.PGUSER || 'postgres',\n  password: process.env.PGPASSWORD || 'admin',\n  database: process.env.PGDB || 'postgres',\n}\n\n// ===== Config do CRM =====\nconst CONFIG_CRM = {\n  database: process.env.CRM_DBNAME || 'visioncrm',\n  usuario: process.env.CRM_DBUSER || 'visioncrm_user',\n  senha: process.env.CRM_DBPASS || 'VisionCRM2024!@#',\n  host: process.env.CRM_DBHOST || 'localhost',\n  port: Number(process.env.CRM_DBPORT || 5432),\n}\n\n// ===== Helpers =====\nconst esperar = (ms) => new Promise((r) => setTimeout(r, ms))\nconst codificar = (s) => encodeURIComponent(s ?? '')\nconst montarDatabaseUrl = () =>\n  `postgresql://${codificar(CONFIG_CRM.usuario)}:${codificar(CONFIG_CRM.senha)}@${CONFIG_CRM.host}:${CONFIG_CRM.port}/${CONFIG_CRM.database}?schema=public`\n\nclass SetupBanco {\n  constructor() {\n    this.clienteAdmin = null\n    this.clienteCRM = null\n    this.raizProjeto = process.cwd()\n    this.caminhoPrisma = path.resolve(this.raizProjeto, 'prisma', 'schema.prisma')\n    this.caminhoEnv = path.resolve(this.raizProjeto, '.env')\n    this.caminhoNodeModules = path.resolve(this.raizProjeto, 'node_modules')\n  }\n\n  log(emoji, mensagem) {\n    console.log(`${emoji} ${mensagem}`)\n  }\n\n  erro(mensagem, erro = null) {\n    console.error(`❌ ${mensagem}`)\n    if (erro) console.error(erro.message)\n  }\n\n  async conectarAdmin(tentativas = 5) {\n    this.log('🔌', 'Conectando como admin...')\n    let erroFinal = null\n    for (let i = 1; i <= tentativas; i++) {\n      try {\n        this.clienteAdmin = new Client(CONFIG_ADMIN)\n        await this.clienteAdmin.connect()\n        this.log('✅', 'Admin conectado')\n        return\n      } catch (e) {\n        erroFinal = e\n        this.log('⏳', `Tentativa ${i}/${tentativas} falhou: ${e.message}`)\n        if (i < tentativas) await esperar(1200)\n      }\n    }\n    throw erroFinal\n  }\n\n  async validarPostgreSQL() {\n    this.log('🔍', 'Validando PostgreSQL...')\n    try {\n      const resultado = await this.clienteAdmin.query('SELECT version()')\n      const versao = resultado.rows[0].version\n      this.log('✅', `PostgreSQL detectado: ${versao.split(' ')[1]}`)\n    } catch (e) {\n      throw new Error('PostgreSQL não está funcionando corretamente')\n    }\n  }\n\n  async criarBanco() {\n    this.log('🗄️', `Checando banco \"${CONFIG_CRM.database}\"...`)\n    const q = `SELECT 1 FROM pg_database WHERE datname = $1`\n    const r = await this.clienteAdmin.query(q, [CONFIG_CRM.database])\n    if (r.rows.length) {\n      this.log('✅', 'Banco já existe')\n      return\n    }\n    await this.clienteAdmin.query(`CREATE DATABASE \"${CONFIG_CRM.database}\"`)\n    this.log('✅', 'Banco criado')\n  }\n\n  async criarUsuario() {\n    this.log('👤', `Checando usuário \"${CONFIG_CRM.usuario}\"...`)\n    const q = `SELECT 1 FROM pg_roles WHERE rolname = $1`\n    const r = await this.clienteAdmin.query(q, [CONFIG_CRM.usuario])\n\n    if (!r.rows.length) {\n      await this.clienteAdmin.query(`CREATE USER ${CONFIG_CRM.usuario} WITH PASSWORD '${CONFIG_CRM.senha}'`)\n      this.log('✅', 'Usuário criado')\n    } else {\n      await this.clienteAdmin.query(`ALTER USER ${CONFIG_CRM.usuario} WITH PASSWORD '${CONFIG_CRM.senha}'`)\n      this.log('🔒', 'Senha do usuário atualizada')\n    }\n\n    // Dono do DB + permissões úteis para dev\n    await this.clienteAdmin.query(`ALTER DATABASE ${CONFIG_CRM.database} OWNER TO ${CONFIG_CRM.usuario}`)\n    await this.clienteAdmin.query(`GRANT CONNECT, TEMP ON DATABASE ${CONFIG_CRM.database} TO ${CONFIG_CRM.usuario}`)\n    await this.clienteAdmin.query(`REVOKE ALL ON DATABASE ${CONFIG_CRM.database} FROM PUBLIC`)\n    this.log('✅', 'Permissões básicas concedidas')\n  }\n\n  async conectarCRM() {\n    this.log('🔌', `Conectando ao banco \"${CONFIG_CRM.database}\"...`)\n    this.clienteCRM = new Client({\n      host: CONFIG_CRM.host,\n      port: CONFIG_CRM.port,\n      user: CONFIG_CRM.usuario,\n      password: CONFIG_CRM.senha,\n      database: CONFIG_CRM.database,\n    })\n    await this.clienteCRM.connect()\n    this.log('✅', 'Conectado ao banco CRM')\n  }\n\n  async ajustarPermissoesSchema() {\n    this.log('🛡️', 'Ajustando permissões do schema public...')\n    const c = this.clienteCRM\n    await c.query(`ALTER SCHEMA public OWNER TO \"${CONFIG_CRM.usuario}\"`)\n    await c.query(`GRANT USAGE, CREATE ON SCHEMA public TO \"${CONFIG_CRM.usuario}\"`)\n    await c.query(`ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO \"${CONFIG_CRM.usuario}\"`)\n    await c.query(`ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO \"${CONFIG_CRM.usuario}\"`)\n    await c.query(`ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO \"${CONFIG_CRM.usuario}\"`)\n    this.log('✅', 'Permissões do schema ajustadas')\n  }\n\n  async backupEnvExistente() {\n    if (fs.existsSync(this.caminhoEnv)) {\n      const backup = this.caminhoEnv + `.bak-${Date.now()}`\n      fs.copyFileSync(this.caminhoEnv, backup)\n      this.log('💾', `Backup do .env criado: ${path.basename(backup)}`)\n    }\n  }\n\n  escreverEnv() {\n    this.log('📝', 'Gerando .env...')\n    const url = montarDatabaseUrl()\n    const jwt = process.env.JWT_SECRET || `vision-crm-jwt-${Math.random().toString(36).slice(2)}`\n    \n    const conteudo = [\n      `# Vision CRM - Configurações do Backend`,\n      `# Gerado automaticamente em ${new Date().toLocaleString('pt-BR')}`,\n      ``,\n      `# Prisma/Database`,\n      `DATABASE_URL=\"${url}\"`,\n      ``,\n      `# App`,\n      `JWT_SECRET=\"${jwt}\"`,\n      `PORT=${process.env.PORT || 5000}`,\n      `NODE_ENV=${process.env.NODE_ENV || 'development'}`,\n      ``,\n      `# PostgreSQL Admin (para setup)`,\n      `PGHOST=${CONFIG_ADMIN.host}`,\n      `PGPORT=${CONFIG_ADMIN.port}`,\n      `PGUSER=${CONFIG_ADMIN.user}`,\n      `PGPASSWORD=${CONFIG_ADMIN.password}`,\n      `PGDB=${CONFIG_ADMIN.database}`,\n      ``,\n      `# CRM Database Config`,\n      `CRM_DBNAME=${CONFIG_CRM.database}`,\n      `CRM_DBUSER=${CONFIG_CRM.usuario}`,\n      `CRM_DBPASS=${CONFIG_CRM.senha}`,\n      `CRM_DBHOST=${CONFIG_CRM.host}`,\n      `CRM_DBPORT=${CONFIG_CRM.port}`,\n      ``,\n    ].join('\\n')\n\n    fs.writeFileSync(this.caminhoEnv, conteudo, 'utf8')\n    this.log('✅', '.env escrito')\n  }\n\n  prismaDisponivel() {\n    return fs.existsSync(this.caminhoPrisma)\n  }\n\n  nodeModulesExiste() {\n    return fs.existsSync(this.caminhoNodeModules)\n  }\n\n  executar(cmd, opcoes = {}) {\n    const defaultOpcoes = { \n      stdio: 'inherit', \n      cwd: this.raizProjeto, \n      timeout: 240000, // 4 minutos\n      ...opcoes\n    }\n    this.log('⚡', `Executando: ${cmd}`)\n    return execSync(cmd, defaultOpcoes)\n  }\n\n  async limparCache() {\n    this.log('🧹', 'Limpando cache...')\n    const cacheDirs = [\n      path.join(this.caminhoNodeModules, '.prisma'),\n      path.join(this.caminhoNodeModules, '.cache'),\n      path.join(this.raizProjeto, 'dist'),\n    ]\n    \n    cacheDirs.forEach(dir => {\n      if (fs.existsSync(dir)) {\n        fs.rmSync(dir, { recursive: true, force: true })\n        this.log('🗑️', `Cache removido: ${path.basename(dir)}`)\n      }\n    })\n  }\n\n  async instalarDependencias() {\n    if (!this.nodeModulesExiste()) {\n      this.log('📦', 'Instalando dependências...')\n      this.executar('npm install')\n    } else {\n      this.log('✅', 'Dependências já instaladas')\n    }\n  }\n\n  async rodarPrisma() {\n    if (!this.prismaDisponivel()) {\n      this.log('ℹ️', 'Prisma não encontrado (prisma/schema.prisma). Pulando etapa.')\n      return\n    }\n\n    try {\n      await this.instalarDependencias()\n\n      this.log('🔧', 'Gerando client Prisma...')\n      this.executar('npx prisma generate')\n\n      this.log('🔄', 'Aplicando migrações...')\n      try {\n        // Tentar migrate dev primeiro (desenvolvimento)\n        this.executar('npx prisma migrate dev --name auto_migration')\n      } catch (e1) {\n        this.log('⚠️', 'Migrate dev falhou, tentando db push...')\n        try {\n          this.executar('npx prisma db push --force-reset')\n        } catch (e2) {\n          this.log('⚠️', 'DB push falhou, tentando migrate deploy...')\n          this.executar('npx prisma migrate deploy')\n        }\n      }\n\n      // Regenerar client após migrações\n      this.log('🔄', 'Regenerando client final...')\n      this.executar('npx prisma generate')\n\n      this.log('✅', 'Prisma configurado')\n    } catch (e) {\n      this.erro('Falha no Prisma', e)\n      throw e\n    }\n  }\n\n  async corrigirPrisma() {\n    this.log('🔧', 'Corrigindo problemas do Prisma...')\n    \n    try {\n      // Limpar cache\n      await this.limparCache()\n      \n      // Forçar regeneração completa\n      this.log('🔄', 'Resetando migrações...')\n      this.executar('npx prisma migrate reset --force')\n      \n      this.log('🔧', 'Gerando client atualizado...')\n      this.executar('npx prisma generate')\n      \n      this.log('🔄', 'Criando nova migração...')\n      this.executar('npx prisma migrate dev --name fix_schema_complete')\n      \n      this.log('✅', 'Problemas do Prisma corrigidos!')\n      \n    } catch (e) {\n      this.erro('Falha ao corrigir Prisma', e)\n      throw e\n    }\n  }\n\n  async listarTabelas() {\n    const r = await this.clienteCRM.query(`\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public' AND table_type = 'BASE TABLE'\n      ORDER BY table_name\n    `)\n    return r.rows.map((x) => x.table_name)\n  }\n\n  async seedBasico() {\n    this.log('🌱', 'Verificando dados iniciais...')\n    try {\n      // Verificar se há usuários (nome correto da tabela)\n      const r = await this.clienteCRM.query(`SELECT COUNT(*)::int AS n FROM usuarios`)\n      if (r.rows[0].n > 0) {\n        this.log('✅', 'Já há dados. Pulando seed.')\n        return\n      }\n    } catch (e) {\n      this.log('ℹ️', 'Tabelas ainda não existem. Pulando seed.')\n      return\n    }\n\n    try {\n      const bcrypt = require('bcryptjs')\n      \n      // Criar empresa demo (nome correto da tabela)\n      await this.clienteCRM.query(`\n        INSERT INTO \"empresas\" (id, nome, \"createdAt\", \"updatedAt\") \n        VALUES ('demo-empresa', 'Vision CRM Demo', NOW(), NOW()) \n        ON CONFLICT (id) DO NOTHING\n      `)\n\n      // Criar usuário admin com trial válido por 30 dias (email correto)\n      const hash = await bcrypt.hash('123456', 10)\n      const agora = new Date()\n      const trialEnd = new Date(agora.getTime() + 30 * 24 * 60 * 60 * 1000) // 30 dias\n      \n      await this.clienteCRM.query(`\n        INSERT INTO \"usuarios\" (\n          id, nome, email, senha, \"empresaId\", plano, \"trialStart\", \"trialEnd\", \n          \"isActive\", \"createdAt\", \"updatedAt\"\n        ) \n        VALUES (\n          'demo-user', 'Admin Vision', 'admin@demo.com', $1, 'demo-empresa', \n          'PREMIUM', $2, $3, true, NOW(), NOW()\n        )\n        ON CONFLICT (email) DO NOTHING\n      `, [hash, agora, trialEnd])\n\n      // Criar clientes demo (nome correto da tabela)\n      await this.clienteCRM.query(`\n        INSERT INTO \"clientes\" (\n          id, nome, email, telefone, \"nomeEmpresa\", cargo, status, \n          \"usuarioId\", \"empresaId\", \"createdAt\", \"updatedAt\"\n        ) \n        VALUES \n          (\n            'cliente-demo-1', 'João Silva', 'joao@empresa.com', '(11) 99999-9999', \n            'Empresa ABC', 'Diretor', 'ATIVO', 'demo-user', 'demo-empresa', NOW(), NOW()\n          ),\n          (\n            'cliente-demo-2', 'Maria Santos', 'maria@startup.com', '(11) 88888-8888', \n            'Startup XYZ', 'CEO', 'ATIVO', 'demo-user', 'demo-empresa', NOW(), NOW()\n          )\n        ON CONFLICT (id) DO NOTHING\n      `)\n\n      // Criar dados exemplo para o Kanban\n      await this.seedKanban()\n      \n      this.log('✅', `Usuário criado com sucesso!`)\n      this.log('📧', `Email: admin@demo.com`)\n      this.log('🔐', `Senha: 123456`)\n      this.log('🎯', `Plano: PREMIUM (30 dias)`)\n      this.log('📅', `Trial válido até: ${trialEnd.toLocaleDateString('pt-BR')}`)\n    } catch (e) {\n      this.log('⚠️', `Seed falhou: ${e.message}`)\n      console.error(e)\n    }\n  }\n\n  async seedKanban() {\n    this.log('🎯', 'Criando dados exemplo para Kanban...')\n    \n    // Oportunidades para o Kanban (diferentes status)\n    const oportunidades = [\n      { id: 'opp-1', titulo: 'Venda Software ERP', status: 'LEAD', valor: 50000, clienteId: 'cliente-demo-1' },\n      { id: 'opp-2', titulo: 'Consultoria Digital', status: 'QUALIFICADO', valor: 25000, clienteId: 'cliente-demo-2' },\n      { id: 'opp-3', titulo: 'App Mobile', status: 'PROPOSTA', valor: 80000, clienteId: 'cliente-demo-1' },\n      { id: 'opp-4', titulo: 'Sistema Web Completo', status: 'NEGOCIACAO', valor: 120000, clienteId: 'cliente-demo-2' },\n      { id: 'opp-5', titulo: 'E-commerce Premium', status: 'FECHADO', valor: 75000, clienteId: 'cliente-demo-1' }\n    ]\n\n    for (const opp of oportunidades) {\n      try {\n        await this.clienteCRM.query(`\n          INSERT INTO \"oportunidades\" (\n            id, titulo, status, valor, \"clienteId\", \"usuarioId\", \"empresaId\", \n            \"createdAt\", \"updatedAt\"\n          ) \n          VALUES ($1, $2, $3, $4, $5, 'demo-user', 'demo-empresa', NOW(), NOW())\n          ON CONFLICT (id) DO NOTHING\n        `, [opp.id, opp.titulo, opp.status, opp.valor, opp.clienteId])\n      } catch (e) {\n        this.log('⚠️', `Erro ao criar oportunidade ${opp.titulo}: ${e.message}`)\n      }\n    }\n\n    // Criar algumas tarefas exemplo\n    const tarefas = [\n      { id: 'task-1', titulo: 'Follow-up Cliente João', status: 'PENDENTE', prioridade: 'ALTA', clienteId: 'cliente-demo-1' },\n      { id: 'task-2', titulo: 'Preparar Proposta Maria', status: 'EM_PROGRESSO', prioridade: 'MEDIA', clienteId: 'cliente-demo-2' },\n      { id: 'task-3', titulo: 'Reunião Kickoff', status: 'CONCLUIDA', prioridade: 'ALTA', clienteId: 'cliente-demo-1' }\n    ]\n\n    for (const tarefa of tarefas) {\n      try {\n        const dataVencimento = new Date()\n        dataVencimento.setDate(dataVencimento.getDate() + Math.floor(Math.random() * 10) + 1)\n        \n        await this.clienteCRM.query(`\n          INSERT INTO \"tarefas\" (\n            id, titulo, status, prioridade, \"dataVencimento\", \"clienteId\", \n            \"usuarioId\", \"createdAt\", \"updatedAt\"\n          ) \n          VALUES ($1, $2, $3, $4, $5, $6, 'demo-user', NOW(), NOW())\n          ON CONFLICT (id) DO NOTHING\n        `, [tarefa.id, tarefa.titulo, tarefa.status, tarefa.prioridade, dataVencimento, tarefa.clienteId])\n      } catch (e) {\n        this.log('⚠️', `Erro ao criar tarefa ${tarefa.titulo}: ${e.message}`)\n      }\n    }\n\n    this.log('✅', 'Dados exemplo do Kanban e tarefas criados')\n  }\n\n  async testarConexao() {\n    const r = await this.clienteCRM.query('SELECT NOW() as agora, current_database() as db')\n    this.log('🧪', `Conexão ok - DB: ${r.rows[0].db} em ${r.rows[0].agora.toLocaleString('pt-BR')}`)\n    \n    const tabelas = await this.listarTabelas()\n    this.log('📊', `Tabelas encontradas: ${tabelas.length}`)\n    tabelas.forEach((t) => console.log(`   - ${t}`))\n  }\n\n  async validarSchema() {\n    try {\n      const tabelas = await this.listarTabelas()\n      const tabelasEsperadas = ['usuarios', 'empresas', 'clientes', 'oportunidades', 'tarefas']\n      \n      const faltando = tabelasEsperadas.filter(t => !tabelas.includes(t))\n      if (faltando.length > 0) {\n        this.log('⚠️', `Tabelas faltando: ${faltando.join(', ')}`)\n        return false\n      } else {\n        this.log('✅', 'Todas as tabelas principais estão presentes')\n      }\n\n      // Verificar campos do trial\n      try {\n        await this.clienteCRM.query('SELECT plano, \"trialStart\", \"trialEnd\", \"isActive\" FROM usuarios LIMIT 1')\n        this.log('✅', 'Sistema de trial configurado corretamente')\n      } catch (e) {\n        this.log('⚠️', 'Campos de trial não encontrados - será corrigido')\n        return false\n      }\n\n      // Verificar dados do Kanban\n      try {\n        const oppCount = await this.clienteCRM.query('SELECT COUNT(*) as count FROM oportunidades')\n        this.log('✅', `Sistema Kanban: ${oppCount.rows[0].count} oportunidades`)\n      } catch (e) {\n        this.log('⚠️', 'Dados do Kanban não encontrados')\n      }\n\n      return true\n    } catch (e) {\n      this.log('⚠️', `Validação do schema falhou: ${e.message}`)\n      return false\n    }\n  }\n\n  async resetCompleto() {\n    this.log('🔄', 'Executando reset completo...')\n    \n    try {\n      // Parar qualquer processo que possa estar usando o banco\n      await this.limpar()\n      \n      // Limpar cache\n      await this.limparCache()\n      \n      // Reset do Prisma\n      if (this.prismaDisponivel()) {\n        this.log('🗑️', 'Resetando Prisma...')\n        try {\n          this.executar('npx prisma migrate reset --force')\n        } catch (e) {\n          this.log('⚠️', 'Reset do Prisma falhou, continuando...')\n        }\n      }\n      \n      this.log('✅', 'Reset completo executado')\n    } catch (e) {\n      this.log('⚠️', `Erro durante reset: ${e.message}`)\n    }\n  }\n\n  async corrigirAutenticacao() {\n    this.log('🔐', 'Corrigindo problemas de autenticação...')\n    \n    try {\n      // Reconectar como admin\n      await this.conectarAdmin()\n      \n      // Dropar e recriar o usuário\n      try {\n        await this.clienteAdmin.query(`DROP USER IF EXISTS ${CONFIG_CRM.usuario}`)\n        this.log('🗑️', 'Usuário antigo removido')\n      } catch (e) {\n        this.log('ℹ️', 'Usuário não existia')\n      }\n      \n      // Recriar usuário com permissões completas\n      await this.clienteAdmin.query(`CREATE USER ${CONFIG_CRM.usuario} WITH PASSWORD '${CONFIG_CRM.senha}' CREATEDB CREATEROLE`)\n      await this.clienteAdmin.query(`ALTER DATABASE ${CONFIG_CRM.database} OWNER TO ${CONFIG_CRM.usuario}`)\n      await this.clienteAdmin.query(`GRANT ALL PRIVILEGES ON DATABASE ${CONFIG_CRM.database} TO ${CONFIG_CRM.usuario}`)\n      \n      this.log('✅', 'Autenticação corrigida')\n      \n    } catch (e) {\n      this.log('⚠️', `Erro ao corrigir autenticação: ${e.message}`)\n      throw e\n    }\n  }\n\n  async corrigirUsuario() {\n    this.log('👤', 'Corrigindo usuário do banco...')\n    \n    try {\n      // Tentar alterar a senha primeiro\n      await this.clienteAdmin.query(`ALTER USER ${CONFIG_CRM.usuario} WITH PASSWORD '${CONFIG_CRM.senha}'`)\n      \n      // Garantir permissões\n      await this.clienteAdmin.query(`ALTER DATABASE ${CONFIG_CRM.database} OWNER TO ${CONFIG_CRM.usuario}`)\n      await this.clienteAdmin.query(`GRANT ALL PRIVILEGES ON DATABASE ${CONFIG_CRM.database} TO ${CONFIG_CRM.usuario}`)\n      \n      this.log('✅', 'Usuário corrigido')\n      \n    } catch (e) {\n      this.log('⚠️', 'Correção simples falhou, usando correção completa...')\n      await this.corrigirAutenticacao()\n    }\n  }\n\n  async resetBancoCompleto() {\n    this.log('🗄️', 'Reset completo do banco...')\n    \n    try {\n      // Dropar e recriar o banco\n      await this.clienteAdmin.query(`DROP DATABASE IF EXISTS \"${CONFIG_CRM.database}\"`)\n      await this.clienteAdmin.query(`CREATE DATABASE \"${CONFIG_CRM.database}\"`)\n      \n      // Recriar usuário\n      await this.corrigirAutenticacao()\n      \n      this.log('✅', 'Banco resetado completamente')\n      \n    } catch (e) {\n      this.log('⚠️', `Erro no reset do banco: ${e.message}`)\n      throw e\n    }\n  }\n\n  async corrigirPrismaCompleto() {\n    this.log('🔧', 'Correção completa do Prisma...')\n    \n    try {\n      // Limpar tudo relacionado ao Prisma\n      await this.limparCache()\n      \n      // Forçar reset das migrações\n      try {\n        this.executar('npx prisma migrate reset --force')\n      } catch (e) {\n        this.log('ℹ️', 'Reset de migrações não necessário')\n      }\n      \n      // Regenerar client\n      this.executar('npx prisma generate')\n      \n      // Aplicar schema diretamente\n      this.executar('npx prisma db push --force-reset')\n      \n      this.log('✅', 'Prisma corrigido completamente')\n      \n    } catch (e) {\n      this.log('⚠️', `Erro na correção do Prisma: ${e.message}`)\n      throw e\n    }\n  }\n\n  async rodarPrismaInteligente() {\n    if (!this.prismaDisponivel()) {\n      this.log('ℹ️', 'Prisma não encontrado (prisma/schema.prisma). Pulando etapa.')\n      return\n    }\n\n    try {\n      await this.instalarDependencias()\n\n      this.log('🔧', 'Gerando client Prisma...')\n      this.executar('npx prisma generate')\n\n      this.log('🔄', 'Aplicando migrações com auto-correção...')\n      \n      // Tentar migrate dev\n      try {\n        this.executar('npx prisma migrate dev --name auto_migration')\n        this.log('✅', 'Migrações aplicadas com sucesso')\n      } catch (e1) {\n        this.log('⚠️', 'Migrate dev falhou, tentando db push...')\n        \n        try {\n          this.executar('npx prisma db push --force-reset')\n          this.log('✅', 'Schema aplicado com db push')\n        } catch (e2) {\n          this.log('⚠️', 'DB push falhou, tentando correção completa...')\n          \n          // Correção mais agressiva\n          await this.corrigirPrismaCompleto()\n        }\n      }\n\n      // Regenerar client final\n      this.log('🔄', 'Regenerando client final...')\n      this.executar('npx prisma generate')\n\n      this.log('✅', 'Prisma configurado com sucesso')\n      \n    } catch (e) {\n      this.log('⚠️', 'Falha no Prisma, tentando correção automática...')\n      await this.corrigirPrismaCompleto()\n    }\n  }\n\n  async corrigirSchemaCompleto() {\n    this.log('📋', 'Corrigindo schema do banco...')\n    \n    try {\n      // Aplicar schema diretamente\n      this.executar('npx prisma db push --force-reset')\n      \n      // Regenerar client\n      this.executar('npx prisma generate')\n      \n      // Criar nova migração\n      try {\n        this.executar('npx prisma migrate dev --name schema_fix')\n      } catch (e) {\n        this.log('ℹ️', 'Migração não necessária, schema já aplicado')\n      }\n      \n      this.log('✅', 'Schema corrigido')\n      \n    } catch (e) {\n      this.log('⚠️', `Erro na correção do schema: ${e.message}`)\n      throw e\n    }\n  }\n\n  async diagnosticar() {\n    this.log('🔍', 'Executando diagnóstico...')\n    \n    console.log('\\n📋 Status do Ambiente:')\n    console.log(`   Node.js: ${process.version}`)\n    console.log(`   NPM: ${execSync('npm --version', { encoding: 'utf8' }).trim()}`)\n    console.log(`   Diretório: ${this.raizProjeto}`)\n    console.log(`   .env existe: ${fs.existsSync(this.caminhoEnv) ? '✅' : '❌'}`)\n    console.log(`   node_modules existe: ${this.nodeModulesExiste() ? '✅' : '❌'}`)\n    console.log(`   schema.prisma existe: ${this.prismaDisponivel() ? '✅' : '❌'}`)\n    \n    // Testar conexão do banco\n    try {\n      await this.conectarAdmin()\n      await this.validarPostgreSQL()\n      console.log(`   PostgreSQL: ✅`)\n      await this.conectarCRM()\n      console.log(`   Banco CRM: ✅`)\n      const schemaValido = await this.validarSchema()\n      console.log(`   Schema válido: ${schemaValido ? '✅' : '❌'}`)\n    } catch (e) {\n      console.log(`   Conexão DB: ❌ ${e.message}`)\n    }\n  }\n\n  async limpar() {\n    try { if (this.clienteCRM) await this.clienteCRM.end() } catch (_) {}\n    try { if (this.clienteAdmin) await this.clienteAdmin.end() } catch (_) {}\n  }\n\n  async executarFluxo() {\n    console.log('🚀 Vision CRM - Setup Inteligente v2.1')\n    console.log('=====================================')\n    console.log('🧠 Detectando e corrigindo problemas automaticamente...')\n    \n    let tentativas = 0\n    const maxTentativas = 3\n    \n    while (tentativas < maxTentativas) {\n      try {\n        tentativas++\n        this.log('🔄', `Tentativa ${tentativas}/${maxTentativas}`)\n        \n        // Conectar e validar PostgreSQL\n        await this.conectarAdmin()\n        await this.validarPostgreSQL()\n        \n        // Criar banco e usuário\n        await this.criarBanco()\n        await this.criarUsuario()\n        \n        // Tentar conectar ao CRM\n        try {\n          await this.conectarCRM()\n        } catch (e) {\n          this.log('⚠️', 'Problema de conexão detectado, corrigindo...')\n          await this.corrigirUsuario()\n          await this.conectarCRM()\n        }\n        \n        await this.ajustarPermissoesSchema()\n        await this.backupEnvExistente()\n        this.escreverEnv()\n        \n        // Rodar Prisma com auto-correção\n        await this.rodarPrismaInteligente()\n        \n        await this.seedBasico()\n        await this.testarConexao()\n        const schemaValido = await this.validarSchema()\n        \n        if (!schemaValido) {\n          this.log('🔧', 'Schema inválido detectado, corrigindo...')\n          await this.corrigirSchemaCompleto()\n          await this.validarSchema()\n        }\n        \n        console.log('\\n=====================================')\n        this.log('🎉', 'Setup concluído com sucesso!')\n        this.log('✨', 'Todos os problemas foram resolvidos automaticamente!')\n        console.log('')\n        this.log('🔗', `Database URL: ${montarDatabaseUrl()}`)\n        this.log('🚀', 'Para iniciar: npm run dev')\n        this.log('👤', 'Login demo: admin@demo.com / 123456')\n        this.log('📊', 'Kanban: Dados exemplo incluídos')\n        console.log('')\n        \n        return // Sucesso! Sair do loop\n        \n      } catch (e) {\n        this.log('⚠️', `Tentativa ${tentativas} falhou: ${e.message}`)\n        \n        if (tentativas < maxTentativas) {\n          this.log('🔄', 'Executando correções automáticas...')\n          \n          try {\n            // Auto-correção baseada no tipo de erro\n            if (e.message.includes('Authentication failed') || e.message.includes('P1000')) {\n              await this.corrigirAutenticacao()\n            } else if (e.message.includes('database') && e.message.includes('does not exist')) {\n              await this.resetBancoCompleto()\n            } else if (e.message.includes('prisma') || e.message.includes('migrate')) {\n              await this.corrigirPrismaCompleto()\n            } else {\n              await this.resetCompleto()\n            }\n            \n            await this.limpar()\n            await esperar(2000) // Aguardar 2 segundos\n            \n          } catch (correcaoError) {\n            this.log('⚠️', `Correção automática falhou: ${correcaoError.message}`)\n          }\n        } else {\n          // Última tentativa falhou\n          this.erro('Setup falhou após múltiplas tentativas', e)\n          console.log('\\n🆘 Problema persistente detectado!')\n          console.log('📞 Entre em contato com o suporte técnico')\n          console.log('📋 Anexe este log completo para análise')\n          process.exit(1)\n        }\n      }\n    }\n    \n    await this.limpar()\n  }\n}\n\n// Comandos da CLI\nif (require.main === module) {\n  const args = process.argv.slice(2)\n  const setup = new SetupBanco()\n  \n  if (args.includes('--help') || args.includes('-h')) {\n    console.log(`\n🚀 Vision CRM Setup v2.0\n\nUso:\n  node setup.js                    # Setup completo\n  node setup.js --reset           # Reset completo (APAGA TUDO!)\n  node setup.js --migrate         # Apenas migrações\n  node setup.js --seed            # Apenas seed\n  node setup.js --diagnostics     # Diagnóstico do ambiente\n  node setup.js --fix-prisma      # Corrigir problemas do Prisma\n  \nExemplos:\n  node setup.js --reset && node setup.js    # Reset total e reconfigurar\n  node setup.js --fix-prisma                # Corrigir TypeScript errors\n  \nOpções:\n  --help, -h                       # Mostrar esta ajuda\n  --reset                          # Reset do banco (APAGA TUDO!)\n  --migrate                        # Rodar apenas migrações\n  --seed                           # Rodar apenas seed  \n  --diagnostics                    # Checar status do ambiente\n  --fix-prisma                     # Limpar cache e regenerar Prisma\n    `)\n    process.exit(0)\n  }\n  \n  if (args.includes('--diagnostics')) {\n    setup.diagnosticar()\n      .then(() => setup.limpar())\n      .catch(console.error)\n    return\n  }\n  \n  if (args.includes('--fix-prisma')) {\n    console.log('🔧 Corrigindo problemas do Prisma...')\n    setup.conectarAdmin()\n      .then(() => setup.conectarCRM())\n      .then(() => setup.corrigirPrisma())\n      .then(() => setup.limpar())\n      .then(() => console.log('✅ Prisma corrigido! Execute \"npm run dev\" para testar'))\n      .catch(console.error)\n    return\n  }\n  \n  if (args.includes('--reset')) {\n    console.log('⚠️  ATENÇÃO: Isso vai APAGAR todos os dados!')\n    console.log('🔄 Executando reset completo...')\n    setup.resetCompleto()\n      .then(() => console.log('✅ Reset concluído. Execute \"node setup.js\" para reconfigurar'))\n      .catch(console.error)\n    return\n  }\n  \n  if (args.includes('--migrate')) {\n    console.log('🔄 Executando apenas migrações...')\n    setup.limparCache()\n    setup.executar('npx prisma migrate dev --name manual_migration')\n    setup.executar('npx prisma generate')\n    console.log('✅ Migrações concluídas')\n    process.exit(0)\n  }\n  \n  if (args.includes('--seed')) {\n    setup.conectarCRM()\n      .then(() => setup.seedBasico())\n      .then(() => setup.limpar())\n      .catch(console.error)\n    return\n  }\n  \n  setup.executarFluxo().catch(console.error)\n}\n\nmodule.exports = SetupBanco\n","size_bytes":29691},"src/App.tsx":{"content":"\nimport React from 'react';\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport AppLayout from \"./components/layout/AppLayout\";\n\n// Public Pages\nimport { Home } from \"./pages/Home\";\nimport { Login } from \"./pages/Login\";\nimport { Register } from \"./pages/Register\";\nimport { Plans } from \"./pages/Plans\";\n\n// Protected Pages (Dashboard)\nimport { Dashboard } from \"./pages/Dashboard\";\nimport { Clients } from \"./pages/Clients\";\nimport { Sales } from \"./pages/Sales\";\nimport Tasks from \"./pages/Tasks\";\nimport { CalendarPage } from \"./pages/Calendar\";\nimport { Reports } from \"./pages/Reports\";\nimport { Integrations } from \"./pages/Integrations\";\nimport { Chat } from \"./pages/Chat\";\nimport { Subscription } from \"./pages/Subscription\";\nimport { Settings } from \"./pages/Settings\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <BrowserRouter>\n        <Routes>\n          {/* ==================== ROTAS PÚBLICAS ==================== */}\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/register\" element={<Register />} />\n          <Route path=\"/plans\" element={<Plans />} />\n          <Route path=\"/pricing\" element={<Navigate to=\"/plans\" replace />} />\n          \n          {/* ==================== ROTAS PROTEGIDAS (DASHBOARD) ==================== */}\n          <Route path=\"/dashboard\" element={<AppLayout><Dashboard /></AppLayout>} />\n          \n          {/* Clientes */}\n          <Route path=\"/clients\" element={<AppLayout><Clients /></AppLayout>} />\n          <Route path=\"/clientes\" element={<Navigate to=\"/clients\" replace />} />\n          \n          {/* Vendas/Oportunidades */}\n          <Route path=\"/sales\" element={<AppLayout><Sales /></AppLayout>} />\n          <Route path=\"/oportunidades\" element={<Navigate to=\"/sales\" replace />} />\n          <Route path=\"/vendas\" element={<Navigate to=\"/sales\" replace />} />\n          <Route path=\"/pipeline\" element={<Navigate to=\"/sales\" replace />} />\n          \n          {/* Tarefas */}\n          <Route path=\"/tasks\" element={<AppLayout><Tasks /></AppLayout>} />\n          <Route path=\"/tarefas\" element={<Navigate to=\"/tasks\" replace />} />\n          \n          {/* Calendário */}\n          <Route path=\"/calendar\" element={<AppLayout><CalendarPage /></AppLayout>} />\n          <Route path=\"/agenda\" element={<Navigate to=\"/calendar\" replace />} />\n          \n          {/* Relatórios */}\n          <Route path=\"/reports\" element={<AppLayout><Reports /></AppLayout>} />\n          <Route path=\"/relatorios\" element={<Navigate to=\"/reports\" replace />} />\n          \n          {/* Integrações */}\n          <Route path=\"/integrations\" element={<AppLayout><Integrations /></AppLayout>} />\n          <Route path=\"/integracoes\" element={<Navigate to=\"/integrations\" replace />} />\n          \n          {/* Chat */}\n          <Route path=\"/chat\" element={<AppLayout><Chat /></AppLayout>} />\n          \n          {/* Assinatura */}\n          <Route path=\"/subscription\" element={<AppLayout><Subscription /></AppLayout>} />\n          <Route path=\"/assinatura\" element={<Navigate to=\"/subscription\" replace />} />\n          <Route path=\"/billing\" element={<Navigate to=\"/subscription\" replace />} />\n          \n          {/* Configurações */}\n          <Route path=\"/settings\" element={<AppLayout><Settings /></AppLayout>} />\n          <Route path=\"/configuracoes\" element={<Navigate to=\"/settings\" replace />} />\n          \n          {/* Perfil */}\n          <Route path=\"/profile\" element={<AppLayout><div className=\"p-6\"><h1 className=\"text-2xl font-bold\">Perfil do Usuário</h1><p>Em desenvolvimento...</p></div></AppLayout>} />\n          <Route path=\"/perfil\" element={<Navigate to=\"/profile\" replace />} />\n          \n          {/* 404 Route */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","size_bytes":4391},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 220 13% 18%;\n    --primary-foreground: 0 0% 100%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 258 88% 66%;\n\n    --radius: 0.75rem;\n\n    --sidebar-background: 0 0% 100%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 258 88% 66%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 258 88% 66%;\n\n    /* Glass effect variables for light theme */\n    --glass-bg: rgba(255, 255, 255, 0.25);\n    --glass-border: rgba(255, 255, 255, 0.3);\n    --glass-shadow: rgba(31, 38, 135, 0.15);\n    --glass-inset: rgba(255, 255, 255, 0.5);\n    --hover-glass: rgba(139, 92, 246, 0.1);\n    --active-glass: rgba(139, 92, 246, 0.15);\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 84% 4.9%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 258 88% 66%;\n\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 258 88% 66%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 258 88% 66%;\n\n    /* Glass effect variables for dark theme */\n    --glass-bg: rgba(15, 23, 42, 0.4);\n    --glass-border: rgba(71, 85, 105, 0.5);\n    --glass-shadow: rgba(0, 0, 0, 0.4);\n    --glass-inset: rgba(255, 255, 255, 0.15);\n    --hover-glass: rgba(139, 92, 246, 0.2);\n    --active-glass: rgba(139, 92, 246, 0.25);\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    min-height: 100vh;\n  }\n\n}\n\n@layer components {\n  .card-hover {\n    @apply transition-all duration-300 hover:shadow-lg;\n  }\n\n  .glass-card {\n    background: var(--glass-bg);\n    backdrop-filter: blur(16px);\n    -webkit-backdrop-filter: blur(16px);\n    border: 1px solid var(--glass-border);\n    box-shadow:\n      0 8px 32px 0 var(--glass-shadow),\n      0 1px 0 0 var(--glass-inset) inset,\n      0 0 0 1px rgba(255, 255, 255, 0.1) inset;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .glass-card:hover {\n    border-color: rgba(255, 255, 255, 0.2);\n    box-shadow:\n      0 12px 40px 0 var(--glass-shadow),\n      0 1px 0 0 var(--glass-inset) inset,\n      0 0 0 1px rgba(255, 255, 255, 0.15) inset;\n  }\n\n  /* Light theme specific borders for Kanban cards */\n  :root .glass-card {\n    border: 1px solid rgba(0, 0, 0, 0.1);\n  }\n\n  :root .glass-card:hover {\n    border-color: rgba(0, 0, 0, 0.15);\n  }\n\n  /* Kanban column headers in light theme */\n  :root .kanban-header {\n    border: 1px solid rgba(0, 0, 0, 0.08);\n  }\n\n  /* Card titles and content borders in light theme */\n  :root .kanban-card {\n    border: 1px solid rgba(0, 0, 0, 0.12);\n  }\n\n  :root .kanban-card:hover {\n    border-color: rgba(0, 0, 0, 0.18);\n  }\n\n  .glass-button {\n    background: var(--glass-bg);\n    backdrop-filter: blur(12px);\n    -webkit-backdrop-filter: blur(12px);\n    border: 1px solid var(--glass-border);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n\n  .glass-button:active {\n    background: var(--active-glass);\n  }\n\n  .tag {\n    @apply inline-flex items-center rounded-full px-3 py-1 text-xs font-medium glass-card;\n  }\n\n}\n\n\n@keyframes slide-up {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fade-in-scale {\n  from {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.slide-up {\n  animation: slide-up 0.3s ease-out forwards;\n}\n\n.fade-in-scale {\n  animation: fade-in-scale 0.5s ease-out forwards;\n}\n\n\n/* Removed problematic interactive-element class that was blocking clicks */\n\n/* Drag and Drop improvements */\n[data-rfd-draggable-context-id] {\n  cursor: grab !important;\n}\n\n[data-rfd-draggable-context-id]:active {\n  cursor: grabbing !important;\n}\n\n/* Fix drag offset issues */\n[data-rfd-drag-handle-context-id] {\n  touch-action: none;\n  user-select: none;\n}\n\n/* Ensure draggable items maintain proper positioning during drag */\n[data-rfd-draggable-id] {\n  transform-origin: top left;\n}\n\n\n/* Ensure proper drag handle behavior */\n[data-rfd-drag-handle-dragging=\"true\"] {\n  cursor: grabbing !important;\n}","size_bytes":5522},"src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"backend/src/index.ts":{"content":"import { config as dotenvConfig } from 'dotenv';\nimport { resolve } from 'path';\nimport express from 'express';\nimport cors from 'cors';\nimport { PrismaClient } from '@prisma/client';\nimport { detectServerEnvironment, getCorsOrigins, logEnvironmentConfig } from '../../shared/environment';\nimport authRoutes from './routes/auth';\nimport clientesRoutes from './routes/clientes';\nimport tarefasRoutes from './routes/tarefas';\nimport oportunidadesRoutes from './routes/oportunidades';\nimport trialRoutes from './routes/trial';\n\n// Configurar dotenv para carregar .env de múltiplos locais\n[\n  resolve(process.cwd(), 'backend/.env'),\n  resolve(process.cwd(), '.env'),\n  resolve(__dirname, '../.env')\n].forEach(path => {\n  dotenvConfig({ path, override: false });\n});\n\nconst app = express();\nconst prisma = new PrismaClient();\n\n// Configuração automática do ambiente\nconst environmentConfig = detectServerEnvironment();\nconst PORT = environmentConfig.backendPort!;\n\n// Verificação de segurança - JWT Secret obrigatório\nif (!process.env.JWT_SECRET) {\n  console.error('❌ JWT_SECRET é obrigatório. Configure a variável de ambiente.');\n  if (environmentConfig.isDevelopment || environmentConfig.isReplit) {\n    console.warn('⚠️  Continuando sem JWT_SECRET em ambiente de desenvolvimento/Replit');\n  } else {\n    process.exit(1);\n  }\n}\n\n// Configuração segura do CORS baseada no ambiente\nconst allowedOrigins = getCorsOrigins(environmentConfig);\n\napp.use(cors({\n  origin: (origin, callback) => {\n    // Permite requisições sem origin (ex: Postman, mobile apps)\n    if (!origin) return callback(null, true);\n    \n    // Verificar lista exata primeiro\n    if (allowedOrigins.includes(origin)) {\n      return callback(null, true);\n    }\n    \n    // Para Replit, verificar padrões dinâmicos\n    if (environmentConfig.isReplit) {\n      const replitPattern = /^https:\\/\\/[\\w-]+-[\\w-]+(-\\d+)?\\.(replit\\.app|repl\\.co)$/;\n      if (replitPattern.test(origin)) {\n        return callback(null, true);\n      }\n    }\n    \n    // Para desenvolvimento, ser mais permissivo com localhost\n    if (environmentConfig.isDevelopment) {\n      const devPattern = /^https?:\\/\\/(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0)(:\\d+)?$/;\n      if (devPattern.test(origin)) {\n        return callback(null, true);\n      }\n    }\n    \n    callback(new Error('Não permitido pelo CORS'));\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Log das requisições  \napp.use((req: express.Request, res: express.Response, next: express.NextFunction) => {\n  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);\n  next();\n});\n\n// Rotas\napp.use('/api/auth', authRoutes);\napp.use('/api/clientes', clientesRoutes);\napp.use('/api/tarefas', tarefasRoutes);\napp.use('/api/oportunidades', oportunidadesRoutes);\napp.use('/api/trial', trialRoutes);\n\n// Rota de teste\napp.get('/api/health', (req: express.Request, res: express.Response) => {\n  res.json({ \n    message: 'Backend funcionando!', \n    timestamp: new Date().toISOString(),\n    port: PORT,\n    host: req.get('host'),\n    url: req.url,\n    origin: req.get('origin') || 'N/A'\n  });\n});\n\n// Middleware de erro\napp.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  console.error('Erro:', err);\n  res.status(500).json({ \n    message: 'Erro interno do servidor',\n    error: process.env.NODE_ENV === 'development' ? err.message : 'Erro interno'\n  });\n});\n\n// Rota 404\napp.use('*', (req: express.Request, res: express.Response) => {\n  res.status(404).json({ message: 'Rota não encontrada' });\n});\n\n// Iniciar servidor\nasync function startServer() {\n  try {\n    // Log da configuração de ambiente\n    logEnvironmentConfig(environmentConfig, 'backend');\n    console.log(`🔗 Origins permitidas no CORS:`, allowedOrigins);\n    \n    // Iniciar servidor primeiro\n    app.listen(PORT, '0.0.0.0', () => {\n      console.log(`🚀 Servidor rodando na porta ${PORT}`);\n      console.log(`📊 Health check: http://0.0.0.0:${PORT}/api/health`);\n      console.log(`🌐 Servidor acessível em todas as interfaces de rede`);\n      \n      // Conectar ao banco após o servidor estar rodando\n      connectToDatabase();\n    });\n  } catch (error) {\n    console.error('❌ Erro ao iniciar servidor:', error);\n    process.exit(1);\n  }\n}\n\nasync function connectToDatabase() {\n  try {\n    await prisma.$connect();\n    console.log('✅ Conectado ao banco de dados');\n  } catch (error) {\n    console.error('⚠️  Erro ao conectar com o banco de dados:', error);\n    console.log('🔄 Tentando reconectar em 5 segundos...');\n    setTimeout(connectToDatabase, 5000);\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('\\\\n⏹️  Desligando servidor...');\n  await prisma.$disconnect();\n  process.exit(0);\n});\n\nstartServer();","size_bytes":4999},"src/contexts/ThemeContext.tsx":{"content":"\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Default to light theme, check for stored preference\n    const savedTheme = localStorage.getItem('crm-theme');\n    if (savedTheme === 'dark' || savedTheme === 'light') {\n      return savedTheme;\n    }\n    // Always default to light theme\n    return 'light';\n  });\n\n  useEffect(() => {\n    // Apply theme to document element\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    localStorage.setItem('crm-theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n","size_bytes":1362},"src/hooks/use-mobile.tsx":{"content":"\nimport * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\n/**\n * Hook para detectar se o dispositivo atual é móvel\n * Retorna verdadeiro se a largura da tela for menor que o ponto de quebra móvel\n */\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":711},"src/hooks/use-toast.ts":{"content":"\n// The issue is likely with React import\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3937},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/pages/Calendar.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { CalendarClock, Users, Phone, FileText } from 'lucide-react';\n\nexport function CalendarPage() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n\n  // Dados temporários até conectar com a API\n  const mockEvents = [\n    {\n      id: '1',\n      title: 'Reunião com cliente',\n      description: 'Apresentação de proposta',\n      date: new Date(),\n      type: 'meeting',\n      priority: 'high'\n    },\n    {\n      id: '2',\n      title: 'Ligação de follow-up',\n      description: 'Verificar interesse',\n      date: new Date(),\n      type: 'call',\n      priority: 'medium'\n    }\n  ];\n\n  const getEventIcon = (type: string) => {\n    switch (type) {\n      case 'meeting':\n        return <Users className=\"h-4 w-4\" />;\n      case 'call':\n        return <Phone className=\"h-4 w-4\" />;\n      case 'task':\n        return <FileText className=\"h-4 w-4\" />;\n      default:\n        return <CalendarClock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-500';\n      case 'medium':\n        return 'bg-amber-500';\n      case 'low':\n        return 'bg-green-500';\n      default:\n        return 'bg-slate-500';\n    }\n  };\n\n  const filteredEvents = selectedDate\n    ? mockEvents.filter(event =>\n        format(event.date, 'yyyy-MM-dd') === format(selectedDate, 'yyyy-MM-dd')\n      )\n    : mockEvents;\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Calendário</h1>\n        <p className=\"text-muted-foreground\">\n          Gerencie seus compromissos e eventos importantes.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle>Calendário</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Calendar\n              mode=\"single\"\n              selected={selectedDate}\n              onSelect={setSelectedDate}\n              className=\"w-full\"\n            />\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle>\n              Eventos para {selectedDate ? format(selectedDate, \"dd 'de' MMMM, yyyy\", { locale: ptBR }) : 'hoje'}\n            </CardTitle>\n            <CardDescription>\n              {filteredEvents.length} evento(s) agendado(s)\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredEvents.length === 0 ? (\n                <p className=\"text-muted-foreground text-center py-8\">\n                  Nenhum evento agendado para esta data.\n                </p>\n              ) : (\n                filteredEvents.map((event) => (\n                  <div key={event.id} className=\"flex items-start space-x-3 p-4 border rounded-lg\">\n                    <div className=\"mt-0.5 bg-muted p-1.5 rounded-full\">\n                      {getEventIcon(event.type)}\n                    </div>\n                    <div className=\"space-y-1 flex-1\">\n                      <div className=\"font-medium text-sm\">{event.title}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {event.description}\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant=\"outline\" className=\"flex items-center gap-1 py-0 px-2\">\n                          <span\n                            className={`w-2 h-2 rounded-full ${getPriorityColor(event.priority)}`}\n                          />\n                          <span>\n                            {event.priority === 'high' && 'Alta'}\n                            {event.priority === 'medium' && 'Média'}\n                            {event.priority === 'low' && 'Baixa'}\n                          </span>\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4508},"src/pages/Chat.tsx":{"content":"\n/**\n * Página de Chat Centralizado\n * Centraliza todas as conversas do Facebook, Instagram e WhatsApp\n */\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Search, Send, Facebook, Instagram, MessageCircle, Phone, Video, MoreHorizontal } from 'lucide-react';\n\ninterface Conversa {\n  id: string;\n  contato: {\n    nome: string;\n    avatar?: string;\n    plataforma: 'facebook' | 'instagram' | 'whatsapp';\n  };\n  ultimaMensagem: {\n    texto: string;\n    horario: Date;\n    enviada: boolean;\n  };\n  naoLidas: number;\n  status: 'ativo' | 'arquivado' | 'pausado';\n}\n\ninterface Mensagem {\n  id: string;\n  texto: string;\n  horario: Date;\n  enviada: boolean;\n  status?: 'enviando' | 'enviada' | 'lida';\n}\n\nconst mockConversas: Conversa[] = [\n  {\n    id: '1',\n    contato: {\n      nome: 'João Silva',\n      avatar: '/placeholder.svg',\n      plataforma: 'whatsapp',\n    },\n    ultimaMensagem: {\n      texto: 'Oi, gostaria de saber mais sobre os produtos',\n      horario: new Date('2024-06-11T14:30:00'),\n      enviada: false,\n    },\n    naoLidas: 2,\n    status: 'ativo',\n  },\n  {\n    id: '2',\n    contato: {\n      nome: 'Maria Costa',\n      avatar: '/placeholder.svg',\n      plataforma: 'instagram',\n    },\n    ultimaMensagem: {\n      texto: 'Obrigada pelo atendimento!',\n      horario: new Date('2024-06-11T13:45:00'),\n      enviada: false,\n    },\n    naoLidas: 0,\n    status: 'ativo',\n  },\n  {\n    id: '3',\n    contato: {\n      nome: 'Pedro Santos',\n      avatar: '/placeholder.svg',\n      plataforma: 'facebook',\n    },\n    ultimaMensagem: {\n      texto: 'Quando vocês abrem?',\n      horario: new Date('2024-06-11T12:20:00'),\n      enviada: false,\n    },\n    naoLidas: 1,\n    status: 'ativo',\n  },\n];\n\nconst mockMensagens: { [key: string]: Mensagem[] } = {\n  '1': [\n    {\n      id: '1',\n      texto: 'Oi, gostaria de saber mais sobre os produtos',\n      horario: new Date('2024-06-11T14:30:00'),\n      enviada: false,\n    },\n    {\n      id: '2',\n      texto: 'Olá! Claro, ficarei feliz em ajudar. Que tipo de produto você está procurando?',\n      horario: new Date('2024-06-11T14:32:00'),\n      enviada: true,\n      status: 'lida',\n    },\n  ],\n  '2': [\n    {\n      id: '3',\n      texto: 'Muito obrigada pelo excelente atendimento!',\n      horario: new Date('2024-06-11T13:45:00'),\n      enviada: false,\n    },\n  ],\n  '3': [\n    {\n      id: '4',\n      texto: 'Quando vocês abrem?',\n      horario: new Date('2024-06-11T12:20:00'),\n      enviada: false,\n    },\n  ],\n};\n\nexport function Chat() {\n  const [conversas, setConversas] = useState<Conversa[]>(mockConversas);\n  const [conversaSelecionada, setConversaSelecionada] = useState<string>('1');\n  const [mensagens, setMensagens] = useState<{ [key: string]: Mensagem[] }>(mockMensagens);\n  const [novaMensagem, setNovaMensagem] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filtroPlataforma, setFiltroPlataforma] = useState<'todas' | 'whatsapp' | 'instagram' | 'facebook'>('todas');\n\n  const getPlataformaIcon = (plataforma: string) => {\n    switch (plataforma) {\n      case 'whatsapp':\n        return <MessageCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'instagram':\n        return <Instagram className=\"h-4 w-4 text-pink-600\" />;\n      case 'facebook':\n        return <Facebook className=\"h-4 w-4 text-blue-600\" />;\n      default:\n        return <MessageCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getPlataformaColor = (plataforma: string) => {\n    switch (plataforma) {\n      case 'whatsapp':\n        return 'bg-green-50 border-green-200';\n      case 'instagram':\n        return 'bg-pink-50 border-pink-200';\n      case 'facebook':\n        return 'bg-blue-50 border-blue-200';\n      default:\n        return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  const conversasFiltradas = conversas.filter(conversa => {\n    const matchesSearch = conversa.contato.nome.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesPlataforma = filtroPlataforma === 'todas' || conversa.contato.plataforma === filtroPlataforma;\n    return matchesSearch && matchesPlataforma;\n  });\n\n  const conversaAtual = conversas.find(c => c.id === conversaSelecionada);\n  const mensagensAtuais = mensagens[conversaSelecionada] || [];\n\n  const formatarHorario = (data: Date) => {\n    return new Intl.DateTimeFormat('pt-BR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(data);\n  };\n\n  const enviarMensagem = () => {\n    if (!novaMensagem.trim()) return;\n\n    const novaMens: Mensagem = {\n      id: Date.now().toString(),\n      texto: novaMensagem,\n      horario: new Date(),\n      enviada: true,\n      status: 'enviando',\n    };\n\n    setMensagens(prev => ({\n      ...prev,\n      [conversaSelecionada]: [...(prev[conversaSelecionada] || []), novaMens],\n    }));\n\n    setNovaMensagem('');\n\n    // Simular envio\n    setTimeout(() => {\n      setMensagens(prev => ({\n        ...prev,\n        [conversaSelecionada]: prev[conversaSelecionada].map(m =>\n          m.id === novaMens.id ? { ...m, status: 'enviada' } : m\n        ),\n      }));\n    }, 1000);\n  };\n\n  const totalNaoLidas = conversas.reduce((total, conversa) => total + conversa.naoLidas, 0);\n\n  return (\n    <div className=\"h-[calc(100vh-8rem)] flex\">\n      {/* Lista de Conversas */}\n      <div className=\"w-80 border-r bg-background flex flex-col\">\n        <div className=\"p-4 border-b\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Chat Centralizado</h2>\n            {totalNaoLidas > 0 && (\n              <Badge variant=\"destructive\">{totalNaoLidas}</Badge>\n            )}\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Buscar conversas...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Tabs value={filtroPlataforma} onValueChange={(value) => setFiltroPlataforma(value as any)}>\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"todas\">Todas</TabsTrigger>\n                <TabsTrigger value=\"whatsapp\">\n                  <MessageCircle className=\"h-4 w-4\" />\n                </TabsTrigger>\n                <TabsTrigger value=\"instagram\">\n                  <Instagram className=\"h-4 w-4\" />\n                </TabsTrigger>\n                <TabsTrigger value=\"facebook\">\n                  <Facebook className=\"h-4 w-4\" />\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          {conversasFiltradas.map((conversa) => (\n            <div\n              key={conversa.id}\n              className={`p-4 border-b cursor-pointer hover:bg-accent transition-colors ${\n                conversaSelecionada === conversa.id ? 'bg-accent' : ''\n              }`}\n              onClick={() => setConversaSelecionada(conversa.id)}\n            >\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"relative\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={conversa.contato.avatar} />\n                    <AvatarFallback>\n                      {conversa.contato.nome.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className={`absolute -bottom-1 -right-1 p-1 rounded-full border-2 border-white ${getPlataformaColor(conversa.contato.plataforma)}`}>\n                    {getPlataformaIcon(conversa.contato.plataforma)}\n                  </div>\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-medium truncate\">{conversa.contato.nome}</h3>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatarHorario(conversa.ultimaMensagem.horario)}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground truncate mt-1\">\n                    {conversa.ultimaMensagem.texto}\n                  </p>\n                  {conversa.naoLidas > 0 && (\n                    <Badge variant=\"destructive\" className=\"mt-2 text-xs\">\n                      {conversa.naoLidas}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {conversaAtual ? (\n          <>\n            {/* Chat Header */}\n            <div className=\"p-4 border-b bg-background\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={conversaAtual.contato.avatar} />\n                    <AvatarFallback>\n                      {conversaAtual.contato.nome.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"font-medium\">{conversaAtual.contato.nome}</h3>\n                    <div className=\"flex items-center space-x-1\">\n                      {getPlataformaIcon(conversaAtual.contato.plataforma)}\n                      <span className=\"text-sm text-muted-foreground capitalize\">\n                        {conversaAtual.contato.plataforma}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Phone className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Video className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Messages */}\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n              {mensagensAtuais.map((mensagem) => (\n                <div\n                  key={mensagem.id}\n                  className={`flex ${mensagem.enviada ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div\n                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                      mensagem.enviada\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted'\n                    }`}\n                  >\n                    <p className=\"text-sm\">{mensagem.texto}</p>\n                    <div className=\"flex items-center justify-end space-x-1 mt-1\">\n                      <span className=\"text-xs opacity-70\">\n                        {formatarHorario(mensagem.horario)}\n                      </span>\n                      {mensagem.enviada && mensagem.status && (\n                        <span className=\"text-xs opacity-70\">\n                          {mensagem.status === 'enviando' && '⏳'}\n                          {mensagem.status === 'enviada' && '✓'}\n                          {mensagem.status === 'lida' && '✓✓'}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Message Input */}\n            <div className=\"p-4 border-t bg-background\">\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  placeholder=\"Digite sua mensagem...\"\n                  value={novaMensagem}\n                  onChange={(e) => setNovaMensagem(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && enviarMensagem()}\n                  className=\"flex-1\"\n                />\n                <Button onClick={enviarMensagem} disabled={!novaMensagem.trim()}>\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-medium\">Selecione uma conversa</h3>\n              <p className=\"text-muted-foreground\">\n                Escolha uma conversa para começar a chatear\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13296},"src/pages/Clients.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Search, \n  Filter, \n  MoreHorizontal, \n  Trash2,\n  PenLine,\n  Phone,\n  Mail,\n  ClipboardList\n} from \"lucide-react\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle\n} from \"@/components/ui/card\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from '@/hooks/use-toast';\nimport { buscarClientes, criarCliente, ApiError, type Cliente } from '@/services/api';\n\nexport function Clients() {\n  const { toast } = useToast();\n  const [clients, setClients] = useState<Cliente[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [clientDialogOpen, setClientDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCreating, setIsCreating] = useState(false);\n  const [newClientData, setNewClientData] = useState({\n    nome: '',\n    email: '',\n    telefone: '',\n    nomeEmpresa: '', // Atualizado para o novo nome do campo\n    cargo: '',\n    endereco: '',\n    observacoes: '',\n    status: 'ATIVO',\n    fonte: '',\n    tags: [] as string[]\n  });\n\n  // Carregar clientes na inicialização\n  useEffect(() => {\n    carregarClientes();\n  }, []);\n\n  const carregarClientes = async () => {\n    try {\n      setIsLoading(true);\n      const response = await buscarClientes();\n      setClients(response.clientes || response || []);\n    } catch (error) {\n      console.error('Erro ao carregar clientes:', error);\n      toast({\n        title: \"Erro ao carregar clientes\",\n        description: \"Não foi possível carregar a lista de clientes\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const filteredClients = clients.filter(client => \n    client.nome.toLowerCase().includes(searchQuery.toLowerCase()) || \n    (client.nomeEmpresa && client.nomeEmpresa.toLowerCase().includes(searchQuery.toLowerCase())) ||\n    client.email.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleCreateClient = async () => {\n    if (!newClientData.nome.trim()) {\n      toast({\n        title: \"Erro de validação\",\n        description: \"O nome é obrigatório\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      setIsCreating(true);\n      const response = await criarCliente(newClientData);\n      \n      // Adicionar o novo cliente à lista\n      setClients(prev => [response.cliente || response, ...prev]);\n      \n      toast({\n        title: \"Cliente criado com sucesso!\",\n        description: `${newClientData.nome} foi adicionado aos seus contatos.`,\n      });\n      \n      // Limpar formulário e fechar dialog\n      setNewClientData({\n        nome: '',\n        email: '',\n        telefone: '',\n        nomeEmpresa: '', // Atualizado\n        cargo: '',\n        endereco: '',\n        observacoes: '',\n        status: 'ATIVO',\n        fonte: '',\n        tags: []\n      });\n      setClientDialogOpen(false);\n    } catch (error) {\n      console.error('Erro ao criar cliente:', error);\n      \n      let errorMessage = 'Erro interno do servidor';\n      if (error instanceof ApiError) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Erro ao criar cliente\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Clientes</h1>\n            <p className=\"text-muted-foreground\">Carregando clientes...</p>\n          </div>\n        </div>\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"space-y-2\">\n              <h3 className=\"font-medium\">Carregando...</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Buscando seus clientes no servidor.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Clientes</h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie seus contatos e acompanhe interações.\n          </p>\n        </div>\n        <Button onClick={() => setClientDialogOpen(true)}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Novo Cliente\n        </Button>\n      </div>\n      \n      <Card>\n        <CardHeader className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4 justify-between\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Buscar clientes...\"\n                className=\"pl-9 w-full md:w-[300px]\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                Filtros\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                Exportar\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nome / Empresa</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Telefone</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Data de Registro</TableHead>\n                  <TableHead>Tags</TableHead>\n                  <TableHead className=\"text-right\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredClients.map((client) => (\n                  <TableRow key={client.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{client.nome}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {client.nomeEmpresa}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>{client.email}</TableCell>\n                    <TableCell>{client.telefone}</TableCell>\n                    <TableCell>\n                      <Badge variant={client.status === 'ATIVO' ? 'default' : 'secondary'}>\n                        {client.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {client.criadoEm ? format(new Date(client.criadoEm), \"dd/MM/yyyy\", { locale: ptBR }) : 'N/A'}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {client.tags?.map((tag) => (\n                          <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <Phone className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <Mail className=\"h-4 w-4\" />\n                        </Button>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuLabel>Opções</DropdownMenuLabel>\n                            <DropdownMenuSeparator />\n                            <DropdownMenuItem>\n                              <PenLine className=\"mr-2 h-4 w-4\" /> Editar\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <ClipboardList className=\"mr-2 h-4 w-4\" /> Ver Histórico\n                            </DropdownMenuItem>\n                            <DropdownMenuItem className=\"text-destructive\">\n                              <Trash2 className=\"mr-2 h-4 w-4\" /> Excluir\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          \n          {filteredClients.length === 0 && (\n            <div className=\"p-8 text-center\">\n              <div className=\"space-y-2\">\n                <h3 className=\"font-medium\">Nenhum cliente encontrado</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {clients.length === 0 \n                    ? \"Crie seu primeiro cliente clicando no botão 'Novo Cliente'.\"\n                    : \"Nenhum cliente corresponde aos critérios de busca.\"\n                  }\n                </p>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* New Client Dialog */}\n      <Dialog open={clientDialogOpen} onOpenChange={setClientDialogOpen}>\n        <DialogContent className=\"sm:max-w-[550px]\">\n          <DialogHeader>\n            <DialogTitle>Novo Cliente</DialogTitle>\n            <DialogDescription>\n              Preencha os dados do novo cliente. Clique em salvar quando terminar.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nome\">Nome *</Label>\n                <Input \n                  id=\"nome\" \n                  placeholder=\"Nome completo\" \n                  value={newClientData.nome}\n                  onChange={(e) => setNewClientData(prev => ({ ...prev, nome: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nomeEmpresa\">Empresa</Label>\n                <Input \n                  id=\"nomeEmpresa\" \n                  placeholder=\"Nome da empresa\" \n                  value={newClientData.nomeEmpresa}\n                  onChange={(e) => setNewClientData(prev => ({ ...prev, nomeEmpresa: e.target.value }))}\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input \n                  id=\"email\" \n                  type=\"email\" \n                  placeholder=\"email@exemplo.com\" \n                  value={newClientData.email}\n                  onChange={(e) => setNewClientData(prev => ({ ...prev, email: e.target.value }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"telefone\">Telefone</Label>\n                <Input \n                  id=\"telefone\" \n                  placeholder=\"(99) 99999-9999\" \n                  value={newClientData.telefone}\n                  onChange={(e) => setNewClientData(prev => ({ ...prev, telefone: e.target.value }))}\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"cargo\">Cargo</Label>\n              <Input \n                id=\"cargo\" \n                placeholder=\"Cargo na empresa\" \n                value={newClientData.cargo}\n                onChange={(e) => setNewClientData(prev => ({ ...prev, cargo: e.target.value }))}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"observacoes\">Observações</Label>\n              <Textarea \n                id=\"observacoes\"\n                placeholder=\"Informações adicionais sobre o cliente...\"\n                rows={3}\n                value={newClientData.observacoes}\n                onChange={(e) => setNewClientData(prev => ({ ...prev, observacoes: e.target.value }))}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setClientDialogOpen(false)}>\n              Cancelar\n            </Button>\n            <Button onClick={handleCreateClient} disabled={isCreating}>\n              {isCreating ? \"Salvando...\" : \"Salvar Cliente\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13964},"src/pages/Dashboard.tsx":{"content":"\nimport React from 'react';\nimport { BadgeDollarSign, Users, CalendarClock, FileText, ClipboardCheck } from 'lucide-react';\nimport { StatsCard } from '@/components/dashboard/StatsCard';\nimport { SalesChart } from '@/components/dashboard/SalesChart';\nimport { ConversionChart } from '@/components/dashboard/ConversionChart';\nimport { SegmentChart } from '@/components/dashboard/SegmentChart';\nimport { RecentActivities } from '@/components/dashboard/RecentActivities';\nimport { UpcomingTasks } from '@/components/dashboard/UpcomingTasks';\n\nexport function Dashboard() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Bem-vindo ao seu painel de controle, veja o desempenho do seu negócio.\n        </p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatsCard\n          title=\"Total de Vendas\"\n          value=\"R$ 542.000\"\n          description=\"Este ano\"\n          trend=\"up\"\n          trendValue=\"12%\"\n          icon={BadgeDollarSign}\n          iconClassName=\"bg-primary/10 text-primary\"\n        />\n        <StatsCard\n          title=\"Clientes\"\n          value=\"156\"\n          description=\"25 novos este mês\"\n          trend=\"up\"\n          trendValue=\"8%\"\n          icon={Users}\n          iconClassName=\"bg-blue-500/10 text-blue-500\"\n        />\n        <StatsCard\n          title=\"Tarefas\"\n          value=\"24\"\n          description=\"7 para hoje\"\n          icon={ClipboardCheck}\n          iconClassName=\"bg-amber-500/10 text-amber-500\"\n        />\n        <StatsCard\n          title=\"Propostas\"\n          value=\"18\"\n          description=\"10 pendentes\"\n          trend=\"down\"\n          trendValue=\"3%\"\n          icon={FileText}\n          iconClassName=\"bg-emerald-500/10 text-emerald-500\"\n        />\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        <SalesChart />\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        <ConversionChart />\n        <SegmentChart />\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        <RecentActivities />\n        <UpcomingTasks />\n      </div>\n    </div>\n  );\n}\n","size_bytes":2304},"src/pages/Home.tsx":{"content":"\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  BarChart3, \n  Users, \n  MessageSquare, \n  Zap, \n  Shield, \n  TrendingUp,\n  CheckCircle,\n  ArrowRight,\n  Star\n} from 'lucide-react';\nimport { Navbar } from '@/components/layout/Navbar';\nimport { Footer } from '@/components/layout/Footer';\n\nexport const Home: React.FC = () => {\n  const features = [\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      title: \"Gestão de Contatos\",\n      description: \"Organize e gerencie todos os seus contatos em um só lugar\"\n    },\n    {\n      icon: <BarChart3 className=\"w-6 h-6\" />,\n      title: \"Pipeline de Vendas\",\n      description: \"Visualize e acompanhe suas oportunidades através do funil\"\n    },\n    {\n      icon: <MessageSquare className=\"w-6 h-6\" />,\n      title: \"Integração WhatsApp\",\n      description: \"Conecte com WhatsApp, Facebook e Instagram\"\n    },\n    {\n      icon: <Zap className=\"w-6 h-6\" />,\n      title: \"Automações\",\n      description: \"Automatize tarefas repetitivas e ganhe produtividade\"\n    },\n    {\n      icon: <Shield className=\"w-6 h-6\" />,\n      title: \"Segurança\",\n      description: \"Seus dados protegidos com a mais alta segurança\"\n    },\n    {\n      icon: <TrendingUp className=\"w-6 h-6\" />,\n      title: \"Relatórios\",\n      description: \"Insights e análises para otimizar suas vendas\"\n    }\n  ];\n\n  const testimonials = [\n    {\n      name: \"João Silva\",\n      company: \"TechCorp\",\n      content: \"O VisionCRM revolucionou nossa gestão de vendas. Aumentamos 40% nossa conversão!\",\n      rating: 5\n    },\n    {\n      name: \"Maria Santos\",\n      company: \"Digital Solutions\",\n      content: \"Interface intuitiva e recursos poderosos. Recomendo para qualquer empresa.\",\n      rating: 5\n    },\n    {\n      name: \"Pedro Oliveira\",\n      company: \"StartupX\",\n      content: \"Finalmente um CRM que funciona de verdade. Equipe mais produtiva!\",\n      rating: 5\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-b from-primary/10 to-background\">\n        <div className=\"absolute inset-0 bg-grid-pattern opacity-5\" />\n        <div className=\"relative container mx-auto px-4 py-20 text-center\">\n          <Badge variant=\"secondary\" className=\"mb-4\">\n            🚀 Novo: Automação SDR via WhatsApp\n          </Badge>\n          <h1 className=\"text-4xl md:text-6xl font-bold tracking-tight mb-6\">\n            O CRM que <span className=\"text-primary\">Impulsiona</span> suas Vendas\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Gerencie contatos, automatize processos e aumente suas vendas com nossa plataforma completa de CRM.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" asChild className=\"text-lg px-8\">\n              <Link to=\"/register\">\n                Começar Agora\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Link>\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" asChild className=\"text-lg px-8\">\n              <Link to=\"/plans\">Ver Planos</Link>\n            </Button>\n          </div>\n          <div className=\"mt-8 text-sm text-muted-foreground\">\n            ✨ Teste grátis por 7 dias • Sem cartão de crédito\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-muted/20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              Recursos que Fazem a Diferença\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Todas as ferramentas que você precisa para gerenciar e crescer seu negócio.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"text-center hover:shadow-lg transition-all duration-300 border-0 bg-background\">\n                <CardHeader>\n                  <div className=\"mx-auto w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center text-primary mb-4\">\n                    {feature.icon}\n                  </div>\n                  <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid md:grid-cols-4 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">10k+</div>\n              <div className=\"text-muted-foreground\">Empresas Confiam</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">40%</div>\n              <div className=\"text-muted-foreground\">Aumento em Vendas</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">24/7</div>\n              <div className=\"text-muted-foreground\">Suporte Técnico</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">99.9%</div>\n              <div className=\"text-muted-foreground\">Uptime</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-muted/20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              O que Nossos Clientes Dizem\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Histórias reais de sucesso com o VisionCRM\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"bg-background border-0 hover:shadow-lg transition-all duration-300\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex mb-4\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"w-5 h-5 fill-yellow-400 text-yellow-400\" />\n                    ))}\n                  </div>\n                  <p className=\"text-muted-foreground mb-4 italic\">\n                    \"{testimonial.content}\"\n                  </p>\n                  <div>\n                    <div className=\"font-semibold\">{testimonial.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">{testimonial.company}</div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-primary text-primary-foreground\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Pronto para Transformar suas Vendas?\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Junte-se a milhares de empresas que já escolheram o VisionCRM\n          </p>\n          <Button size=\"lg\" variant=\"secondary\" asChild className=\"text-lg px-8\">\n            <Link to=\"/register\">\n              Começar Teste Grátis\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Link>\n          </Button>\n          <div className=\"mt-4 text-sm opacity-75\">\n            ✨ 14 dias grátis • Cancele quando quiser\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n};\n","size_bytes":8261},"src/pages/Integrations.tsx":{"content":"\n/**\n * Página de Integrações e Webhooks\n * Gerencia as configurações de integração com plataformas externas\n */\nimport React from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { WebhookSettings } from '@/components/integrations/WebhookSettings';\nimport { ChatIntegrations } from '@/components/integrations/ChatIntegrations';\nimport { Webhook, MessageCircle } from 'lucide-react';\n\n/**\n * Componente principal da página de integrações\n * Centraliza a configuração de webhooks e integrações de chat\n */\nexport function Integrations() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Integrações</h1>\n        <p className=\"text-muted-foreground\">\n          Configure integrações com plataformas externas como Zapier, Make.com e sistemas de chat.\n        </p>\n      </div>\n      \n      <Tabs defaultValue=\"webhooks\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"webhooks\" className=\"flex items-center space-x-2\">\n            <Webhook className=\"h-4 w-4\" />\n            <span>Webhooks</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"chat\" className=\"flex items-center space-x-2\">\n            <MessageCircle className=\"h-4 w-4\" />\n            <span>Chat</span>\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"webhooks\">\n          <WebhookSettings />\n        </TabsContent>\n        \n        <TabsContent value=\"chat\">\n          <ChatIntegrations />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":1643},"src/pages/Login.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Eye, EyeOff, ArrowLeft } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { login, ApiError } from '@/services/api';\n\nexport const Login: React.FC = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    email: '',\n    senha: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // Login demo - credenciais aceitas\n    const isDemo = (formData.email === 'demo@crm.com' && formData.senha === 'demo123') ||\n                   (formData.email === 'admin@crm.com' && formData.senha === 'admin123');\n\n    try {\n      if (isDemo) {\n        // Simular delay de login\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Salvar dados demo no localStorage\n        const demoUser = {\n          id: 1,\n          nome: formData.email === 'admin@crm.com' ? 'Admin Demo' : 'Usuario Demo',\n          email: formData.email,\n          empresaId: 1,\n          token: 'demo-token-' + Date.now()\n        };\n        \n        localStorage.setItem('crm-user', JSON.stringify(demoUser));\n        localStorage.setItem('crm-token', demoUser.token);\n        \n        toast({\n          title: \"Login demo realizado com sucesso!\",\n          description: `Bem-vindo, ${demoUser.nome}!`,\n        });\n        \n        navigate('/dashboard');\n      } else {\n        // Tentar login real\n        const response = await login(formData);\n        \n        toast({\n          title: \"Login realizado com sucesso!\",\n          description: `Bem-vindo, ${response.usuario?.nome || 'usuário'}!`,\n        });\n        \n        navigate('/dashboard');\n      }\n    } catch (error) {\n      console.error('Erro no login:', error);\n      \n      let errorMessage = 'Erro interno do servidor';\n      \n      if (error instanceof ApiError) {\n        if (error.status === 401) {\n          errorMessage = 'Email ou senha incorretos';\n        } else if (error.status === 403) {\n          errorMessage = 'Conta inativa ou assinatura vencida';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      toast({\n        title: \"Erro no login\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const fillDemoCredentials = (email: string, password: string) => {\n    setFormData({\n      email: email,\n      senha: password\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 to-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <Button variant=\"ghost\" size=\"sm\" asChild>\n              <Link to=\"/\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Voltar\n              </Link>\n            </Button>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Entrar no VisionCRM\n          </CardTitle>\n          <p className=\"text-center text-muted-foreground\">\n            Acesse sua conta para continuar\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"senha\">Senha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"senha\"\n                  name=\"senha\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Digite sua senha\"\n                  value={formData.senha}\n                  onChange={handleChange}\n                  required\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between text-sm\">\n              <Link \n                to=\"/register\" \n                className=\"text-primary hover:underline\"\n              >\n                Não tem conta? Registre-se\n              </Link>\n              <Link \n                to=\"/forgot-password\" \n                className=\"text-muted-foreground hover:underline\"\n              >\n                Esqueceu a senha?\n              </Link>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? \"Entrando...\" : \"Entrar\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center space-y-3\">\n            <div className=\"text-sm text-muted-foreground\">\n              <strong>Acesso Demo - Clique para preencher:</strong>\n            </div>\n            <div className=\"space-y-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full text-xs\"\n                onClick={() => fillDemoCredentials('demo@crm.com', 'demo123')}\n                data-testid=\"button-demo-user\"\n              >\n                📧 demo@crm.com | 🔑 demo123\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full text-xs\"\n                onClick={() => fillDemoCredentials('admin@crm.com', 'admin123')}\n                data-testid=\"button-admin-user\"\n              >\n                📧 admin@crm.com | 🔑 admin123\n              </Button>\n            </div>\n            <Link \n              to=\"/plans\" \n              className=\"inline-block text-sm text-muted-foreground hover:underline mt-4\"\n            >\n              Ver planos disponíveis\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","size_bytes":7293},"src/pages/NotFound.tsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-center\">Página não encontrada</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <p className=\"text-muted-foreground\">\n            A página que você está procurando não existe.\n          </p>\n          <Button asChild>\n            <Link to=\"/\">Voltar ao início</Link>\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":826},"src/pages/Plans.tsx":{"content":"\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Check, \n  ArrowLeft, \n  Crown,\n  Zap,\n  Rocket\n} from 'lucide-react';\nimport { Navbar } from '@/components/layout/Navbar';\nimport { Footer } from '@/components/layout/Footer';\n\nexport const Plans: React.FC = () => {\n  const plans = [\n    {\n      id: 'inicial',\n      name: 'Inicial',\n      price: 'R$ 297',\n      period: '/mês',\n      description: 'Perfeito para pequenas empresas que estão começando',\n      icon: <Zap className=\"w-6 h-6\" />,\n      popular: false,\n      features: [\n        'Gestão de contatos',\n        'Pipeline de vendas',\n        'Suporte por e-mail',\n        'Atalho WhatsApp Web',\n        'Até 1.000 contatos',\n        'Relatórios básicos'\n      ]\n    },\n    {\n      id: 'business',\n      name: 'Business',\n      price: 'R$ 497',\n      period: '/mês',\n      description: 'Ideal para empresas em crescimento',\n      icon: <Crown className=\"w-6 h-6\" />,\n      popular: true,\n      features: [\n        'Gestão completa de vendas',\n        'Automações básicas',\n        'Integração com WhatsApp, Facebook, Instagram',\n        'Até 10.000 contatos',\n        'Relatórios avançados',\n        'Suporte prioritário',\n        'API de integração',\n        'Campos personalizados'\n      ]\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise',\n      price: 'R$ 897',\n      period: '/mês',\n      description: 'Para empresas que precisam do máximo de performance',\n      icon: <Rocket className=\"w-6 h-6\" />,\n      popular: false,\n      features: [\n        'Automatização SDR via WhatsApp',\n        'Integrações personalizadas',\n        'BI e análise de dados',\n        'Contatos ilimitados',\n        'Suporte dedicado 24/7',\n        'Treinamento personalizado',\n        'Webhooks avançados',\n        'Multi-empresa',\n        'White-label disponível'\n      ]\n    }\n  ];\n\n  const handleSelectPlan = (planId: string) => {\n    // TODO: integrar com Stripe Checkout (plano Inicial, Business ou Enterprise)\n    console.log(`Plano selecionado: ${planId}`);\n    alert(`Redirecionamento para checkout do plano ${planId} (integração com Stripe em desenvolvimento)`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-20\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n            Escolha o Plano Ideal para seu Negócio\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Acelere suas vendas com as ferramentas certas. Todos os planos incluem teste grátis de 14 dias.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {plans.map((plan) => (\n            <Card \n              key={plan.id} \n              className={`relative ${plan.popular ? 'border-primary shadow-lg scale-105' : ''}`}\n            >\n              {plan.popular && (\n                <Badge \n                  className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-primary\"\n                >\n                  Mais Popular\n                </Badge>\n              )}\n              \n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center text-primary mb-4\">\n                  {plan.icon}\n                </div>\n                <CardTitle className=\"text-2xl\">{plan.name}</CardTitle>\n                <div className=\"text-3xl font-bold\">\n                  {plan.price}<span className=\"text-lg font-normal text-muted-foreground\">{plan.period}</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{plan.description}</p>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <ul className=\"space-y-3\">\n                  {plan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-center gap-3\">\n                      <Check className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Button \n                  className=\"w-full mt-6\"\n                  variant={plan.popular ? \"default\" : \"outline\"}\n                  onClick={() => handleSelectPlan(plan.id)}\n                >\n                  Começar Agora\n                </Button>\n                \n                <p className=\"text-xs text-center text-muted-foreground\">\n                  ✨ 14 dias grátis • Cancele quando quiser\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-16 text-center\">\n          <h3 className=\"text-2xl font-bold mb-4\">Dúvidas sobre os Planos?</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            Nossa equipe está pronta para ajudar você a escolher o melhor plano\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button variant=\"outline\" asChild>\n              <Link to=\"/contact\">Falar com Vendas</Link>\n            </Button>\n            <Button variant=\"outline\" asChild>\n              <Link to=\"/demo\">Agendar Demo</Link>\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"mt-16 bg-muted/20 rounded-lg p-8 text-center\">\n          <h3 className=\"text-xl font-bold mb-4\">💰 Garantia de 30 dias</h3>\n          <p className=\"text-muted-foreground\">\n            Não está satisfeito? Devolvemos 100% do seu dinheiro em até 30 dias, sem perguntas.\n          </p>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n","size_bytes":6022},"src/pages/Register.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Eye, EyeOff, ArrowLeft } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { register, ApiError } from '@/services/api';\n\nexport const Register: React.FC = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    nome: '',\n    email: '',\n    senha: '',\n    confirmarSenha: '',\n    empresaNome: '',\n    aceitarTermos: false\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // Validações\n    if (formData.senha !== formData.confirmarSenha) {\n      toast({\n        title: \"Erro de validação\",\n        description: \"As senhas não coincidem\",\n        variant: \"destructive\"\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (!formData.aceitarTermos) {\n      toast({\n        title: \"Erro de validação\",\n        description: \"Você deve aceitar os termos de uso\",\n        variant: \"destructive\"\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const registerData = {\n        nome: formData.nome,\n        email: formData.email,\n        senha: formData.senha,\n        empresaNome: formData.empresaNome || undefined\n      };\n\n      const response = await register(registerData);\n      \n      toast({\n        title: \"Conta criada com sucesso!\",\n        description: `Bem-vindo ao VisionCRM, ${response.usuario?.nome || 'usuário'}!`,\n      });\n      \n      // Redirecionar para o dashboard\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Erro no registro:', error);\n      \n      let errorMessage = 'Erro interno do servidor';\n      \n      if (error instanceof ApiError) {\n        if (error.status === 400) {\n          errorMessage = error.message || 'Dados inválidos';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      toast({\n        title: \"Erro no registro\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 to-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <Button variant=\"ghost\" size=\"sm\" asChild>\n              <Link to=\"/\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Voltar\n              </Link>\n            </Button>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Criar Conta no VisionCRM\n          </CardTitle>\n          <p className=\"text-center text-muted-foreground\">\n            Comece sua jornada de vendas hoje\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"nome\">Nome Completo</Label>\n              <Input\n                id=\"nome\"\n                name=\"nome\"\n                type=\"text\"\n                placeholder=\"Seu nome completo\"\n                value={formData.nome}\n                onChange={handleChange}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"empresaNome\">Nome da Empresa (Opcional)</Label>\n              <Input\n                id=\"empresaNome\"\n                name=\"empresaNome\"\n                type=\"text\"\n                placeholder=\"Nome da sua empresa\"\n                value={formData.empresaNome}\n                onChange={handleChange}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"senha\">Senha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"senha\"\n                  name=\"senha\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Crie uma senha segura\"\n                  value={formData.senha}\n                  onChange={handleChange}\n                  required\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmarSenha\">Confirmar Senha</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmarSenha\"\n                  name=\"confirmarSenha\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Confirme sua senha\"\n                  value={formData.confirmarSenha}\n                  onChange={handleChange}\n                  required\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"aceitarTermos\"\n                checked={formData.aceitarTermos}\n                onCheckedChange={(checked) => \n                  setFormData(prev => ({ ...prev, aceitarTermos: checked as boolean }))\n                }\n              />\n              <Label htmlFor=\"aceitarTermos\" className=\"text-sm\">\n                Aceito os{' '}\n                <Link to=\"/terms\" className=\"text-primary hover:underline\">\n                  termos de uso\n                </Link>{' '}\n                e{' '}\n                <Link to=\"/privacy\" className=\"text-primary hover:underline\">\n                  política de privacidade\n                </Link>\n              </Label>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? \"Criando conta...\" : \"Criar Conta\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Já tem uma conta?{' '}\n              <Link to=\"/login\" className=\"text-primary hover:underline\">\n                Faça login\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","size_bytes":8243},"src/pages/Reports.tsx":{"content":"\n/**\n * Página de Relatórios Avançados\n * Exibe métricas e análises diferentes da dashboard principal\n */\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ConversionRateChart } from '@/components/reports/ConversionRateChart';\nimport { MonthlyPerformanceChart } from '@/components/reports/MonthlyPerformanceChart';\nimport { ClientStatusChart } from '@/components/reports/ClientStatusChart';\nimport { MrrChart } from '@/components/reports/MrrChart';\n\n/**\n * Componente da página de Relatórios\n * Contém métricas avançadas e análises diferentes da dashboard\n */\nexport function Reports() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Relatórios Avançados</h1>\n        <p className=\"text-muted-foreground\">\n          Análises detalhadas de desempenho, vendas e clientes.\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n          <TabsTrigger value=\"sales\">Vendas</TabsTrigger>\n          <TabsTrigger value=\"clients\">Clientes</TabsTrigger>\n          <TabsTrigger value=\"financial\">Financeiro</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Taxa de Conversão Total\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">24.8%</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  +2.1% em relação ao mês passado\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Clientes Ativos\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">763</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  +18 novos este mês\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  MRR (Receita Mensal)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">R$ 248.500</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  +5.4% em relação ao mês passado\n                </p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  Ciclo de Vendas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">18 dias</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  -2 dias em relação à média anual\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-7\">\n            <Card className=\"lg:col-span-4\">\n              <CardHeader>\n                <CardTitle>Taxa de Conversão por Etapa</CardTitle>\n                <CardDescription>\n                  Comparativo de conversão entre as etapas do funil de vendas\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pl-2\">\n                <ConversionRateChart />\n              </CardContent>\n            </Card>\n            <Card className=\"lg:col-span-3\">\n              <CardHeader>\n                <CardTitle>MRR (Receita Recorrente Mensal)</CardTitle>\n                <CardDescription>\n                  Evolução da receita recorrente nos últimos 12 meses\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <MrrChart />\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"sales\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Comparativo de Desempenho Mensal</CardTitle>\n              <CardDescription>\n                Análise comparativa de vendas mês a mês\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pl-2\">\n              <MonthlyPerformanceChart />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"clients\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Análise de Clientes Ativos vs Inativos</CardTitle>\n              <CardDescription>\n                Distribuição e evolução da base de clientes\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ClientStatusChart />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"financial\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Receita Recorrente Detalhada</CardTitle>\n              <CardDescription>\n                Análise detalhada do MRR por plano e segmento\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <MrrChart detailed />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":6141},"src/pages/Sales.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { KanbanBoard } from '@/components/sales/KanbanBoard';\nimport { NewOpportunityDialog } from '@/components/sales/NewOpportunityDialog';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Target, TrendingUp, DollarSign } from 'lucide-react';\n\nexport const Sales = () => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const handleNewOpportunity = (data: any) => {\n    console.log('Nova oportunidade:', data);\n    setIsDialogOpen(false);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header Section with Stats */}\n      <div className=\"glass-card rounded-2xl p-6 sparkle-effect morphing-border\">\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold text-foreground flex items-center gap-3\">\n              <Target className=\"w-8 h-8 text-primary\" />\n              Pipeline de Vendas\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Gerencie suas oportunidades de vendas e acompanhe o progresso em tempo real\n            </p>\n          </div>\n          \n          {/* Quick Stats */}\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"glass-card rounded-lg p-4 interactive-element group\">\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5 text-green-500 group-hover:scale-110 transition-transform\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Pipeline</p>\n                  <p className=\"text-xl font-bold text-green-500\">R$ 45.000</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"glass-card rounded-lg p-4 interactive-element group\">\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5 text-blue-500 group-hover:scale-110 transition-transform\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Taxa Conversão</p>\n                  <p className=\"text-xl font-bold text-blue-500\">68%</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <Button \n            onClick={() => setIsDialogOpen(true)}\n            className=\"glass-button shine-effect interactive-element morphing-border\"\n            size=\"lg\"\n          >\n            <Plus className=\"h-5 w-5 mr-2\" />\n            Nova Oportunidade\n          </Button>\n        </div>\n      </div>\n\n      {/* Kanban Board */}\n      <div className=\"slide-up\">\n        <KanbanBoard />\n      </div>\n\n      <NewOpportunityDialog\n        open={isDialogOpen}\n        onOpenChange={setIsDialogOpen}\n        onSubmit={handleNewOpportunity}\n        clientes={[]}\n      />\n    </div>\n  );\n};\n","size_bytes":2912},"src/pages/Settings.tsx":{"content":"\n/**\n * Página de Configurações da Conta\n * Permite ao usuário gerenciar dados pessoais, perfis, senha e preferências\n */\nimport React, { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PersonalInfoForm } from '@/components/settings/PersonalInfoForm';\nimport { ProfileSettingsForm } from '@/components/settings/ProfileSettingsForm';\nimport { PasswordChangeForm } from '@/components/settings/PasswordChangeForm';\nimport { NotificationPreferences } from '@/components/settings/NotificationPreferences';\nimport { LanguageSettings } from '@/components/settings/LanguageSettings';\n\n/**\n * Componente principal da página de configurações\n * Organiza as diferentes seções de configuração em abas\n */\nexport function Settings() {\n  const [activeTab, setActiveTab] = useState(\"personal\");\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Configurações da Conta</h1>\n        <p className=\"text-muted-foreground\">\n          Gerencie suas informações pessoais, preferências e configurações de segurança.\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"personal\" value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"personal\">Dados Pessoais</TabsTrigger>\n          <TabsTrigger value=\"profiles\">Perfis</TabsTrigger>\n          <TabsTrigger value=\"security\">Segurança</TabsTrigger>\n          <TabsTrigger value=\"preferences\">Preferências</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"personal\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Informações Pessoais</CardTitle>\n              <CardDescription>\n                Atualize seus dados pessoais e informações de contato.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <PersonalInfoForm />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"profiles\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Gerenciar Perfis</CardTitle>\n              <CardDescription>\n                Configure os perfis disponíveis na sua conta.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ProfileSettingsForm />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Segurança da Conta</CardTitle>\n              <CardDescription>\n                Altere sua senha e configure as opções de segurança.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PasswordChangeForm />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"preferences\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Notificações</CardTitle>\n                <CardDescription>\n                  Configure suas preferências de notificação.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <NotificationPreferences />\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Idioma</CardTitle>\n                <CardDescription>\n                  Defina o idioma padrão da interface.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <LanguageSettings />\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":3928},"src/pages/Subscription.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { CheckCircle, Users, CreditCard, CalendarClock } from \"lucide-react\";\n\nexport function Subscription() {\n  const [userCount, setUserCount] = useState(1);\n  const basePrice = 287;\n  const additionalUserPrice = 64.90;\n  const totalPrice = basePrice + (additionalUserPrice * (userCount - 1));\n  \n  const nextPaymentDate = new Date();\n  nextPaymentDate.setDate(nextPaymentDate.getDate() + 15); // Just an example date\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n    }).format(value);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Assinatura</h1>\n        <p className=\"text-muted-foreground\">\n          Gerencie sua assinatura e usuários do VisionCRM.\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"subscription\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"subscription\">Assinatura</TabsTrigger>\n          <TabsTrigger value=\"users\">Usuários</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"subscription\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card className=\"col-span-2\">\n              <CardHeader>\n                <CardTitle>Detalhes da Assinatura</CardTitle>\n                <CardDescription>\n                  Informações sobre seu plano atual\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <p className=\"text-lg font-medium\">Plano Premium</p>\n                    <p className=\"text-muted-foreground\">Recursos completos</p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-primary/10 text-primary\">\n                    Ativo\n                  </Badge>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <p className=\"text-muted-foreground\">Plano base (1 usuário)</p>\n                    <p>{formatCurrency(basePrice)}</p>\n                  </div>\n                  \n                  {userCount > 1 && (\n                    <div className=\"flex justify-between\">\n                      <p className=\"text-muted-foreground\">\n                        Usuários adicionais ({userCount - 1} x {formatCurrency(additionalUserPrice)})\n                      </p>\n                      <p>{formatCurrency(additionalUserPrice * (userCount - 1))}</p>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex justify-between pt-2 border-t\">\n                    <p className=\"font-medium\">Total mensal</p>\n                    <p className=\"font-bold text-lg\">{formatCurrency(totalPrice)}</p>\n                  </div>\n                </div>\n                \n                <div className=\"bg-muted p-4 rounded-md flex items-center\">\n                  <CalendarClock className=\"h-5 w-5 mr-3 text-muted-foreground\" />\n                  <div>\n                    <p className=\"font-medium\">Próxima cobrança</p>\n                    <p className=\"text-muted-foreground\">\n                      {nextPaymentDate.toLocaleDateString('pt-BR')}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter className=\"border-t pt-4\">\n                <Button variant=\"outline\">Gerenciar Forma de Pagamento</Button>\n              </CardFooter>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Resumo do Plano</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-emerald-500 mr-2 mt-0.5\" />\n                    <p>Clientes ilimitados</p>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-emerald-500 mr-2 mt-0.5\" />\n                    <p>Funil de vendas</p>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-emerald-500 mr-2 mt-0.5\" />\n                    <p>Histórico de interações</p>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-emerald-500 mr-2 mt-0.5\" />\n                    <p>Agenda integrada</p>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-emerald-500 mr-2 mt-0.5\" />\n                    <p>Relatórios e dashboards</p>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-emerald-500 mr-2 mt-0.5\" />\n                    <p>Suporte prioritário</p>\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter className=\"border-t pt-4\">\n                <Button className=\"w-full\">Atualizar Plano</Button>\n              </CardFooter>\n            </Card>\n          </div>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Histórico de Pagamentos</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between border-b pb-2\">\n                  <div>\n                    <p className=\"font-medium\">Abril 2024</p>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Plano Premium - {userCount} usuário{userCount > 1 ? 's' : ''}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{formatCurrency(totalPrice)}</p>\n                    <p className=\"text-sm text-emerald-500\">Pago</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-between border-b pb-2\">\n                  <div>\n                    <p className=\"font-medium\">Março 2024</p>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Plano Premium - {userCount} usuário{userCount > 1 ? 's' : ''}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{formatCurrency(totalPrice)}</p>\n                    <p className=\"text-sm text-emerald-500\">Pago</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex justify-between items-center\">\n                <span>Gerenciar Usuários</span>\n                <Badge variant=\"outline\">{userCount} usuário{userCount > 1 ? 's' : ''}</Badge>\n              </CardTitle>\n              <CardDescription>\n                Adicione ou remova usuários da sua assinatura\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label>Quantidade de usuários</Label>\n                <div className=\"flex items-center\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"icon\"\n                    onClick={() => setUserCount(Math.max(1, userCount - 1))}\n                    disabled={userCount <= 1}\n                  >\n                    -\n                  </Button>\n                  <Input \n                    className=\"w-20 mx-2 text-center\" \n                    value={userCount} \n                    onChange={(e) => {\n                      const value = parseInt(e.target.value);\n                      if (!isNaN(value) && value >= 1) {\n                        setUserCount(value);\n                      }\n                    }}\n                    min=\"1\"\n                    type=\"number\"\n                  />\n                  <Button \n                    variant=\"outline\" \n                    size=\"icon\"\n                    onClick={() => setUserCount(userCount + 1)}\n                  >\n                    +\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"bg-muted p-4 rounded-md\">\n                <div className=\"flex items-start\">\n                  <Users className=\"h-5 w-5 mr-3 mt-1 text-muted-foreground\" />\n                  <div>\n                    <p className=\"font-medium\">Impacto no valor</p>\n                    <p className=\"text-muted-foreground\">\n                      Plano base: {formatCurrency(basePrice)} + {userCount - 1} usuário(s) adicional(is): {formatCurrency(additionalUserPrice * (userCount - 1))}\n                    </p>\n                    <p className=\"font-bold mt-1\">\n                      Novo total mensal: {formatCurrency(totalPrice)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between border-b pb-2\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 rounded-full bg-primary flex items-center justify-center text-white\">\n                      A\n                    </div>\n                    <div className=\"ml-3\">\n                      <p className=\"font-medium\">Admin User</p>\n                      <p className=\"text-xs text-muted-foreground\">admin@company.com</p>\n                    </div>\n                  </div>\n                  <Badge>Admin</Badge>\n                </div>\n                \n                {userCount > 1 && Array.from({ length: userCount - 1 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center justify-between border-b pb-2\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-muted flex items-center justify-center\">\n                        {String.fromCharCode(66 + i)}\n                      </div>\n                      <div className=\"ml-3\">\n                        <p className=\"font-medium\">Usuário {i + 2}</p>\n                        <p className=\"text-xs text-muted-foreground\">user{i + 2}@company.com</p>\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\">Vendedor</Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex justify-between border-t pt-4\">\n              <Button variant=\"outline\">Cancelar</Button>\n              <Button>Salvar Alterações</Button>\n            </CardFooter>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Informações de Cobrança</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center\">\n                <CreditCard className=\"h-5 w-5 mr-3 text-muted-foreground\" />\n                <div>\n                  <p className=\"font-medium\">Mastercard **** 4321</p>\n                  <p className=\"text-muted-foreground text-sm\">Expira em 05/2025</p>\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\">Atualizar Forma de Pagamento</Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default Subscription;\n","size_bytes":12388},"src/pages/Tasks.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Calendar, User, Filter, CheckCircle, Clock, AlertCircle, XCircle } from 'lucide-react';\nimport { buscarTarefas, atualizarTarefa, excluirTarefa } from '@/services/api';\nimport { useToast } from '@/hooks/use-toast';\nimport { NewTaskDialog } from '@/components/tasks/NewTaskDialog';\n\ninterface Tarefa {\n  id: string;\n  titulo: string;\n  descricao?: string;\n  status: 'PENDENTE' | 'EM_ANDAMENTO' | 'CONCLUIDA' | 'CANCELADA';\n  prioridade: 'BAIXA' | 'MEDIA' | 'ALTA' | 'URGENTE';\n  dataVencimento: string;\n  clienteId?: string;\n  oportunidadeId?: string;\n  usuarioResponsavel?: string;\n  criadoEm: string;\n  atualizadoEm: string;\n}\n\nconst Tasks = () => {\n  const [tarefas, setTarefas] = useState<Tarefa[]>([]);\n  const [filtro, setFiltro] = useState<string>('TODAS');\n  const [dialogAberto, setDialogAberto] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    carregarTarefas();\n  }, []);\n\n  const carregarTarefas = async () => {\n    try {\n      setLoading(true);\n      const response = await buscarTarefas();\n      setTarefas(response.tarefas || []);\n    } catch (error) {\n      console.error('Erro ao carregar tarefas:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar tarefas\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const atualizarStatusTarefa = async (id: string, novoStatus: 'PENDENTE' | 'EM_ANDAMENTO' | 'CONCLUIDA' | 'CANCELADA') => {\n    try {\n      await atualizarTarefa(id, { status: novoStatus });\n      setTarefas(tarefas.map(tarefa => \n        tarefa.id === id ? { ...tarefa, status: novoStatus } : tarefa\n      ));\n      toast({\n        title: \"Sucesso\",\n        description: \"Status da tarefa atualizado\",\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar tarefa:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar tarefa\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const excluirTarefaHandler = async (id: string) => {\n    if (confirm('Tem certeza que deseja excluir esta tarefa?')) {\n      try {\n        await excluirTarefa(id);\n        setTarefas(tarefas.filter(tarefa => tarefa.id !== id));\n        toast({\n          title: \"Sucesso\",\n          description: \"Tarefa excluída com sucesso\",\n        });\n      } catch (error) {\n        console.error('Erro ao excluir tarefa:', error);\n        toast({\n          title: \"Erro\",\n          description: \"Erro ao excluir tarefa\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const tarefasFiltradas = tarefas.filter(tarefa => {\n    if (filtro === 'TODAS') return true;\n    return tarefa.status === filtro;\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'PENDENTE':\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      case 'EM_ANDAMENTO':\n        return <AlertCircle className=\"w-4 h-4 text-blue-500\" />;\n      case 'CONCLUIDA':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'CANCELADA':\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getPrioridadeColor = (prioridade: string) => {\n    switch (prioridade) {\n      case 'URGENTE':\n        return 'bg-red-500';\n      case 'ALTA':\n        return 'bg-orange-500';\n      case 'MEDIA':\n        return 'bg-yellow-500';\n      case 'BAIXA':\n        return 'bg-green-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const handleNovaTask = () => {\n    carregarTarefas();\n    setDialogAberto(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Carregando tarefas...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Tarefas</h1>\n        <Button onClick={() => setDialogAberto(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Nova Tarefa\n        </Button>\n      </div>\n\n      <div className=\"flex gap-2\">\n        {['TODAS', 'PENDENTE', 'EM_ANDAMENTO', 'CONCLUIDA', 'CANCELADA'].map((status) => (\n          <Button\n            key={status}\n            variant={filtro === status ? 'default' : 'outline'}\n            onClick={() => setFiltro(status)}\n            size=\"sm\"\n          >\n            {status === 'TODAS' ? 'Todas' : status.replace('_', ' ')}\n          </Button>\n        ))}\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {tarefasFiltradas.map((tarefa) => (\n          <Card key={tarefa.id} className=\"glass-card\">\n            <CardHeader className=\"pb-2\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-base\">{tarefa.titulo}</CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  {getStatusIcon(tarefa.status)}\n                  <Badge className={`${getPrioridadeColor(tarefa.prioridade)} text-white`}>\n                    {tarefa.prioridade}\n                  </Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {tarefa.descricao && (\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  {tarefa.descricao}\n                </p>\n              )}\n              \n              <div className=\"space-y-2\">\n                {tarefa.dataVencimento && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span>{new Date(tarefa.dataVencimento).toLocaleDateString('pt-BR')}</span>\n                  </div>\n                )}\n                \n                {tarefa.usuarioResponsavel && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <User className=\"w-4 h-4\" />\n                    <span>{tarefa.usuarioResponsavel}</span>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"flex gap-2 mt-4\">\n                {tarefa.status !== 'CONCLUIDA' && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => atualizarStatusTarefa(tarefa.id, 'CONCLUIDA')}\n                  >\n                    Concluir\n                  </Button>\n                )}\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={() => excluirTarefaHandler(tarefa.id)}\n                >\n                  Excluir\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <NewTaskDialog\n        open={dialogAberto}\n        onOpenChange={setDialogAberto}\n        onTaskCreated={handleNovaTask}\n      />\n    </div>\n  );\n};\n\nexport default Tasks;\n","size_bytes":7436},"src/services/api.ts":{"content":"/**\n * Serviço de API para interação com o backend\n * Detecta automaticamente o ambiente (localhost, Replit, VPS)\n */\n\nimport { detectBrowserEnvironment, logEnvironmentConfig } from '@shared/environment';\n\n// Configuração automática do ambiente\nconst environmentConfig = detectBrowserEnvironment();\nconst API_BASE_URL = environmentConfig.apiBaseUrl!;\n\n// Log da configuração para debug\nif (import.meta.env.DEV) {\n  logEnvironmentConfig(environmentConfig, 'frontend');\n}\n\n/**\n * Classe para lidar com erros da API\n */\nclass ApiError extends Error {\n  status: number;\n  \n  constructor(message: string, status: number) {\n    super(message);\n    this.status = status;\n    this.name = 'ApiError';\n  }\n}\n\n/**\n * Função helper para fazer requisições HTTP\n */\nasync function apiRequest(endpoint: string, options: RequestInit = {}) {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const config: RequestInit = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  };\n\n  // Adicionar token de autenticação se disponível\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers = {\n      ...config.headers,\n      'Authorization': `Bearer ${token}`,\n    };\n  }\n\n  try {\n    const response = await fetch(url, config);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new ApiError(\n        errorData.erro || `HTTP ${response.status}: ${response.statusText}`,\n        response.status\n      );\n    }\n    \n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    }\n    \n    return response;\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n    throw new ApiError(`Erro de conexão: ${error}`, 0);\n  }\n}\n\n// ==================== AUTENTICAÇÃO ====================\n\nexport interface LoginCredentials {\n  email: string;\n  senha: string;\n}\n\nexport interface RegisterData {\n  nome: string;\n  email: string;\n  senha: string;\n  empresaNome?: string;\n}\n\nexport async function login(credentials: LoginCredentials) {\n  const response = await apiRequest('/auth/login', {\n    method: 'POST',\n    body: JSON.stringify(credentials),\n  });\n  \n  if (response.token) {\n    localStorage.setItem('authToken', response.token);\n  }\n  \n  return response;\n}\n\nexport async function register(userData: RegisterData) {\n  const response = await apiRequest('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify(userData),\n  });\n  \n  if (response.token) {\n    localStorage.setItem('authToken', response.token);\n  }\n  \n  return response;\n}\n\nexport async function logout() {\n  try {\n    await apiRequest('/auth/logout', { method: 'POST' });\n  } catch (error) {\n    console.error('Erro ao fazer logout:', error);\n  } finally {\n    localStorage.removeItem('authToken');\n  }\n}\n\n// ==================== CLIENTES ====================\n\nexport interface Cliente {\n  id: string;\n  nome: string;\n  email: string;\n  telefone: string;\n  nomeEmpresa: string; // Atualizado para o novo nome do campo\n  cargo?: string;\n  endereco?: string;\n  observacoes?: string;\n  status: string;\n  fonte?: string;\n  tags: string[];\n  criadoEm: string;\n}\n\nexport async function buscarClientes(params: any = {}) {\n  const queryParams = new URLSearchParams(params).toString();\n  const endpoint = queryParams ? `/clientes?${queryParams}` : '/clientes';\n  return await apiRequest(endpoint);\n}\n\nexport async function buscarClientePorId(id: string) {\n  return await apiRequest(`/clientes/${id}`);\n}\n\nexport async function criarCliente(clienteData: Partial<Cliente>) {\n  return await apiRequest('/clientes', {\n    method: 'POST',\n    body: JSON.stringify(clienteData),\n  });\n}\n\nexport async function atualizarCliente(id: string, clienteData: Partial<Cliente>) {\n  return await apiRequest(`/clientes/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(clienteData),\n  });\n}\n\nexport async function excluirCliente(id: string) {\n  return await apiRequest(`/clientes/${id}`, {\n    method: 'DELETE',\n  });\n}\n\n// ==================== TAREFAS ====================\n\nexport interface Tarefa {\n  id: string;\n  titulo: string;\n  descricao?: string;\n  status: 'PENDENTE' | 'EM_ANDAMENTO' | 'CONCLUIDA' | 'CANCELADA';\n  prioridade: 'BAIXA' | 'MEDIA' | 'ALTA' | 'URGENTE';\n  dataVencimento: string;\n  clienteId?: string;\n  oportunidadeId?: string;\n  usuarioResponsavel?: string;\n  criadoEm: string;\n  atualizadoEm: string;\n}\n\nexport async function buscarTarefas(params: any = {}) {\n  const queryParams = new URLSearchParams(params).toString();\n  const endpoint = queryParams ? `/tarefas?${queryParams}` : '/tarefas';\n  return await apiRequest(endpoint);\n}\n\nexport async function criarTarefa(tarefaData: any) {\n  return await apiRequest('/tarefas', {\n    method: 'POST',\n    body: JSON.stringify(tarefaData),\n  });\n}\n\nexport async function atualizarTarefa(id: string, tarefaData: Partial<Tarefa>) {\n  return await apiRequest(`/tarefas/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(tarefaData),\n  });\n}\n\nexport async function excluirTarefa(id: string) {\n  return await apiRequest(`/tarefas/${id}`, {\n    method: 'DELETE',\n  });\n}\n\n// ==================== OPORTUNIDADES ====================\n\nexport interface Oportunidade {\n  id: string;\n  titulo: string;\n  descricao?: string;\n  valor: number;\n  status: string;\n  prioridade?: string;\n  probabilidade?: number;\n  dataPrevisao?: string;\n  clienteId: string;\n  usuarioId: string;\n  empresaId?: string;\n  createdAt: string;\n  cliente?: {\n    id: string;\n    nome: string;\n    email: string;\n    nomeEmpresa?: string;\n    empresa?: {\n      nome: string;\n    };\n  };\n  usuario?: {\n    id: string;\n    nome: string;\n  };\n}\n\nexport async function buscarOportunidades(params: any = {}) {\n  const queryParams = new URLSearchParams(params).toString();\n  const endpoint = queryParams ? `/oportunidades?${queryParams}` : '/oportunidades';\n  return await apiRequest(endpoint);\n}\n\nexport async function criarOportunidade(oportunidadeData: any) {\n  return await apiRequest('/oportunidades', {\n    method: 'POST',\n    body: JSON.stringify(oportunidadeData),\n  });\n}\n\nexport async function atualizarOportunidade(id: string, oportunidadeData: Partial<Oportunidade>) {\n  return await apiRequest(`/oportunidades/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(oportunidadeData),\n  });\n}\n\nexport async function excluirOportunidade(id: string) {\n  return await apiRequest(`/oportunidades/${id}`, {\n    method: 'DELETE',\n  });\n}\n\n// ==================== DASHBOARD ====================\n\nexport async function buscarEstatisticasDashboard() {\n  return await apiRequest('/dashboard/estatisticas');\n}\n\n// ==================== RELATÓRIOS ====================\n\nexport async function buscarRelatorios(tipo: string, params: any = {}) {\n  const queryParams = new URLSearchParams(params).toString();\n  const endpoint = queryParams ? `/relatorios/${tipo}?${queryParams}` : `/relatorios/${tipo}`;\n  return await apiRequest(endpoint);\n}\n\n// ==================== WEBHOOKS ====================\n\nexport interface ConfiguracaoWebhook {\n  id?: string;\n  nome: string;\n  url: string;\n  eventos: string[];\n  ativo: boolean;\n}\n\nexport async function buscarWebhooks() {\n  return await apiRequest('/webhooks');\n}\n\nexport async function criarWebhook(webhookData: ConfiguracaoWebhook) {\n  return await apiRequest('/webhooks', {\n    method: 'POST',\n    body: JSON.stringify(webhookData),\n  });\n}\n\nexport async function atualizarWebhook(id: string, webhookData: Partial<ConfiguracaoWebhook>) {\n  return await apiRequest(`/webhooks/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(webhookData),\n  });\n}\n\nexport async function excluirWebhook(id: string) {\n  return await apiRequest(`/webhooks/${id}`, {\n    method: 'DELETE',\n  });\n}\n\n// ==================== CONFIGURAÇÕES DE USUÁRIO ====================\n\nexport async function buscarDadosUsuario() {\n  return await apiRequest('/usuarios/perfil');\n}\n\nexport async function atualizarDadosUsuario(userData: any) {\n  return await apiRequest('/usuarios/perfil', {\n    method: 'PUT',\n    body: JSON.stringify(userData),\n  });\n}\n\nexport async function alterarSenha(senhaData: { senhaAtual: string; novaSenha: string }) {\n  return await apiRequest('/usuarios/alterar-senha', {\n    method: 'POST',\n    body: JSON.stringify(senhaData),\n  });\n}\n\n// ==================== CONFIGURAÇÕES - FUNÇÕES PLACEHOLDER ====================\n\nexport async function buscarPreferenciasNotificacao() {\n  try {\n    return await apiRequest('/usuarios/preferencias-notificacao');\n  } catch (error) {\n    console.log('Endpoint não implementado ainda, retornando dados padrão');\n    return {\n      novosLeads: true,\n      oportunidadesAtualizadas: true,\n      lembretesTarefas: true,\n      emailMarketing: false,\n      notificacoesPush: true\n    };\n  }\n}\n\nexport async function atualizarPreferenciasNotificacao(preferencias: any) {\n  try {\n    return await apiRequest('/usuarios/preferencias-notificacao', {\n      method: 'PUT',\n      body: JSON.stringify(preferencias),\n    });\n  } catch (error) {\n    console.log('Endpoint não implementado ainda');\n    return { success: true };\n  }\n}\n\nexport async function buscarIdioma() {\n  try {\n    return await apiRequest('/usuarios/idioma');\n  } catch (error) {\n    console.log('Endpoint não implementado ainda, retornando padrão');\n    return { codigo: 'pt-BR' };\n  }\n}\n\nexport async function atualizarIdioma(idioma: any) {\n  try {\n    return await apiRequest('/usuarios/idioma', {\n      method: 'PUT',\n      body: JSON.stringify(idioma),\n    });\n  } catch (error) {\n    console.log('Endpoint não implementado ainda');\n    return { success: true };\n  }\n}\n\nexport async function buscarPerfis() {\n  try {\n    return await apiRequest('/usuarios/perfis');\n  } catch (error) {\n    console.log('Endpoint não implementado ainda, retornando vazio');\n    return [];\n  }\n}\n\nexport async function atualizarPerfis(perfis: any) {\n  try {\n    return await apiRequest('/usuarios/perfis', {\n      method: 'PUT',\n      body: JSON.stringify(perfis),\n    });\n  } catch (error) {\n    console.log('Endpoint não implementado ainda');\n    return { success: true };\n  }\n}\n\nexport async function atualizarDadosPessoais(dados: any) {\n  try {\n    return await apiRequest('/usuarios/dados-pessoais', {\n      method: 'PUT',\n      body: JSON.stringify(dados),\n    });\n  } catch (error) {\n    console.log('Endpoint não implementado ainda');\n    return { success: true };\n  }\n}\n\n// Exportar ApiError para uso em componentes\nexport { ApiError };\n","size_bytes":10620},"backend/prisma/migrations/migration_lock.toml":{"content":"# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n","size_bytes":128},"backend/src/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport interface AuthenticatedRequest extends Request {\n  userId?: string;\n  user?: any;\n}\n\nexport const authMiddleware = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n\n    if (!token) {\n      return res.status(401).json({ message: 'Token de acesso requerido' });\n    }\n\n    const jwtSecret = process.env.JWT_SECRET || 'fallback-secret';\n    const decoded = jwt.verify(token, jwtSecret) as { userId: string };\n\n    // Buscar usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: decoded.userId },\n      select: { id: true, nome: true, email: true, empresaId: true, plano: true, trialStart: true, trialEnd: true }\n    });\n\n    if (!usuario) {\n      return res.status(401).json({ message: 'Token inválido' });\n    }\n\n    // Calcular se o trial expirou\n    const now = new Date();\n    // Se trialEnd não estiver definido, calcula com base em trialStart\n    const trialEnd = usuario.trialEnd || (usuario.trialStart ? new Date(usuario.trialStart.getTime() + 7 * 24 * 60 * 60 * 1000) : new Date());\n    const isTrialExpired = usuario.plano === 'TRIAL' && now > trialEnd;\n\n    // Adicionar usuário ao request\n    req.userId = usuario.id; // Adicionar userId ao request\n    req.user = {\n      id: usuario.id,\n      nome: usuario.nome,\n      email: usuario.email,\n      empresaId: usuario.empresaId,\n      plano: isTrialExpired ? 'EXPIRADO' : usuario.plano,\n      isTrialExpired\n    };\n    next();\n  } catch (error) {\n    console.error('Erro na autenticação:', error);\n    res.status(401).json({ message: 'Token inválido' });\n  }\n};\n\n// Alias para compatibilidade com rotas que usam authenticateToken\nexport const authenticateToken = authMiddleware;","size_bytes":1956},"backend/src/routes/auth.ts":{"content":"import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Registro\nrouter.post('/register', async (req, res) => {\n  try {\n    const { nome, email, senha, empresaNome } = req.body;\n\n    // Validações básicas\n    if (!nome || !email || !senha) {\n      return res.status(400).json({ message: 'Nome, email e senha são obrigatórios' });\n    }\n\n    // Verificar se usuário já existe\n    const existingUser = await prisma.usuario.findUnique({\n      where: { email }\n    });\n\n    if (existingUser) {\n      return res.status(400).json({ message: 'Email já está em uso' });\n    }\n\n    // Hash da senha\n    const hashedPassword = await bcrypt.hash(senha, 10);\n\n    // Criar empresa se fornecida\n    let empresa = null;\n    if (empresaNome) {\n      empresa = await prisma.empresa.create({\n        data: { nome: empresaNome }\n      });\n    }\n\n    // Calcular data de fim do trial (7 dias)\n    const trialEnd = new Date();\n    trialEnd.setDate(trialEnd.getDate() + 7);\n\n    // Criar usuário\n    const usuario = await prisma.usuario.create({\n      data: {\n        nome,\n        email,\n        senha: hashedPassword,\n        empresaId: empresa?.id,\n        plano: 'TRIAL',\n        trialEnd: trialEnd,\n        isActive: true\n      },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        empresaId: true,\n        plano: true,\n        trialEnd: true\n      }\n    });\n\n    // Gerar token\n    const jwtSecret = process.env.JWT_SECRET || 'fallback-secret';\n    const token = jwt.sign({ userId: usuario.id }, jwtSecret, { expiresIn: '7d' });\n\n    res.status(201).json({\n      message: 'Usuário criado com sucesso',\n      usuario,\n      token\n    });\n  } catch (error) {\n    console.error('Erro no registro:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Login\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, senha } = req.body;\n\n    if (!email || !senha) {\n      return res.status(400).json({ message: 'Email e senha são obrigatórios' });\n    }\n\n    // Buscar usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { email }\n    });\n\n    if (!usuario) {\n      return res.status(401).json({ message: 'Email ou senha incorretos' });\n    }\n\n    // Verificar senha\n    const isValidPassword = await bcrypt.compare(senha, usuario.senha);\n    if (!isValidPassword) {\n      return res.status(401).json({ message: 'Email ou senha incorretos' });\n    }\n\n    // Gerar token\n    const jwtSecret = process.env.JWT_SECRET || 'fallback-secret';\n    const token = jwt.sign({ userId: usuario.id }, jwtSecret, { expiresIn: '7d' });\n\n    // Verificar status do trial\n    const now = new Date();\n    const trialEnd = usuario.trialEnd || new Date(usuario.trialStart.getTime() + 7 * 24 * 60 * 60 * 1000);\n    const isTrialExpired = usuario.plano === 'TRIAL' && now > trialEnd;\n    const diasRestantes = Math.max(0, Math.ceil((trialEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\n\n    res.json({\n      message: 'Login realizado com sucesso',\n      usuario: {\n        id: usuario.id,\n        nome: usuario.nome,\n        email: usuario.email,\n        empresaId: usuario.empresaId,\n        plano: isTrialExpired ? 'EXPIRADO' : usuario.plano,\n        trialEnd: trialEnd,\n        diasRestantes,\n        isTrialExpired\n      },\n      token\n    });\n  } catch (error) {\n    console.error('Erro no login:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\nexport default router;","size_bytes":3653},"backend/src/routes/clientes.ts":{"content":"import express from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport { authMiddleware, AuthenticatedRequest } from '../middleware/auth';\nimport { checkTrialStatus, requireActiveTrial } from '../middleware/trial';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Aplicar autenticação e verificação de trial a todas as rotas\nrouter.use(authMiddleware);\nrouter.use(checkTrialStatus);\n\n// GET /api/clientes - Listar clientes (filtrado por empresa)\nrouter.get('/', async (req: AuthenticatedRequest, res) => {\n  try {\n    const whereClause: any = {\n      usuarioId: req.userId!\n    };\n\n    // Se usuário tem empresa, filtrar apenas clientes da mesma empresa\n    if (req.user?.empresaId) {\n      whereClause.empresaId = req.user.empresaId;\n    }\n\n    const clientes = await prisma.cliente.findMany({\n      where: whereClause,\n      include: {\n        usuario: { select: { nome: true } },\n        empresa: { select: { nome: true } },\n        _count: { select: { oportunidades: true } }\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    res.json(clientes);\n  } catch (error) {\n    console.error('Erro ao buscar clientes:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// POST /api/clientes - Criar cliente (com empresa do usuário)\nrouter.post('/', requireActiveTrial, async (req: AuthenticatedRequest, res) => {\n  try {\n    const cliente = await prisma.cliente.create({\n      data: {\n        ...req.body,\n        usuarioId: req.userId!,\n        empresaId: req.user?.empresaId || null // Atribuir empresa automaticamente\n      },\n      include: {\n        usuario: { select: { nome: true } },\n        empresa: { select: { nome: true } }\n      }\n    });\n\n    res.status(201).json(cliente);\n  } catch (error) {\n    console.error('Erro ao criar cliente:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Buscar cliente por ID\nrouter.get('/:id', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { id } = req.params;\n\n    const cliente = await prisma.cliente.findFirst({\n      where: {\n        id,\n        usuarioId: req.userId!,\n        empresaId: req.user?.empresaId // Adiciona filtro de empresa\n      }\n    });\n\n    if (!cliente) {\n      return res.status(404).json({ message: 'Cliente não encontrado' });\n    }\n\n    res.json({ cliente });\n  } catch (error) {\n    console.error('Erro ao buscar cliente:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Atualizar cliente (requer trial ativo)\nrouter.put('/:id', requireActiveTrial, async (req: AuthenticatedRequest, res) => {\n  try {\n    const { id } = req.params;\n    const updates = req.body;\n\n    const cliente = await prisma.cliente.findFirst({\n      where: {\n        id,\n        usuarioId: req.userId!,\n        empresaId: req.user?.empresaId // Adiciona filtro de empresa\n      }\n    });\n\n    if (!cliente) {\n      return res.status(404).json({ message: 'Cliente não encontrado' });\n    }\n\n    const clienteAtualizado = await prisma.cliente.update({\n      where: { id },\n      data: updates\n    });\n\n    res.json({ cliente: clienteAtualizado });\n  } catch (error) {\n    console.error('Erro ao atualizar cliente:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Deletar cliente (requer trial ativo)\nrouter.delete('/:id', requireActiveTrial, async (req: AuthenticatedRequest, res) => {\n  try {\n    const { id } = req.params;\n\n    const cliente = await prisma.cliente.findFirst({\n      where: {\n        id,\n        usuarioId: req.userId!,\n        empresaId: req.user?.empresaId // Adiciona filtro de empresa\n      }\n    });\n\n    if (!cliente) {\n      return res.status(404).json({ message: 'Cliente não encontrado' });\n    }\n\n    await prisma.cliente.delete({\n      where: { id }\n    });\n\n    res.json({ message: 'Cliente deletado com sucesso' });\n  } catch (error) {\n    console.error('Erro ao deletar cliente:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\nexport default router;","size_bytes":4087},"backend/src/routes/oportunidades.ts":{"content":"import express from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport { authMiddleware, AuthenticatedRequest } from '../middleware/auth';\nimport { checkTrialStatus, requireActiveTrial } from '../middleware/trial';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Aplicar autenticação e verificação de trial a todas as rotas\nrouter.use(authMiddleware);\nrouter.use(checkTrialStatus);\n\n// GET /api/oportunidades - Listar oportunidades (filtrado por empresa)\nrouter.get('/', authMiddleware, async (req: AuthenticatedRequest, res) => {\n  try {\n    // Buscar apenas oportunidades de clientes da mesma empresa\n    const whereClause: any = {\n      usuarioId: req.userId!\n    };\n\n    if (req.user?.empresaId) {\n      whereClause.cliente = {\n        empresaId: req.user.empresaId\n      };\n    }\n\n    const oportunidades = await prisma.oportunidade.findMany({\n      where: whereClause,\n      include: {\n        cliente: {\n          include: { \n            empresa: { \n              select: { nome: true } \n            } \n          }\n        },\n        usuario: { \n          select: { nome: true } \n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    res.json(oportunidades);\n  } catch (error) {\n    console.error('Erro ao buscar oportunidades:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Criar oportunidade (requer trial ativo)\nrouter.post('/', requireActiveTrial, async (req: AuthenticatedRequest, res) => {\n  try {\n    const {\n      titulo,\n      descricao,\n      valor,\n      status,\n      prioridade,\n      dataPrevisao,\n      clienteId\n    } = req.body;\n\n    if (!titulo || !clienteId) {\n      return res.status(400).json({ message: 'Título e cliente são obrigatórios' });\n    }\n\n    // Verificar se o cliente pertence ao usuário e à empresa do usuário\n    const cliente = await prisma.cliente.findFirst({\n      where: {\n        id: clienteId,\n        usuarioId: req.userId!,\n        empresaId: req.user?.empresaId // Adicionado filtro por empresa\n      }\n    });\n\n    if (!cliente) {\n      return res.status(404).json({ message: 'Cliente não encontrado ou não pertence à sua empresa' });\n    }\n\n    const oportunidade = await prisma.oportunidade.create({\n      data: {\n        titulo,\n        descricao,\n        valor: valor ? parseFloat(valor) : null,\n        status: status || 'LEAD',\n        prioridade: prioridade || 'MEDIA',\n        dataPrevisao: dataPrevisao ? new Date(dataPrevisao) : null,\n        clienteId,\n        usuarioId: req.userId!,\n        empresaId: req.user?.empresaId\n      },\n      include: {\n        cliente: {\n          include: { \n            empresa: { \n              select: { nome: true } \n            } \n          }\n        },\n        usuario: { \n          select: { nome: true } \n        }\n      }\n    });\n\n    res.status(201).json({ oportunidade });\n  } catch (error) {\n    console.error('Erro ao criar oportunidade:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Atualizar oportunidade (requer trial ativo)\nrouter.put('/:id', requireActiveTrial, async (req: AuthenticatedRequest, res) => {\n  try {\n    const { id } = req.params;\n    const updates = req.body;\n\n    // Verificar se a oportunidade pertence ao usuário e à empresa do usuário\n    const oportunidade = await prisma.oportunidade.findFirst({\n      where: {\n        id,\n        usuarioId: req.userId!,\n        empresaId: req.user?.empresaId // Adicionado filtro por empresa\n      }\n    });\n\n    if (!oportunidade) {\n      return res.status(404).json({ message: 'Oportunidade não encontrada ou não pertence à sua empresa' });\n    }\n\n    // Remover empresaId e usuarioId do corpo da requisição para evitar alterações indevidas\n    delete updates.empresaId;\n    delete updates.usuarioId;\n    delete updates.clienteId; // Cliente não deve ser alterado diretamente aqui\n\n    const oportunidadeAtualizada = await prisma.oportunidade.update({\n      where: { id },\n      data: updates,\n      include: {\n        cliente: {\n          include: { \n            empresa: { \n              select: { nome: true } \n            } \n          }\n        },\n        usuario: { \n          select: { nome: true } \n        }\n      }\n    });\n\n    res.json({ oportunidade: oportunidadeAtualizada });\n  } catch (error) {\n    console.error('Erro ao atualizar oportunidade:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Deletar oportunidade (requer trial ativo)\nrouter.delete('/:id', requireActiveTrial, async (req: AuthenticatedRequest, res) => {\n  try {\n    const { id } = req.params;\n\n    // Verificar se a oportunidade pertence ao usuário e à empresa do usuário\n    const oportunidade = await prisma.oportunidade.findFirst({\n      where: {\n        id,\n        usuarioId: req.userId!,\n        empresaId: req.user?.empresaId // Adicionado filtro por empresa\n      }\n    });\n\n    if (!oportunidade) {\n      return res.status(404).json({ message: 'Oportunidade não encontrada ou não pertence à sua empresa' });\n    }\n\n    await prisma.oportunidade.delete({\n      where: { id }\n    });\n\n    res.json({ message: 'Oportunidade deletada com sucesso' });\n  } catch (error) {\n    console.error('Erro ao deletar oportunidade:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\nexport default router;","size_bytes":5397},"backend/src/routes/tarefas.ts":{"content":"import express, { Response } from 'express';\nimport { PrismaClient, Prisma } from '@prisma/client';\nimport { authMiddleware, AuthenticatedRequest } from '../middleware/auth';\nimport { checkTrialStatus, requireActiveTrial } from '../middleware/trial';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Autenticação + trial\nrouter.use(authMiddleware);\nrouter.use(checkTrialStatus);\n\n// GET /api/tarefas\nrouter.get('/', async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    const whereClause: Prisma.TarefaWhereInput = {\n      usuarioId: req.userId!,\n      ...(req.user?.empresaId && {\n        OR: [\n          { cliente: { empresaId: req.user.empresaId } },\n          { cliente: null },\n        ],\n      }),\n    };\n\n    const tarefas = await prisma.tarefa.findMany({\n      where: whereClause,\n      include: {\n        // use apenas include (sem select no mesmo nível)\n        cliente: {\n          include: {\n            empresa: { select: { nome: true } },\n          },\n        },\n        oportunidade: { select: { titulo: true } },\n        usuario: { select: { nome: true } },\n      },\n      orderBy: { dataVencimento: 'asc' },\n    });\n\n    res.json(tarefas);\n  } catch (error) {\n    console.error('Erro ao buscar tarefas:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// POST /api/tarefas\nrouter.post('/', requireActiveTrial, async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    const {\n      titulo,\n      descricao,\n      status,\n      prioridade,\n      dataVencimento,\n      clienteId,\n      oportunidadeId,\n    } = req.body;\n\n    if (!titulo || !dataVencimento) {\n      return res.status(400).json({ message: 'Título e data de vencimento são obrigatórios' });\n    }\n\n    const tarefa = await prisma.tarefa.create({\n      data: {\n        titulo,\n        descricao,\n        status: status ?? 'PENDENTE',\n        prioridade: prioridade ?? 'MEDIA',\n        dataVencimento: new Date(dataVencimento),\n        clienteId: clienteId ?? null,\n        oportunidadeId: oportunidadeId ?? null,\n        usuarioId: req.userId!,\n      },\n      include: {\n        cliente: {\n          include: {\n            empresa: { select: { nome: true } },\n          },\n        },\n        oportunidade: { select: { titulo: true } },\n      },\n    });\n\n    res.status(201).json({ tarefa });\n  } catch (error) {\n    console.error('Erro ao criar tarefa:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// PUT /api/tarefas/:id\nrouter.put('/:id', requireActiveTrial, async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    // Se o ID da sua tabela for Int, use Number(id)\n    const filtroId = { id }; // ou { id: Number(id) }\n\n    const tarefa = await prisma.tarefa.findFirst({\n      where: { ...filtroId, usuarioId: req.userId! },\n    });\n\n    if (!tarefa) {\n      return res.status(404).json({ message: 'Tarefa não encontrada' });\n    }\n\n    // Permitir apenas campos seguros\n    const { titulo, descricao, status, prioridade, dataVencimento, clienteId, oportunidadeId } = req.body as {\n      titulo?: string;\n      descricao?: string;\n      status?: string;\n      prioridade?: string;\n      dataVencimento?: string | Date;\n      clienteId?: string | null;\n      oportunidadeId?: string | null;\n    };\n\n    const tarefaAtualizada = await prisma.tarefa.update({\n      where: filtroId,\n      data: {\n        ...(titulo !== undefined && { titulo }),\n        ...(descricao !== undefined && { descricao }),\n        ...(status !== undefined && { status }),\n        ...(prioridade !== undefined && { prioridade }),\n        ...(dataVencimento !== undefined && { dataVencimento: new Date(dataVencimento) }),\n        ...(clienteId !== undefined && { clienteId }),\n        ...(oportunidadeId !== undefined && { oportunidadeId }),\n      },\n      include: {\n        cliente: {\n          include: {\n            empresa: { select: { nome: true } },\n          },\n        },\n        oportunidade: { select: { titulo: true } },\n      },\n    });\n\n    res.json({ tarefa: tarefaAtualizada });\n  } catch (error) {\n    console.error('Erro ao atualizar tarefa:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// DELETE /api/tarefas/:id\nrouter.delete('/:id', requireActiveTrial, async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const filtroId = { id }; // ou { id: Number(id) }\n\n    const tarefa = await prisma.tarefa.findFirst({\n      where: { ...filtroId, usuarioId: req.userId! },\n    });\n\n    if (!tarefa) {\n      return res.status(404).json({ message: 'Tarefa não encontrada' });\n    }\n\n    await prisma.tarefa.delete({ where: filtroId });\n\n    res.json({ message: 'Tarefa deletada com sucesso' });\n  } catch (error) {\n    console.error('Erro ao deletar tarefa:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\nexport default router;\n","size_bytes":4983},"src/components/dashboard/ConversionChart.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nexport function ConversionChart() {\n  const { theme } = useTheme();\n  \n  // Dados temporários até conectar com a API\n  const data = [\n    { name: 'Lead', value: 85 },\n    { name: 'Qualificado', value: 65 },\n    { name: 'Proposta', value: 45 },\n    { name: 'Negociação', value: 25 },\n    { name: 'Ganho', value: 15 }\n  ];\n\n  const COLORS = ['#8B5CF6', '#6E59A5', '#9b87f5', '#5E44A5', '#A788FF'];\n\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Taxa de Conversão</CardTitle>\n        <CardDescription>\n          Taxas de conversão por etapa\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-72\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={data}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n                label={({ name, value }) => `${name}: ${value}%`}\n              >\n                {data.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip \n                formatter={(value: number) => [`${value}%`, 'Taxa']}\n                contentStyle={{ \n                  backgroundColor: theme === 'dark' ? '#333' : '#fff',\n                  borderColor: theme === 'dark' ? '#555' : '#ddd',\n                  color: theme === 'dark' ? '#fff' : '#000'\n                }}\n              />\n              <Legend verticalAlign=\"bottom\" height={36} />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2040},"src/components/dashboard/RecentActivities.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { Phone, Mail, CalendarClock, FileText } from 'lucide-react';\n\nexport function RecentActivities() {\n  // Dados temporários até conectar com a API\n  const recentActivities = [\n    {\n      id: '1',\n      type: 'call',\n      title: 'Ligação para João Silva',\n      description: 'Discussão sobre proposta comercial',\n      date: new Date(),\n      createdBy: 'Você'\n    },\n    {\n      id: '2',\n      type: 'email',\n      title: 'Email enviado para Maria Santos',\n      description: 'Envio de orçamento solicitado',\n      date: new Date(Date.now() - 86400000),\n      createdBy: 'Você'\n    },\n    {\n      id: '3',\n      type: 'meeting',\n      title: 'Reunião com Pedro Costa',\n      description: 'Apresentação da solução',\n      date: new Date(Date.now() - 172800000),\n      createdBy: 'Equipe'\n    }\n  ];\n\n  // Helper function to determine icon by interaction type\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'call':\n        return <Phone className=\"h-4 w-4\" />;\n      case 'email':\n        return <Mail className=\"h-4 w-4\" />;\n      case 'meeting':\n        return <CalendarClock className=\"h-4 w-4\" />;\n      case 'note':\n        return <FileText className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Atividades Recentes</CardTitle>\n        <CardDescription>\n          Últimas interações com clientes\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {recentActivities.map((activity) => (\n            <div key={activity.id} className=\"flex items-start space-x-3\">\n              <div className=\"mt-0.5 bg-muted p-1.5 rounded-full\">\n                {getIcon(activity.type)}\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"font-medium text-sm\">{activity.title}</div>\n                <div className=\"text-xs text-muted-foreground line-clamp-2\">\n                  {activity.description}\n                </div>\n                <div className=\"flex text-xs text-muted-foreground items-center space-x-2\">\n                  <span>\n                    {format(activity.date, \"dd 'de' MMMM, yyyy\", { locale: ptBR })}\n                  </span>\n                  <span>•</span>\n                  <span>{activity.createdBy}</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2735},"src/components/dashboard/SalesChart.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nexport function SalesChart() {\n  const { theme } = useTheme();\n  \n  // Dados temporários até conectar com a API\n  const data = [\n    { month: 'Jan', amount: 42000 },\n    { month: 'Fev', amount: 38000 },\n    { month: 'Mar', amount: 55000 },\n    { month: 'Abr', amount: 48000 },\n    { month: 'Mai', amount: 62000 },\n    { month: 'Jun', amount: 71000 }\n  ];\n\n  const formatCurrency = (value: number) => \n    new Intl.NumberFormat('pt-BR', { \n      style: 'currency', \n      currency: 'BRL',\n      maximumFractionDigits: 0, \n    }).format(value);\n\n  return (\n    <Card className=\"col-span-4\">\n      <CardHeader>\n        <CardTitle>Vendas Mensais</CardTitle>\n        <CardDescription>\n          Performance de vendas dos últimos meses\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 25 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke={theme === 'dark' ? '#333' : '#eee'} />\n              <XAxis \n                dataKey=\"month\" \n                tick={{ fill: theme === 'dark' ? '#ccc' : '#333' }}\n                tickLine={{ stroke: theme === 'dark' ? '#666' : '#ccc' }}\n                axisLine={{ stroke: theme === 'dark' ? '#666' : '#ccc' }}\n              />\n              <YAxis \n                tickFormatter={(value) => `R$ ${value / 1000}k`}\n                tick={{ fill: theme === 'dark' ? '#ccc' : '#333' }}\n                tickLine={{ stroke: theme === 'dark' ? '#666' : '#ccc' }}\n                axisLine={{ stroke: theme === 'dark' ? '#666' : '#ccc' }}\n              />\n              <Tooltip \n                formatter={(value: number) => [formatCurrency(value), 'Receita']}\n                labelStyle={{ color: theme === 'dark' ? '#fff' : '#000' }}\n                contentStyle={{ \n                  backgroundColor: theme === 'dark' ? '#333' : '#fff',\n                  borderColor: theme === 'dark' ? '#555' : '#ddd',\n                  color: theme === 'dark' ? '#fff' : '#000'\n                }}\n              />\n              <Bar \n                dataKey=\"amount\" \n                name=\"Vendas\" \n                fill=\"hsl(var(--primary))\" \n                radius={[4, 4, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2708},"src/components/dashboard/SegmentChart.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nexport function SegmentChart() {\n  const { theme } = useTheme();\n  \n  // Dados temporários até conectar com a API\n  const data = [\n    { segment: 'Tecnologia', count: 35 },\n    { segment: 'Saúde', count: 28 },\n    { segment: 'Educação', count: 22 },\n    { segment: 'Varejo', count: 18 },\n    { segment: 'Serviços', count: 15 }\n  ];\n\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Oportunidades por Segmento</CardTitle>\n        <CardDescription>\n          Distribuição de oportunidades\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-72\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart \n              data={data} \n              layout=\"vertical\"\n              margin={{ top: 5, right: 30, left: 80, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" stroke={theme === 'dark' ? '#333' : '#eee'} />\n              <XAxis \n                type=\"number\" \n                tick={{ fill: theme === 'dark' ? '#ccc' : '#333' }}\n                tickLine={{ stroke: theme === 'dark' ? '#666' : '#ccc' }}\n                axisLine={{ stroke: theme === 'dark' ? '#666' : '#ccc' }}\n              />\n              <YAxis \n                dataKey=\"segment\" \n                type=\"category\" \n                tick={{ fill: theme === 'dark' ? '#ccc' : '#333' }}\n                tickLine={{ stroke: theme === 'dark' ? '#666' : '#ccc' }}\n                axisLine={{ stroke: theme === 'dark' ? '#666' : '#ccc' }}\n                width={75}\n              />\n              <Tooltip \n                formatter={(value: number) => [value, 'Quantidade']}\n                contentStyle={{ \n                  backgroundColor: theme === 'dark' ? '#333' : '#fff',\n                  borderColor: theme === 'dark' ? '#555' : '#ddd',\n                  color: theme === 'dark' ? '#fff' : '#000'\n                }}\n              />\n              <Bar \n                dataKey=\"count\" \n                name=\"Oportunidades\" \n                fill=\"#F97316\" \n                radius={[0, 4, 4, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2512},"src/components/dashboard/StatsCard.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface StatsCardProps {\n  title: string;\n  value: string;\n  description: string;\n  trend?: 'up' | 'down';\n  trendValue?: string;\n  icon: React.ElementType;\n  iconClassName?: string;\n}\n\nexport const StatsCard: React.FC<StatsCardProps> = ({\n  title,\n  value,\n  description,\n  trend,\n  trendValue,\n  icon: Icon,\n  iconClassName\n}) => {\n  return (\n    <Card className=\"glass-card card-hover morphing-border group relative overflow-hidden\">\n      {/* Simplified background element */}\n      <div className=\"absolute top-0 right-0 w-20 h-20 bg-primary/5 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"></div>\n      \n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-3 relative z-10\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground group-hover:text-foreground transition-colors duration-300\">\n          {title}\n        </CardTitle>\n        <div className={cn(\n          \"p-3 rounded-xl transition-all duration-300 glass-card\", \n          iconClassName\n        )}>\n          <Icon className=\"h-5 w-5\" />\n        </div>\n      </CardHeader>\n      <CardContent className=\"relative z-10\">\n        <div className=\"text-3xl font-bold text-foreground mb-2\">\n          {value}\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <p className=\"text-sm text-muted-foreground group-hover:text-foreground transition-colors duration-300\">\n            {description}\n          </p>\n          {trend && trendValue && (\n            <Badge \n              variant={trend === 'up' ? 'default' : 'destructive'}\n              className=\"flex items-center gap-1 text-xs glass-card\"\n            >\n              {trend === 'up' ? (\n                <TrendingUp className=\"h-3 w-3\" />\n              ) : (\n                <TrendingDown className=\"h-3 w-3\" />\n              )}\n              {trendValue}\n            </Badge>\n          )}\n        </div>\n        \n        {/* Simplified decorative dot */}\n        <div className=\"absolute bottom-2 right-2 w-2 h-2 bg-primary/30 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"></div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":2481},"src/components/dashboard/UpcomingTasks.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\n\nexport function UpcomingTasks() {\n  // Dados temporários até conectar com a API\n  const upcomingTasks = [\n    {\n      id: '1',\n      title: 'Ligar para João Silva',\n      priority: 'high',\n      dueDate: new Date(),\n      clientId: '1',\n      assignedTo: 'Você',\n      completed: false\n    },\n    {\n      id: '2',\n      title: 'Enviar proposta para Maria Santos',\n      priority: 'medium',\n      dueDate: new Date(Date.now() + 86400000),\n      clientId: '2',\n      assignedTo: 'Equipe',\n      completed: false\n    },\n    {\n      id: '3',\n      title: 'Revisar contrato',\n      priority: 'low',\n      dueDate: new Date(Date.now() + 172800000),\n      assignedTo: 'Você',\n      completed: false\n    }\n  ];\n\n  const mockClients = [\n    { id: '1', name: 'João Silva' },\n    { id: '2', name: 'Maria Santos' }\n  ];\n\n  // Get client name by ID\n  const getClientName = (clientId?: string) => {\n    if (!clientId) return '';\n    const client = mockClients.find(c => c.id === clientId);\n    return client ? client.name : '';\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-500';\n      case 'medium':\n        return 'bg-amber-500';\n      case 'low':\n        return 'bg-green-500';\n      default:\n        return 'bg-slate-500';\n    }\n  };\n\n  return (\n    <Card className=\"col-span-2\">\n      <CardHeader>\n        <CardTitle>Próximas Tarefas</CardTitle>\n        <CardDescription>\n          Tarefas pendentes mais urgentes\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {upcomingTasks.map((task) => (\n            <div key={task.id} className=\"flex items-start space-x-3\">\n              <Checkbox id={`task-${task.id}`} />\n              <div className=\"space-y-1 flex-1\">\n                <label\n                  htmlFor={`task-${task.id}`}\n                  className=\"font-medium text-sm cursor-pointer\"\n                >\n                  {task.title}\n                </label>\n                <div className=\"flex flex-wrap items-center gap-2 text-xs\">\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1 py-0 px-2\">\n                    <span\n                      className={cn(\"w-2 h-2 rounded-full\", getPriorityColor(task.priority))}\n                    />\n                    <span>\n                      {task.priority === 'high' && 'Alta'}\n                      {task.priority === 'medium' && 'Média'}\n                      {task.priority === 'low' && 'Baixa'}\n                    </span>\n                  </Badge>\n                  {task.clientId && (\n                    <span className=\"text-muted-foreground\">\n                      {getClientName(task.clientId)}\n                    </span>\n                  )}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Vence em {format(task.dueDate, \"dd 'de' MMMM\", { locale: ptBR })}\n                </div>\n              </div>\n              <div className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                {task.assignedTo}\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3558},"src/components/integrations/ChatIntegrations.tsx":{"content":"\n/**\n * Componente para configuração de integrações de chat\n * Permite configurar Facebook, Instagram e WhatsApp\n */\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Facebook, Instagram, MessageCircle, CheckCircle2, AlertCircle, Settings, Key } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface IntegracaoChat {\n  id: string;\n  plataforma: 'facebook' | 'instagram' | 'whatsapp';\n  nome: string;\n  conectada: boolean;\n  configuracao: {\n    appId?: string;\n    appSecret?: string;\n    accessToken?: string;\n    pageId?: string;\n    phoneNumberId?: string;\n    businessAccountId?: string;\n  };\n  ultimaConexao?: Date;\n}\n\nexport function ChatIntegrations() {\n  const { toast } = useToast();\n  \n  const [integracoes, setIntegracoes] = useState<IntegracaoChat[]>([\n    {\n      id: '1',\n      plataforma: 'facebook',\n      nome: 'Facebook Messenger',\n      conectada: false,\n      configuracao: {},\n    },\n    {\n      id: '2',\n      plataforma: 'instagram',\n      nome: 'Instagram Direct',\n      conectada: false,\n      configuracao: {},\n    },\n    {\n      id: '3',\n      plataforma: 'whatsapp',\n      nome: 'WhatsApp Business',\n      conectada: true,\n      configuracao: {\n        phoneNumberId: '+55 11 99999-9999',\n        businessAccountId: 'xxx-xxx-xxx',\n      },\n      ultimaConexao: new Date('2024-06-10T15:30:00'),\n    },\n  ]);\n\n  const getPlataformaIcon = (plataforma: string) => {\n    switch (plataforma) {\n      case 'facebook':\n        return <Facebook className=\"h-6 w-6 text-blue-600\" />;\n      case 'instagram':\n        return <Instagram className=\"h-6 w-6 text-pink-600\" />;\n      case 'whatsapp':\n        return <MessageCircle className=\"h-6 w-6 text-green-600\" />;\n      default:\n        return <MessageCircle className=\"h-6 w-6\" />;\n    }\n  };\n\n  const getPlataformaColor = (plataforma: string) => {\n    switch (plataforma) {\n      case 'facebook':\n        return 'border-blue-200 bg-blue-50';\n      case 'instagram':\n        return 'border-pink-200 bg-pink-50';\n      case 'whatsapp':\n        return 'border-green-200 bg-green-50';\n      default:\n        return 'border-gray-200 bg-gray-50';\n    }\n  };\n\n  const alternarConexao = (id: string) => {\n    setIntegracoes(prev => prev.map(integracao => {\n      if (integracao.id === id) {\n        const novaConexao = !integracao.conectada;\n        return {\n          ...integracao,\n          conectada: novaConexao,\n          ultimaConexao: novaConexao ? new Date() : integracao.ultimaConexao,\n        };\n      }\n      return integracao;\n    }));\n\n    const integracao = integracoes.find(i => i.id === id);\n    if (integracao) {\n      toast({\n        title: integracao.conectada ? \"Integração desconectada\" : \"Integração conectada\",\n        description: `${integracao.nome} foi ${integracao.conectada ? 'desconectada' : 'conectada'} com sucesso.`,\n      });\n    }\n  };\n\n  const salvarConfiguracao = (id: string, config: any) => {\n    setIntegracoes(prev => prev.map(integracao => \n      integracao.id === id \n        ? { ...integracao, configuracao: { ...integracao.configuracao, ...config } }\n        : integracao\n    ));\n\n    toast({\n      title: \"Configuração salva\",\n      description: \"As configurações da integração foram atualizadas.\",\n    });\n  };\n\n  const testarConexao = async (integracao: IntegracaoChat) => {\n    toast({\n      title: \"Testando conexão\",\n      description: `Verificando conectividade com ${integracao.nome}...`,\n    });\n\n    // Simular teste de conexão\n    setTimeout(() => {\n      toast({\n        title: \"Teste concluído\",\n        description: integracao.conectada \n          ? \"Conexão funcionando corretamente!\" \n          : \"Erro na conexão. Verifique as configurações.\",\n        variant: integracao.conectada ? \"default\" : \"destructive\",\n      });\n    }, 2000);\n  };\n\n  const formatarData = (data: Date) => {\n    return new Intl.DateTimeFormat('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-xl font-semibold mb-2\">Integrações de Chat</h3>\n        <p className=\"text-muted-foreground\">\n          Configure as integrações com plataformas de mensagem para centralizar todos os chats no CRM.\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n          <TabsTrigger value=\"facebook\">Facebook</TabsTrigger>\n          <TabsTrigger value=\"instagram\">Instagram</TabsTrigger>\n          <TabsTrigger value=\"whatsapp\">WhatsApp</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {integracoes.map((integracao) => (\n              <Card key={integracao.id} className={`${getPlataformaColor(integracao.plataforma)} border-2`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getPlataformaIcon(integracao.plataforma)}\n                      <CardTitle className=\"text-lg\">{integracao.nome}</CardTitle>\n                    </div>\n                    <Badge variant={integracao.conectada ? \"default\" : \"secondary\"}>\n                      {integracao.conectada ? (\n                        <><CheckCircle2 className=\"h-3 w-3 mr-1\" />Conectado</>\n                      ) : (\n                        <><AlertCircle className=\"h-3 w-3 mr-1\" />Desconectado</>\n                      )}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {integracao.ultimaConexao && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Última conexão: {formatarData(integracao.ultimaConexao)}\n                    </p>\n                  )}\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor={`switch-${integracao.id}`}>Ativo</Label>\n                    <Switch\n                      id={`switch-${integracao.id}`}\n                      checked={integracao.conectada}\n                      onCheckedChange={() => alternarConexao(integracao.id)}\n                    />\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex-1\"\n                      onClick={() => testarConexao(integracao)}\n                    >\n                      Testar\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex-1\"\n                    >\n                      <Settings className=\"h-4 w-4 mr-1\" />\n                      Config\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"facebook\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Facebook className=\"h-5 w-5 text-blue-600\" />\n                <span>Configuração do Facebook Messenger</span>\n              </CardTitle>\n              <CardDescription>\n                Configure a integração com o Facebook Messenger para receber mensagens diretamente no CRM.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <Key className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Para configurar a integração com Facebook, você precisa criar um App no Facebook Developers \n                  e obter as credenciais necessárias.\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fb-app-id\">App ID</Label>\n                  <Input\n                    id=\"fb-app-id\"\n                    placeholder=\"Digite o App ID do Facebook\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fb-app-secret\">App Secret</Label>\n                  <Input\n                    id=\"fb-app-secret\"\n                    type=\"password\"\n                    placeholder=\"Digite o App Secret\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fb-access-token\">Access Token</Label>\n                  <Input\n                    id=\"fb-access-token\"\n                    placeholder=\"Digite o Access Token\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fb-page-id\">Page ID</Label>\n                  <Input\n                    id=\"fb-page-id\"\n                    placeholder=\"Digite o Page ID\"\n                  />\n                </div>\n              </div>\n              \n              <Button className=\"w-full\">\n                Salvar Configuração do Facebook\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"instagram\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Instagram className=\"h-5 w-5 text-pink-600\" />\n                <span>Configuração do Instagram Direct</span>\n              </CardTitle>\n              <CardDescription>\n                Configure a integração com Instagram Direct para gerenciar mensagens privadas.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <Key className=\"h-4 w-4\" />\n                <AlertDescription>\n                  A integração com Instagram requer uma conta Instagram Business conectada ao Facebook.\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"ig-business-id\">Instagram Business Account ID</Label>\n                  <Input\n                    id=\"ig-business-id\"\n                    placeholder=\"Digite o Business Account ID\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"ig-access-token\">Access Token</Label>\n                  <Input\n                    id=\"ig-access-token\"\n                    type=\"password\"\n                    placeholder=\"Digite o Access Token\"\n                  />\n                </div>\n              </div>\n              \n              <Button className=\"w-full\">\n                Salvar Configuração do Instagram\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"whatsapp\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <MessageCircle className=\"h-5 w-5 text-green-600\" />\n                <span>Configuração do WhatsApp Business</span>\n              </CardTitle>\n              <CardDescription>\n                Configure a integração com WhatsApp Business API para receber e enviar mensagens.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <CheckCircle2 className=\"h-4 w-4\" />\n                <AlertDescription>\n                  WhatsApp Business API configurado e funcionando. Última sincronização há 2 horas.\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"wa-phone-id\">Phone Number ID</Label>\n                  <Input\n                    id=\"wa-phone-id\"\n                    value=\"+55 11 99999-9999\"\n                    placeholder=\"Digite o Phone Number ID\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"wa-business-id\">Business Account ID</Label>\n                  <Input\n                    id=\"wa-business-id\"\n                    value=\"xxx-xxx-xxx\"\n                    placeholder=\"Digite o Business Account ID\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"wa-access-token\">Access Token</Label>\n                  <Input\n                    id=\"wa-access-token\"\n                    type=\"password\"\n                    placeholder=\"Digite o Access Token\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"wa-webhook-url\">Webhook URL</Label>\n                  <Input\n                    id=\"wa-webhook-url\"\n                    value=\"https://seudominio.com/webhook/whatsapp\"\n                    placeholder=\"URL do webhook\"\n                  />\n                </div>\n              </div>\n              \n              <Button className=\"w-full\">\n                Atualizar Configuração do WhatsApp\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":14295},"src/components/integrations/WebhookSettings.tsx":{"content":"\n/**\n * Componente para configuração de Webhooks\n * Permite gerenciar URLs de webhook para integrações com plataformas externas\n */\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage, FormDescription } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Separator } from '@/components/ui/separator';\nimport { Trash2, Plus, Link, Check, X, Globe } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useToast } from '@/hooks/use-toast';\n\n/**\n * Interface para configuração de webhook\n */\ninterface ConfiguracaoWebhook {\n  id: string;\n  nome: string;\n  url: string;\n  eventos: string[];\n  ativo: boolean;\n  dataCriacao: Date;\n  ultimaAtualizacao: Date;\n  ultimoDisparo?: Date;\n}\n\n/**\n * Schema de validação para formulário de webhook\n */\nconst webhookSchema = z.object({\n  nome: z.string().min(3, 'Nome deve ter pelo menos 3 caracteres'),\n  url: z.string().url('URL deve ser válida'),\n  eventos: z.array(z.string()).min(1, 'Selecione pelo menos um evento'),\n  ativo: z.boolean(),\n});\n\ntype WebhookFormData = z.infer<typeof webhookSchema>;\n\n/**\n * Componente principal de configuração de webhooks\n */\nexport function WebhookSettings() {\n  const { toast } = useToast();\n  \n  // Estados\n  const [webhooks, setWebhooks] = useState<ConfiguracaoWebhook[]>([\n    {\n      id: '1',\n      nome: 'Zapier - Novos Leads',\n      url: 'https://hooks.zapier.com/hooks/catch/123456/abc123/',\n      eventos: ['novo_lead', 'oportunidade_criada'],\n      ativo: true,\n      dataCriacao: new Date('2024-01-15'),\n      ultimaAtualizacao: new Date('2024-01-20'),\n      ultimoDisparo: new Date('2024-01-25T10:30:00'),\n    },\n    {\n      id: '2',\n      nome: 'Make.com - Vendas Fechadas',\n      url: 'https://hook.integromat.com/abc123def456',\n      eventos: ['venda_fechada'],\n      ativo: false,\n      dataCriacao: new Date('2024-01-10'),\n      ultimaAtualizacao: new Date('2024-01-15'),\n    },\n  ]);\n  \n  const [editandoId, setEditandoId] = useState<string | null>(null);\n  const [mostrarFormulario, setMostrarFormulario] = useState(false);\n\n  // Eventos disponíveis para webhook\n  const eventosDisponiveis = [\n    { id: 'novo_lead', nome: 'Novo Lead Criado' },\n    { id: 'oportunidade_criada', nome: 'Oportunidade Criada' },\n    { id: 'oportunidade_atualizada', nome: 'Oportunidade Atualizada' },\n    { id: 'venda_fechada', nome: 'Venda Fechada' },\n    { id: 'cliente_criado', nome: 'Cliente Criado' },\n    { id: 'tarefa_criada', nome: 'Tarefa Criada' },\n  ];\n\n  // Formulário\n  const form = useForm<WebhookFormData>({\n    resolver: zodResolver(webhookSchema),\n    defaultValues: {\n      nome: '',\n      url: '',\n      eventos: [],\n      ativo: true,\n    },\n  });\n\n  /**\n   * Submete o formulário de webhook\n   */\n  const onSubmit = (data: WebhookFormData) => {\n    try {\n      if (editandoId) {\n        // Atualizar webhook existente\n        setWebhooks(prev => prev.map(webhook => \n          webhook.id === editandoId \n            ? { \n                ...webhook, \n                nome: data.nome,\n                url: data.url,\n                eventos: data.eventos,\n                ativo: data.ativo,\n                ultimaAtualizacao: new Date() \n              }\n            : webhook\n        ));\n        \n        toast({\n          title: \"Webhook atualizado\",\n          description: \"As configurações foram salvas com sucesso.\",\n        });\n      } else {\n        // Criar novo webhook\n        const novoWebhook: ConfiguracaoWebhook = {\n          id: Date.now().toString(),\n          nome: data.nome,\n          url: data.url,\n          eventos: data.eventos,\n          ativo: data.ativo,\n          dataCriacao: new Date(),\n          ultimaAtualizacao: new Date(),\n        };\n        \n        setWebhooks(prev => [...prev, novoWebhook]);\n        \n        toast({\n          title: \"Webhook criado\",\n          description: \"Nova configuração de webhook foi adicionada.\",\n        });\n      }\n      \n      // Reset do formulário\n      form.reset();\n      setEditandoId(null);\n      setMostrarFormulario(false);\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível salvar as configurações.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  /**\n   * Inicia edição de webhook\n   */\n  const iniciarEdicao = (webhook: ConfiguracaoWebhook) => {\n    setEditandoId(webhook.id);\n    setMostrarFormulario(true);\n    form.reset({\n      nome: webhook.nome,\n      url: webhook.url,\n      eventos: webhook.eventos,\n      ativo: webhook.ativo,\n    });\n  };\n\n  /**\n   * Remove webhook\n   */\n  const removerWebhook = (id: string) => {\n    setWebhooks(prev => prev.filter(webhook => webhook.id !== id));\n    toast({\n      title: \"Webhook removido\",\n      description: \"A configuração foi excluída com sucesso.\",\n    });\n  };\n\n  /**\n   * Alterna status ativo/inativo do webhook\n   */\n  const alternarStatus = (id: string) => {\n    setWebhooks(prev => prev.map(webhook => \n      webhook.id === id \n        ? { ...webhook, ativo: !webhook.ativo, ultimaAtualizacao: new Date() }\n        : webhook\n    ));\n  };\n\n  /**\n   * Testa webhook enviando requisição\n   */\n  const testarWebhook = async (webhook: ConfiguracaoWebhook) => {\n    try {\n      const response = await fetch(webhook.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        mode: 'no-cors',\n        body: JSON.stringify({\n          evento: 'teste',\n          timestamp: new Date().toISOString(),\n          origem: 'VisionCRM',\n          dados: {\n            teste: true,\n            webhook_id: webhook.id,\n          },\n        }),\n      });\n\n      // Atualizar último disparo\n      setWebhooks(prev => prev.map(w => \n        w.id === webhook.id \n          ? { ...w, ultimoDisparo: new Date() }\n          : w\n      ));\n\n      toast({\n        title: \"Teste enviado\",\n        description: \"O webhook de teste foi disparado com sucesso.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro no teste\",\n        description: \"Não foi possível enviar o teste para o webhook.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  /**\n   * Formata data para exibição\n   */\n  const formatarData = (data: Date) => {\n    return new Intl.DateTimeFormat('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Configuração de Webhooks</h2>\n          <p className=\"text-muted-foreground\">\n            Configure URLs de webhook para integrar com Zapier, Make.com e outras plataformas.\n          </p>\n        </div>\n        <Button onClick={() => setMostrarFormulario(true)}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Novo Webhook\n        </Button>\n      </div>\n\n      {/* Formulário de criação/edição */}\n      {mostrarFormulario && (\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {editandoId ? 'Editar Webhook' : 'Novo Webhook'}\n            </CardTitle>\n            <CardDescription>\n              Configure os detalhes do webhook para integração externa.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nome\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Webhook</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Ex: Zapier - Novos Leads\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        Um nome descritivo para identificar este webhook.\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"url\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>URL do Webhook</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"https://hooks.zapier.com/hooks/catch/...\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormDescription>\n                        URL fornecida pela plataforma de integração (Zapier, Make.com, etc).\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"eventos\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Eventos que Disparam o Webhook</FormLabel>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {eventosDisponiveis.map((evento) => (\n                          <div key={evento.id} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id={evento.id}\n                              checked={field.value.includes(evento.id)}\n                              onChange={(e) => {\n                                const novoEventos = e.target.checked\n                                  ? [...field.value, evento.id]\n                                  : field.value.filter(id => id !== evento.id);\n                                field.onChange(novoEventos);\n                              }}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <Label htmlFor={evento.id} className=\"text-sm\">\n                              {evento.nome}\n                            </Label>\n                          </div>\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"ativo\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Webhook Ativo</FormLabel>\n                        <FormDescription>\n                          Quando ativo, o webhook será disparado automaticamente.\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setMostrarFormulario(false);\n                      setEditandoId(null);\n                      form.reset();\n                    }}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\">\n                    {editandoId ? 'Atualizar' : 'Criar'} Webhook\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Lista de webhooks */}\n      <div className=\"space-y-4\">\n        {webhooks.map((webhook) => (\n          <Card key={webhook.id}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <h3 className=\"font-medium\">{webhook.nome}</h3>\n                    <Badge variant={webhook.ativo ? \"default\" : \"secondary\"}>\n                      {webhook.ativo ? 'Ativo' : 'Inativo'}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                    <Link className=\"h-4 w-4\" />\n                    <span className=\"font-mono\">{webhook.url}</span>\n                  </div>\n                  \n                  <div className=\"flex flex-wrap gap-1\">\n                    {webhook.eventos.map((eventoId) => {\n                      const evento = eventosDisponiveis.find(e => e.id === eventoId);\n                      return (\n                        <Badge key={eventoId} variant=\"outline\" className=\"text-xs\">\n                          {evento?.nome || eventoId}\n                        </Badge>\n                      );\n                    })}\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground space-y-1\">\n                    <div>Criado em: {formatarData(webhook.dataCriacao)}</div>\n                    <div>Última atualização: {formatarData(webhook.ultimaAtualizacao)}</div>\n                    {webhook.ultimoDisparo && (\n                      <div>Último disparo: {formatarData(webhook.ultimoDisparo)}</div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={webhook.ativo}\n                    onCheckedChange={() => alternarStatus(webhook.id)}\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => testarWebhook(webhook)}\n                  >\n                    <Globe className=\"h-4 w-4 mr-1\" />\n                    Testar\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => iniciarEdicao(webhook)}\n                  >\n                    Editar\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => removerWebhook(webhook.id)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n        \n        {webhooks.length === 0 && (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"space-y-2\">\n                <h3 className=\"font-medium\">Nenhum webhook configurado</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Adicione seu primeiro webhook para começar a integrar com plataformas externas.\n                </p>\n                <Button onClick={() => setMostrarFormulario(true)}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Criar Primeiro Webhook\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":16145},"src/components/layout/AppLayout.tsx":{"content":"\n/**\n * Componente de layout principal da aplicação\n * Gerencia a estrutura básica da interface, incluindo cabeçalho, barra lateral e área de conteúdo\n * Implementa visualização responsiva para dispositivos móveis\n */\nimport React, { useState, useEffect } from 'react';\nimport { Sidebar } from './Sidebar';\nimport { Toaster } from '@/components/ui/toaster';\nimport { Toaster as Sonner } from '@/components/ui/sonner';\nimport Header from './Header';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport { useIsMobile } from '@/hooks/use-mobile';\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\n/**\n * Renderiza o layout principal da aplicação\n * @param children - Conteúdo principal a ser renderizado dentro do layout\n */\nconst AppLayout: React.FC<AppLayoutProps> = ({ children }) => {\n  const isMobile = useIsMobile(); // Detecta se é dispositivo móvel\n  const [sidebarOpen, setSidebarOpen] = useState(!isMobile); // Inicialmente fecha em dispositivos móveis\n\n  /**\n   * Efeito para ajustar automaticamente o estado da barra lateral quando muda de desktop para móvel ou vice-versa\n   */\n  useEffect(() => {\n    if (isMobile) {\n      setSidebarOpen(false); // Fecha automaticamente em dispositivos móveis\n    }\n  }, [isMobile]);\n\n  /**\n   * Alterna a visibilidade da barra lateral\n   */\n  const alternarSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n\n  /**\n   * Fecha a sidebar quando um item é clicado (para móvel)\n   */\n  const fecharSidebar = () => {\n    if (isMobile) {\n      setSidebarOpen(false);\n    }\n  };\n\n  return (\n    <ThemeProvider>\n      <div className=\"min-h-screen flex flex-col bg-background relative\">\n        {/* Simplified background */}\n        <div className=\"fixed inset-0 pointer-events-none z-0\">\n          <div className=\"absolute top-20 right-20 w-96 h-96 bg-primary/5 rounded-full blur-3xl opacity-50\"></div>\n          <div className=\"absolute bottom-20 left-20 w-64 h-64 bg-muted/30 rounded-full blur-2xl opacity-30\"></div>\n        </div>\n        \n        <Header toggleSidebar={alternarSidebar} />\n        <div className=\"flex flex-1 overflow-hidden relative z-10\">\n          {/* Overlay para dispositivos móveis */}\n          {sidebarOpen && isMobile && (\n            <div\n              className=\"fixed inset-0 bg-black/50 z-20 md:hidden\"\n              onClick={fecharSidebar}\n            />\n          )}\n          \n          <Sidebar isOpen={sidebarOpen} onItemClick={fecharSidebar} />\n          <main \n            className={`\n              flex-1 overflow-auto transition-all duration-500 ease-in-out\n              ${sidebarOpen && !isMobile ? 'md:pl-72' : ''}\n              ${isMobile ? 'p-4' : 'p-6'}\n            `}\n          >\n            <div className={`container mx-auto ${isMobile ? 'px-2' : 'px-4'}`}>\n              <div className={`bg-card/50 backdrop-blur-sm border border-border/50 rounded-xl min-h-[calc(100vh-200px)] shadow-sm ${isMobile ? 'p-4' : 'p-6'}`}>\n                {children}\n              </div>\n            </div>\n          </main>\n        </div>\n        <Toaster />\n        <Sonner />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default AppLayout;\n","size_bytes":3166},"src/components/layout/Footer.tsx":{"content":"\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer className=\"bg-muted/50 border-t\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"text-xl font-bold mb-4\">\n              <span className=\"text-foreground\">Vision</span>\n              <span className=\"text-primary\">CRM</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              A plataforma de CRM que impulsiona suas vendas e acelera o crescimento do seu negócio.\n            </p>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Produto</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link to=\"/features\" className=\"text-muted-foreground hover:text-primary\">\n                  Recursos\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/plans\" className=\"text-muted-foreground hover:text-primary\">\n                  Planos\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/integrations\" className=\"text-muted-foreground hover:text-primary\">\n                  Integrações\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/api\" className=\"text-muted-foreground hover:text-primary\">\n                  API\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Empresa</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link to=\"/about\" className=\"text-muted-foreground hover:text-primary\">\n                  Sobre\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/blog\" className=\"text-muted-foreground hover:text-primary\">\n                  Blog\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/careers\" className=\"text-muted-foreground hover:text-primary\">\n                  Carreiras\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/contact\" className=\"text-muted-foreground hover:text-primary\">\n                  Contato\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Suporte</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link to=\"/help\" className=\"text-muted-foreground hover:text-primary\">\n                  Central de Ajuda\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/docs\" className=\"text-muted-foreground hover:text-primary\">\n                  Documentação\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/status\" className=\"text-muted-foreground hover:text-primary\">\n                  Status\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/security\" className=\"text-muted-foreground hover:text-primary\">\n                  Segurança\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"text-sm text-muted-foreground\">\n            © 2024 VisionCRM. Todos os direitos reservados.\n          </div>\n          <div className=\"flex space-x-4 mt-4 md:mt-0\">\n            <Link to=\"/privacy\" className=\"text-sm text-muted-foreground hover:text-primary\">\n              Privacidade\n            </Link>\n            <Link to=\"/terms\" className=\"text-sm text-muted-foreground hover:text-primary\">\n              Termos\n            </Link>\n            <Link to=\"/cookies\" className=\"text-sm text-muted-foreground hover:text-primary\">\n              Cookies\n            </Link>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n","size_bytes":4087},"src/components/layout/Header.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Menu, Search, Bell, Sun, Moon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\n\ninterface HeaderProps {\n  toggleSidebar: () => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({ toggleSidebar }) => {\n  const { theme, toggleTheme } = useTheme();\n  const [searchValue, setSearchValue] = useState('');\n\n  return (\n    <header className=\"sticky top-0 z-40 h-16 glass-card border-b border-white/20 dark:border-gray-700/20 flex items-center justify-between px-4 md:px-6 sparkle-effect\">\n      <div className=\"flex items-center\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={toggleSidebar}\n          className=\"mr-2 glass-button hover-fix interactive-element\"\n          aria-label=\"Toggle sidebar\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n        \n        <div className=\"text-xl font-bold text-primary hidden md:flex items-center animate-fade-in\">\n          <span className=\"text-foreground\">Vision</span>\n          <span className=\"text-primary animated-gradient bg-clip-text text-transparent\">CRM</span>\n        </div>\n      </div>\n      \n      <div className=\"flex-1 max-w-md mx-4 slide-up\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground z-10\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Buscar clientes, tarefas, oportunidades...\"\n            className=\"pl-9 glass-card border-white/30 dark:border-gray-600/30 focus:ring-2 focus:ring-primary/50 hover-fix interactive-element\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n          />\n        </div>\n      </div>\n      \n      <div className=\"flex items-center space-x-1\">\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"relative glass-button hover-fix interactive-element\"\n            >\n              <Bell className=\"h-5 w-5\" />\n              <span className=\"absolute -top-1 -right-1 bg-primary text-white text-xs rounded-full w-4 h-4 flex items-center justify-center glow-effect floating-element\">\n                2\n              </span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-80 glass-card morphing-border fade-in-scale\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-sm\">Notificações</h4>\n              <div className=\"divide-y divide-border/50\">\n                <div className=\"py-2 hover-fix interactive-element rounded px-2\">\n                  <p className=\"text-sm font-medium\">Nova tarefa atribuída</p>\n                  <p className=\"text-xs text-muted-foreground\">Há 5 minutos</p>\n                </div>\n                <div className=\"py-2 hover-fix interactive-element rounded px-2\">\n                  <p className=\"text-sm font-medium\">Proposta aceita</p>\n                  <p className=\"text-xs text-muted-foreground\">Há 30 minutos</p>\n                </div>\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n        \n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={toggleTheme}\n          aria-label=\"Toggle theme\"\n          className=\"glass-button hover-fix interactive-element\"\n        >\n          {theme === 'dark' ? \n            <Sun className=\"h-5 w-5 animate-[spin_2s_linear_infinite]\" /> : \n            <Moon className=\"h-5 w-5\" />\n          }\n        </Button>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","size_bytes":3869},"src/components/layout/Navbar.tsx":{"content":"\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\nexport const Navbar: React.FC = () => {\n  const location = useLocation();\n\n  const isActive = (path: string) => location.pathname === path;\n\n  return (\n    <nav className=\"glass-card border-b border-white/20 dark:border-gray-700/20 sparkle-effect\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex h-16 items-center justify-between\">\n          <Link \n            to=\"/\" \n            className=\"flex items-center space-x-2 interactive-element group\"\n          >\n            <div className=\"text-2xl font-bold\">\n              <span className=\"text-foreground group-hover:scale-105 transition-transform inline-block\">Vision</span>\n              <span className=\"text-primary animated-gradient bg-clip-text text-transparent group-hover:scale-105 transition-transform inline-block\">CRM</span>\n            </div>\n          </Link>\n\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link \n              to=\"/\" \n              className={cn(\n                \"text-sm font-medium transition-all duration-300 interactive-element relative group\",\n                isActive('/') ? \"text-primary glow-effect\" : \"text-muted-foreground hover:text-primary\"\n              )}\n            >\n              Início\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </Link>\n            <Link \n              to=\"/plans\" \n              className={cn(\n                \"text-sm font-medium transition-all duration-300 interactive-element relative group\",\n                isActive('/plans') ? \"text-primary glow-effect\" : \"text-muted-foreground hover:text-primary\"\n              )}\n            >\n              Planos\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </Link>\n            <Link \n              to=\"/contact\" \n              className={cn(\n                \"text-sm font-medium transition-all duration-300 interactive-element relative group\",\n                isActive('/contact') ? \"text-primary glow-effect\" : \"text-muted-foreground hover:text-primary\"\n              )}\n            >\n              Contato\n              <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-primary transition-all duration-300 group-hover:w-full\"></span>\n            </Link>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"ghost\" \n              asChild \n              className=\"glass-button hover-fix interactive-element\"\n            >\n              <Link to=\"/login\">Login</Link>\n            </Button>\n            <Button \n              asChild \n              className=\"shine-effect interactive-element morphing-border glass-button\"\n            >\n              <Link to=\"/register\">Registrar</Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","size_bytes":3140},"src/components/layout/Sidebar.tsx":{"content":"\n/**\n * Componente da barra lateral de navegação\n * Fornece navegação principal do aplicativo VisionCRM com suporte para exibição em dispositivos móveis\n */\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport {\n  LayoutDashboard,\n  Users,\n  ClipboardCheck,\n  LineChart,\n  Settings,\n  Calendar,\n  BadgeDollarSign,\n  CreditCard,\n  Webhook,\n  MessageCircle,\n  LogOut\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onItemClick?: () => void;\n}\n\n/**\n * Renderiza a barra lateral com opções de navegação\n * @param isOpen - Indica se a barra lateral está expandida ou recolhida\n */\nexport const Sidebar: React.FC<SidebarProps> = ({ isOpen, onItemClick }) => {\n  const itensMenu = [\n    { nome: 'Dashboard', caminho: '/dashboard', Icone: LayoutDashboard },\n    { nome: 'Clientes', caminho: '/clients', Icone: Users },\n    { nome: 'Vendas', caminho: '/sales', Icone: BadgeDollarSign },\n    { nome: 'Tarefas', caminho: '/tasks', Icone: ClipboardCheck },\n    { nome: 'Chat', caminho: '/chat', Icone: MessageCircle },\n    { nome: 'Agenda', caminho: '/calendar', Icone: Calendar },\n    { nome: 'Relatórios', caminho: '/reports', Icone: LineChart },\n    { nome: 'Integrações', caminho: '/integrations', Icone: Webhook },\n    { nome: 'Assinatura', caminho: '/subscription', Icone: CreditCard },\n    { nome: 'Configurações', caminho: '/settings', Icone: Settings },\n  ];\n\n  return (\n    <aside\n      className={cn(\n        'fixed left-0 top-16 h-[calc(100vh-64px)] z-40 transition-all duration-500 transform glass-card border-r border-white/20 dark:border-gray-700/20',\n        isOpen ? 'w-64' : 'w-16 md:w-16 -translate-x-full md:translate-x-0'\n      )}\n    >\n      <nav className=\"flex flex-col p-2 h-full\">\n        <ul className=\"space-y-2 flex-1\">\n          {itensMenu.map((item, index) => (\n            <li \n              key={item.nome} \n              style={{ animationDelay: `${index * 0.1}s` }} \n              className=\"slide-up\"\n            >\n              <NavLink\n                to={item.caminho}\n                onClick={onItemClick}\n                className={({ isActive }) => cn(\n                  'flex items-center px-3 py-3 rounded-lg transition-colors duration-300 group relative overflow-hidden',\n                  isActive \n                    ? 'bg-primary/20 text-primary backdrop-blur-sm' \n                    : 'text-sidebar-foreground hover:bg-accent/50',\n                  !isOpen && 'justify-center md:justify-center'\n                )}\n              >\n                <item.Icone className={cn(\n                  'h-5 w-5 transition-colors duration-300', \n                  !isOpen && 'md:mx-auto'\n                )} />\n                {isOpen && (\n                  <span className=\"ml-3 truncate relative z-10 font-medium\">\n                    {item.nome}\n                  </span>\n                )}\n              </NavLink>\n            </li>\n          ))}\n        </ul>\n        \n        <div className=\"mt-auto border-t border-white/20 dark:border-gray-700/20 pt-4 flex flex-col gap-2\">\n          <div className=\"flex items-center px-3 py-3 text-sm text-sidebar-foreground glass-card rounded-lg\">\n            {isOpen ? (\n              <>\n                <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center text-white font-bold text-lg\">\n                  A\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"font-semibold\">Admin User</p>\n                  <p className=\"text-xs opacity-70\">Administrador</p>\n                </div>\n              </>\n            ) : (\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center text-white mx-auto font-bold text-lg\">\n                A\n              </div>\n            )}\n          </div>\n          \n          {/* Botão de Logout */}\n          <NavLink\n            to=\"/\"\n            onClick={onItemClick}\n            className={cn(\n              'flex items-center px-3 py-3 rounded-lg transition-colors duration-300 text-destructive hover:bg-destructive/10 glass-card',\n              !isOpen && 'justify-center'\n            )}\n          >\n            <LogOut className={cn('h-5 w-5', !isOpen && 'mx-auto')} />\n            {isOpen && <span className=\"ml-3 font-medium\">Sair</span>}\n          </NavLink>\n        </div>\n      </nav>\n    </aside>\n  );\n};\n","size_bytes":4492},"src/components/reports/ClientStatusChart.tsx":{"content":"\n/**\n * Gráfico de Análise de Clientes Ativos vs Inativos\n * Exibe distribuição e evolução da base de clientes\n */\nimport React from \"react\";\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\nconst data = [\n  {\n    name: \"Jan\",\n    ativos: 620,\n    inativos: 120,\n  },\n  {\n    name: \"Fev\",\n    ativos: 632,\n    inativos: 130,\n  },\n  {\n    name: \"Mar\",\n    ativos: 645,\n    inativos: 135,\n  },\n  {\n    name: \"Abr\",\n    ativos: 660,\n    inativos: 142,\n  },\n  {\n    name: \"Mai\",\n    ativos: 680,\n    inativos: 138,\n  },\n  {\n    name: \"Jun\",\n    ativos: 695,\n    inativos: 135,\n  },\n  {\n    name: \"Jul\",\n    ativos: 710,\n    inativos: 130,\n  },\n  {\n    name: \"Ago\",\n    ativos: 725,\n    inativos: 128,\n  },\n  {\n    name: \"Set\",\n    ativos: 742,\n    inativos: 125,\n  },\n  {\n    name: \"Out\",\n    ativos: 756,\n    inativos: 120,\n  },\n  {\n    name: \"Nov\",\n    ativos: 763,\n    inativos: 118,\n  },\n];\n\n/**\n * Componente de visualização da análise de status dos clientes\n */\nexport function ClientStatusChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Area type=\"monotone\" dataKey=\"ativos\" name=\"Clientes Ativos\" stackId=\"1\" stroke=\"#22c55e\" fill=\"#22c55e\" fillOpacity={0.5} />\n        <Area type=\"monotone\" dataKey=\"inativos\" name=\"Clientes Inativos\" stackId=\"1\" stroke=\"#ef4444\" fill=\"#ef4444\" fillOpacity={0.5} />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":1756},"src/components/reports/ConversionRateChart.tsx":{"content":"\n/**\n * Gráfico de Taxa de Conversão por Etapa\n * Exibe a conversão entre etapas do funil de vendas\n */\nimport React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\n\nconst data = [\n  {\n    name: \"Lead → Contato\",\n    taxa: 68,\n  },\n  {\n    name: \"Contato → Proposta\",\n    taxa: 52,\n  },\n  {\n    name: \"Proposta → Negociação\",\n    taxa: 43,\n  },\n  {\n    name: \"Negociação → Fechamento\",\n    taxa: 36,\n  },\n  {\n    name: \"Fechamento → Ganho\",\n    taxa: 24,\n  },\n];\n\n/**\n * Componente de visualização da taxa de conversão entre etapas\n */\nexport function ConversionRateChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <BarChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" fontSize={12} tickMargin={10} />\n        <YAxis tickFormatter={(value) => `${value}%`} />\n        <Tooltip formatter={(value) => [`${value}%`, \"Taxa de Conversão\"]} />\n        <Legend />\n        <Bar dataKey=\"taxa\" name=\"Taxa de Conversão (%)\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":1303},"src/components/reports/MonthlyPerformanceChart.tsx":{"content":"\n/**\n * Gráfico de Comparativo de Desempenho Mensal\n * Exibe performance de vendas comparando os últimos meses\n */\nimport React from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\nconst data = [\n  {\n    name: \"Jan\",\n    atual: 42,\n    anterior: 32,\n  },\n  {\n    name: \"Fev\",\n    atual: 48,\n    anterior: 38,\n  },\n  {\n    name: \"Mar\",\n    atual: 55,\n    anterior: 45,\n  },\n  {\n    name: \"Abr\",\n    atual: 49,\n    anterior: 52,\n  },\n  {\n    name: \"Mai\",\n    atual: 58,\n    anterior: 47,\n  },\n  {\n    name: \"Jun\",\n    atual: 62,\n    anterior: 51,\n  },\n  {\n    name: \"Jul\",\n    atual: 68,\n    anterior: 54,\n  },\n  {\n    name: \"Ago\",\n    atual: 72,\n    anterior: 59,\n  },\n  {\n    name: \"Set\",\n    atual: 75,\n    anterior: 62,\n  },\n  {\n    name: \"Out\",\n    atual: 82,\n    anterior: 68,\n  },\n  {\n    name: \"Nov\",\n    atual: 87,\n    anterior: 71,\n  },\n  {\n    name: \"Dez\",\n    atual: 92,\n    anterior: 78,\n  },\n];\n\n/**\n * Componente de visualização comparativa do desempenho mensal\n */\nexport function MonthlyPerformanceChart() {\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <LineChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip formatter={(value) => [`${value} vendas`, \"\"]} />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"atual\" name=\"Ano Atual\" stroke=\"#3b82f6\" strokeWidth={2} dot={{ r: 4 }} activeDot={{ r: 6 }} />\n        <Line type=\"monotone\" dataKey=\"anterior\" name=\"Ano Anterior\" stroke=\"#9ca3af\" strokeWidth={2} dot={{ r: 4 }} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":1810},"src/components/reports/MrrChart.tsx":{"content":"\n/**\n * Gráfico de Receita Recorrente Mensal (MRR)\n * Exibe evolução da receita recorrente ao longo do tempo\n */\nimport React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\ninterface MrrChartProps {\n  detailed?: boolean;\n}\n\nconst simpleData = [\n  { name: \"Jan\", valor: 180500 },\n  { name: \"Fev\", valor: 185200 },\n  { name: \"Mar\", valor: 190800 },\n  { name: \"Abr\", valor: 198400 },\n  { name: \"Mai\", valor: 205600 },\n  { name: \"Jun\", valor: 212800 },\n  { name: \"Jul\", valor: 218500 },\n  { name: \"Ago\", valor: 225300 },\n  { name: \"Set\", valor: 232100 },\n  { name: \"Out\", valor: 238900 },\n  { name: \"Nov\", valor: 248500 },\n];\n\nconst detailedData = [\n  {\n    name: \"Jan\",\n    basicPlus: 65800,\n    professional: 85700,\n    enterprise: 29000,\n  },\n  {\n    name: \"Fev\",\n    basicPlus: 67200,\n    professional: 86500,\n    enterprise: 31500,\n  },\n  {\n    name: \"Mar\",\n    basicPlus: 68600,\n    professional: 88700,\n    enterprise: 33500,\n  },\n  {\n    name: \"Abr\",\n    basicPlus: 70200,\n    professional: 91200,\n    enterprise: 37000,\n  },\n  {\n    name: \"Mai\",\n    basicPlus: 72800,\n    professional: 93300,\n    enterprise: 39500,\n  },\n  {\n    name: \"Jun\",\n    basicPlus: 75500,\n    professional: 94800,\n    enterprise: 42500,\n  },\n  {\n    name: \"Jul\",\n    basicPlus: 77200,\n    professional: 96300,\n    enterprise: 45000,\n  },\n  {\n    name: \"Ago\",\n    basicPlus: 79800,\n    professional: 98500,\n    enterprise: 47000,\n  },\n  {\n    name: \"Set\",\n    basicPlus: 81500,\n    professional: 100600,\n    enterprise: 50000,\n  },\n  {\n    name: \"Out\",\n    basicPlus: 83200,\n    professional: 102700,\n    enterprise: 53000,\n  },\n  {\n    name: \"Nov\",\n    basicPlus: 86500,\n    professional: 105000,\n    enterprise: 57000,\n  },\n];\n\n/**\n * Componente de visualização da receita recorrente mensal\n * @param detailed - Exibe visão detalhada por plano quando true\n */\nexport function MrrChart({ detailed = false }: MrrChartProps) {\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(value);\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={detailed ? 400 : 350}>\n      {!detailed ? (\n        <BarChart\n          data={simpleData}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis tickFormatter={(value) => `R$${value/1000}k`} />\n          <Tooltip formatter={(value: number) => [formatCurrency(value), \"MRR\"]} />\n          <Legend />\n          <Bar dataKey=\"valor\" name=\"Receita Mensal\" fill=\"#8884d8\" radius={[4, 4, 0, 0]} />\n        </BarChart>\n      ) : (\n        <BarChart\n          data={detailedData}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis tickFormatter={(value) => `R$${value/1000}k`} />\n          <Tooltip formatter={(value: number) => [formatCurrency(value), \"\"]} />\n          <Legend />\n          <Bar dataKey=\"basicPlus\" name=\"Plano Básico+\" stackId=\"a\" fill=\"#4ade80\" radius={[4, 4, 0, 0]} />\n          <Bar dataKey=\"professional\" name=\"Plano Profissional\" stackId=\"a\" fill=\"#3b82f6\" />\n          <Bar dataKey=\"enterprise\" name=\"Plano Enterprise\" stackId=\"a\" fill=\"#8b5cf6\" />\n        </BarChart>\n      )}\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":3584},"src/components/sales/KanbanBoard.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport type { DropResult } from \"@hello-pangea/dnd\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Plus,\n  Calendar,\n  DollarSign,\n  User,\n  Users,\n  Send,\n  Handshake,\n  Trophy,\n  XCircle,\n  Edit2,\n  Trash2,\n} from \"lucide-react\";\nimport { NewOpportunityDialog } from \"./NewOpportunityDialog\";\nimport {\n  buscarOportunidades,\n  atualizarOportunidade,\n  excluirOportunidade,\n  buscarClientes,\n} from \"@/services/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Oportunidade {\n  id: string;\n  titulo: string;\n  descricao: string;\n  valor: number;\n  status: string;\n  probabilidade: number;\n  dataPrevisao?: string;\n  cliente: {\n    id: string;\n    nome: string;\n    nomeEmpresa?: string;\n    empresa?: { nome: string };\n  };\n  usuario: {\n    id?: string;\n    nome: string;\n  };\n  createdAt: string;\n}\n\ninterface Cliente {\n  id: string;\n  nome: string;\n  nomeEmpresa?: string;\n}\n\nconst etapasComerciais = [\n  { id: \"LEAD\", nome: \"Lead Recebido\", icone: Users, cor: \"bg-blue-500\" },\n  { id: \"QUALIFICADO\", nome: \"Qualificado\", icone: User, cor: \"bg-indigo-500\" },\n  { id: \"PROPOSTA\", nome: \"Proposta\", icone: Send, cor: \"bg-purple-500\" },\n  {\n    id: \"NEGOCIACAO\",\n    nome: \"Negociação\",\n    icone: Handshake,\n    cor: \"bg-yellow-500\",\n  },\n  { id: \"GANHO\", nome: \"Ganho\", icone: Trophy, cor: \"bg-green-500\" },\n  { id: \"PERDIDO\", nome: \"Perdido\", icone: XCircle, cor: \"bg-red-500\" },\n] as const;\n\nexport const KanbanBoard: React.FC = () => {\n  const [oportunidades, setOportunidades] = useState<\n    Record<string, Oportunidade[]>\n  >({});\n  const [dialogAberto, setDialogAberto] = useState(false);\n  const [clientes, setClientes] = useState<Cliente[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [pipelines, setPipelines] = useState([\n    { id: \"1\", nome: \"Pipeline Principal\", ativo: true },\n    { id: \"2\", nome: \"Pipeline Produtos\", ativo: false },\n    { id: \"3\", nome: \"Pipeline Serviços\", ativo: false },\n  ]);\n  const [pipelineAtivo, setPipelineAtivo] = useState(\"1\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    carregarDados();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const carregarDados = async () => {\n    try {\n      setLoading(true);\n\n      const [oportunidadesData, clientesData] = await Promise.all([\n        buscarOportunidades(),\n        buscarClientes(),\n      ]);\n\n      const oportunidadesOrganizadas: Record<string, Oportunidade[]> = {};\n      etapasComerciais.forEach(\n        (etapa) => (oportunidadesOrganizadas[etapa.id] = []),\n      );\n\n      // Card de exemplo (não persiste)\n      oportunidadesOrganizadas[\"LEAD\"] = [\n        {\n          id: \"exemplo-1\",\n          titulo: \"Oportunidade de Exemplo\",\n          descricao: \"Descrição da oportunidade de exemplo para demonstração\",\n          valor: 15000,\n          status: \"LEAD\",\n          probabilidade: 20,\n          dataPrevisao: new Date(\n            Date.now() + 30 * 24 * 60 * 60 * 1000,\n          ).toISOString(),\n          cliente: {\n            id: \"cliente-exemplo\",\n            nome: \"Cliente Exemplo\",\n            nomeEmpresa: \"Empresa Exemplo\",\n          },\n          usuario: { id: \"user-exemplo\", nome: \"Vendedor Exemplo\" },\n          createdAt: new Date().toISOString(),\n        },\n      ];\n\n      if (Array.isArray(oportunidadesData)) {\n        oportunidadesData.forEach((o: any) => {\n          const status: string = o.status || \"LEAD\";\n          if (!oportunidadesOrganizadas[status]) return;\n\n          const oportunidadeMapeada: Oportunidade = {\n            id: String(o.id),\n            titulo: o.titulo,\n            descricao: o.descricao || \"\",\n            valor: Number(o.valor || 0),\n            status,\n            probabilidade: Number(o.probabilidade || 0),\n            dataPrevisao: o.dataPrevisao,\n            cliente: {\n              id: o.cliente?.id ? String(o.cliente.id) : \"\",\n              nome: o.cliente?.nome || \"Cliente não identificado\",\n              nomeEmpresa:\n                o.cliente?.nomeEmpresa || o.cliente?.empresa?.nome || \"\",\n              empresa: o.cliente?.empresa,\n            },\n            usuario: {\n              id: o.usuario?.id || o.usuarioId,\n              nome: o.usuario?.nome || \"Usuário não identificado\",\n            },\n            createdAt: o.createdAt || o.criadoEm || new Date().toISOString(),\n          };\n\n          oportunidadesOrganizadas[status].push(oportunidadeMapeada);\n        });\n      }\n\n      setOportunidades(oportunidadesOrganizadas);\n\n      // aceitar tanto array quanto { clientes: [] }\n      const listaClientes = Array.isArray(clientesData)\n        ? clientesData\n        : Array.isArray(clientesData?.clientes)\n          ? clientesData.clientes\n          : [];\n      setClientes(listaClientes);\n    } catch (error) {\n      console.error(\"Erro ao carregar dados:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar oportunidades\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const aoTerminarArrasto = async (resultado: DropResult) => {\n    const { destination, source, draggableId } = resultado;\n    if (!destination) return;\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    )\n      return;\n\n    try {\n      const origemLista = oportunidades[source.droppableId] || [];\n      const oportunidadeArrastada = origemLista.find(\n        (op) => op.id === draggableId,\n      );\n      if (!oportunidadeArrastada) return;\n\n      const novasOportunidades = structuredClone(oportunidades);\n\n      // remover da coluna origem\n      novasOportunidades[source.droppableId] = (\n        novasOportunidades[source.droppableId] || []\n      ).filter((op) => op.id !== draggableId);\n\n      // inserir na coluna destino na posição\n      const destinoLista = [\n        ...(novasOportunidades[destination.droppableId] || []),\n      ];\n      const oportunidadeAtualizada: Oportunidade = {\n        ...oportunidadeArrastada,\n        status: destination.droppableId,\n      };\n      destinoLista.splice(destination.index, 0, oportunidadeAtualizada);\n      novasOportunidades[destination.droppableId] = destinoLista;\n\n      setOportunidades(novasOportunidades);\n\n      if (draggableId !== \"exemplo-1\") {\n        await atualizarOportunidade(draggableId, {\n          status: destination.droppableId,\n        });\n      }\n\n      const etapaDestino = etapasComerciais.find(\n        (e) => e.id === destination.droppableId,\n      );\n      toast({\n        title: \"Oportunidade movida\",\n        description: `Movida para \"${etapaDestino?.nome}\" com sucesso`,\n      });\n    } catch (error) {\n      console.error(\"Erro ao mover oportunidade:\", error);\n      await carregarDados();\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao mover oportunidade. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const adicionarOportunidade = () => {\n    carregarDados();\n    setDialogAberto(false);\n  };\n\n  const excluirOportunidadeHandler = async (id: string) => {\n    if (confirm(\"Tem certeza que deseja excluir esta oportunidade?\")) {\n      try {\n        await excluirOportunidade(id);\n        await carregarDados();\n        toast({\n          title: \"Sucesso\",\n          description: \"Oportunidade excluída com sucesso\",\n        });\n      } catch (error) {\n        console.error(\"Erro ao excluir oportunidade:\", error);\n        toast({\n          title: \"Erro\",\n          description: \"Erro ao excluir oportunidade\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\" />\n          <p className=\"mt-2 text-muted-foreground\">\n            Carregando oportunidades...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Seletor de Pipeline */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border/50\">\n        <div className=\"flex items-center gap-4\">\n          <select\n            value={pipelineAtivo}\n            onChange={(e) => setPipelineAtivo(e.target.value)}\n            className=\"bg-background border border-border rounded-lg px-3 py-2 text-foreground\"\n          >\n            {pipelines.map((pipeline) => (\n              <option key={pipeline.id} value={pipeline.id}>\n                {pipeline.nome}\n              </option>\n            ))}\n          </select>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              const nome = prompt(\"Nome do novo pipeline:\");\n              if (nome) {\n                const novoId = String(pipelines.length + 1);\n                setPipelines([\n                  ...pipelines,\n                  { id: novoId, nome, ativo: false },\n                ]);\n              }\n            }}\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Novo Pipeline\n          </Button>\n        </div>\n        <Button onClick={() => setDialogAberto(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Nova Oportunidade\n        </Button>\n      </div>\n\n      <div className=\"flex-1 overflow-x-auto\">\n        <DragDropContext onDragEnd={aoTerminarArrasto}>\n          <div className=\"flex gap-4 p-4 min-w-max\">\n            {etapasComerciais.map((etapa) => {\n              const items = oportunidades[etapa.id] || [];\n              const IconeEtapa = etapa.icone;\n\n              const totalColuna = items.reduce(\n                (total, item) => total + (item.valor || 0),\n                0,\n              );\n              const mediaProb =\n                items.length > 0\n                  ? Math.round(\n                    items.reduce(\n                      (total, item) => total + (item.probabilidade || 0),\n                      0,\n                    ) / items.length,\n                  )\n                  : 0;\n\n              return (\n                <Droppable key={etapa.id} droppableId={etapa.id}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={`w-72 transition-all duration-200 ${snapshot.isDraggingOver\n                        ? 'bg-primary/5 rounded-lg ring-2 ring-primary/20'\n                        : ''\n                        }`}\n                    >\n                      <div className=\"glass-card rounded-lg p-3 mb-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <div\n                              className={`p-2 rounded-lg ${etapa.cor} bg-opacity-10`}\n                            >\n                              <IconeEtapa\n                                className={`h-4 w-4 ${etapa.cor.replace(\"bg-\", \"text-\")}`}\n                              />\n                            </div>\n                            <div>\n                              <h3 className=\"font-medium text-foreground text-sm\">\n                                {etapa.nome}\n                              </h3>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {totalColuna.toLocaleString(\"pt-BR\", {\n                                  style: \"currency\",\n                                  currency: \"BRL\",\n                                })}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col items-end gap-1\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {items.length}\n                            </Badge>\n                            {items.length > 0 && (\n                              <div className=\"text-xs text-muted-foreground\">\n                                Média: {mediaProb}%\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-3 h-[calc(100vh-200px)] overflow-y-auto\">\n                        {items.map((oportunidade, index) => (\n                          <Draggable\n                            key={oportunidade.id}\n                            draggableId={oportunidade.id}\n                            index={index}\n                          >\n                            {(prov, snap) => (\n                              <Card\n                                ref={prov.innerRef}\n                                {...prov.draggableProps}\n                                {...prov.dragHandleProps}\n                                className={`cursor-grab glass-card kanban-card transition-all duration-200 hover:shadow-md ${snap.isDragging\n                                  ? \"shadow-2xl opacity-95 ring-2 ring-primary/20 !z-[9999] rotate-2 scale-105\"\n                                  : \"hover:shadow-lg\"\n                                  }`}\n                                style={{\n                                  ...prov.draggableProps.style,\n                                }}\n                              >\n                                <CardHeader className=\"pb-2\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <CardTitle className=\"text-sm font-medium truncate\">\n                                      {oportunidade.titulo}\n                                    </CardTitle>\n                                    <div className=\"flex gap-1\">\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"icon\"\n                                        className=\"h-6 w-6\"\n                                      >\n                                        <Edit2 className=\"w-3 h-3\" />\n                                      </Button>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"icon\"\n                                        className=\"h-6 w-6\"\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          excluirOportunidadeHandler(\n                                            oportunidade.id,\n                                          );\n                                        }}\n                                      >\n                                        <Trash2 className=\"w-3 h-3 text-destructive\" />\n                                      </Button>\n                                    </div>\n                                  </div>\n                                </CardHeader>\n                                <CardContent className=\"pt-0\">\n                                  <p className=\"text-xs text-muted-foreground mb-3 line-clamp-2\">\n                                    {oportunidade.descricao}\n                                  </p>\n\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex items-center gap-2 text-xs\">\n                                      <DollarSign className=\"w-3 h-3 text-emerald-500\" />\n                                      <span className=\"font-medium text-emerald-600\">\n                                        {oportunidade.valor\n                                          ? oportunidade.valor.toLocaleString(\n                                            \"pt-BR\",\n                                            {\n                                              style: \"currency\",\n                                              currency: \"BRL\",\n                                            },\n                                          )\n                                          : \"R$ 0,00\"}\n                                      </span>\n                                    </div>\n\n                                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                                      <User className=\"w-3 h-3\" />\n                                      <span>{oportunidade.cliente.nome}</span>\n                                    </div>\n\n                                    {oportunidade.dataPrevisao && (\n                                      <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                                        <Calendar className=\"w-3 h-3\" />\n                                        <span>\n                                          {new Date(\n                                            oportunidade.dataPrevisao,\n                                          ).toLocaleDateString(\"pt-BR\")}\n                                        </span>\n                                      </div>\n                                    )}\n                                  </div>\n\n                                  <div className=\"mt-3 pt-3 border-t border-border/50\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <Badge\n                                        variant=\"outline\"\n                                        className=\"text-xs\"\n                                      >\n                                        {oportunidade.usuario.nome}\n                                      </Badge>\n                                      {!!oportunidade.probabilidade && (\n                                        <Badge\n                                          variant=\"secondary\"\n                                          className=\"text-xs\"\n                                        >\n                                          {oportunidade.probabilidade}%\n                                        </Badge>\n                                      )}\n                                    </div>\n                                  </div>\n                                </CardContent>\n                              </Card>\n                            )}\n                          </Draggable>\n                        ))}\n                        {provided.placeholder}\n                      </div>\n                    </div>\n                  )}\n                </Droppable>\n              );\n            })}\n          </div>\n        </DragDropContext>\n      </div>\n\n      <NewOpportunityDialog\n        open={dialogAberto}\n        onOpenChange={setDialogAberto}\n        onSubmit={adicionarOportunidade}\n        clientes={clientes}\n      />\n    </div>\n  );\n};\n","size_bytes":19144},"src/components/sales/NewOpportunityDialog.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { criarOportunidade, buscarDadosUsuario } from '@/services/api';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Cliente {\n  id: string;\n  nome: string;\n  nomeEmpresa?: string;\n}\n\ninterface NewOpportunityDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSubmit: (oportunidade: any) => void;\n  clientes: Cliente[];\n}\n\nexport const NewOpportunityDialog: React.FC<NewOpportunityDialogProps> = ({\n  open,\n  onOpenChange,\n  onSubmit,\n  clientes\n}) => {\n  const [formData, setFormData] = useState({\n    titulo: '',\n    descricao: '',\n    valor: '',\n    clienteId: '',\n    probabilidade: '',\n    dataFechamentoEsperada: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [usuarioAtual, setUsuarioAtual] = useState<any>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (open) {\n      carregarUsuario();\n    }\n  }, [open]);\n\n  const carregarUsuario = async () => {\n    try {\n      const userData = await buscarDadosUsuario();\n      setUsuarioAtual(userData);\n    } catch (error) {\n      console.error('Erro ao carregar dados do usuário:', error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!usuarioAtual) {\n      toast({\n        title: \"Erro\",\n        description: \"Dados do usuário não carregados\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const oportunidadeData = {\n        titulo: formData.titulo,\n        descricao: formData.descricao,\n        valor: parseFloat(formData.valor) || 0,\n        clienteId: formData.clienteId,\n        responsavelId: usuarioAtual.id,\n        estagio: 'LEAD',\n        probabilidade: parseInt(formData.probabilidade) || 0,\n        dataFechamentoEsperada: formData.dataFechamentoEsperada || null\n      };\n\n      await criarOportunidade(oportunidadeData);\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Oportunidade criada com sucesso\",\n      });\n\n      onSubmit(oportunidadeData);\n      \n      // Reset form\n      setFormData({\n        titulo: '',\n        descricao: '',\n        valor: '',\n        clienteId: '',\n        probabilidade: '',\n        dataFechamentoEsperada: ''\n      });\n    } catch (error) {\n      console.error('Erro ao criar oportunidade:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar oportunidade\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"glass-card animate-scale-in max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Nova Oportunidade</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"titulo\">Título</Label>\n            <Input\n              id=\"titulo\"\n              value={formData.titulo}\n              onChange={(e) => setFormData({ ...formData, titulo: e.target.value })}\n              required\n              className=\"glass-card\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"cliente\">Cliente</Label>\n            <Select\n              value={formData.clienteId}\n              onValueChange={(value) => setFormData({ ...formData, clienteId: value })}\n            >\n              <SelectTrigger className=\"glass-card\">\n                <SelectValue placeholder=\"Selecione um cliente\" />\n              </SelectTrigger>\n              <SelectContent>\n                {clientes.map((cliente) => (\n                  <SelectItem key={cliente.id} value={cliente.id}>\n                    {cliente.nome} {cliente.nomeEmpresa && `(${cliente.nomeEmpresa})`}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"valor\">Valor (R$)</Label>\n            <Input\n              id=\"valor\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.valor}\n              onChange={(e) => setFormData({ ...formData, valor: e.target.value })}\n              className=\"glass-card\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"probabilidade\">Probabilidade (%)</Label>\n            <Input\n              id=\"probabilidade\"\n              type=\"number\"\n              min=\"0\"\n              max=\"100\"\n              value={formData.probabilidade}\n              onChange={(e) => setFormData({ ...formData, probabilidade: e.target.value })}\n              className=\"glass-card\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"dataFechamentoEsperada\">Data de Fechamento Esperada</Label>\n            <Input\n              id=\"dataFechamentoEsperada\"\n              type=\"date\"\n              value={formData.dataFechamentoEsperada}\n              onChange={(e) => setFormData({ ...formData, dataFechamentoEsperada: e.target.value })}\n              className=\"glass-card\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"descricao\">Descrição</Label>\n            <Textarea\n              id=\"descricao\"\n              value={formData.descricao}\n              onChange={(e) => setFormData({ ...formData, descricao: e.target.value })}\n              className=\"glass-card\"\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancelar\n            </Button>\n            <Button type=\"submit\" disabled={loading} className=\"transition-all hover:scale-105\">\n              {loading ? 'Criando...' : 'Criar Oportunidade'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":6361},"src/components/settings/LanguageSettings.tsx":{"content":"\n/**\n * Componente para configuração de idioma\n * Permite ao usuário selecionar o idioma padrão da plataforma\n */\nimport React from 'react';\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { atualizarIdioma, buscarIdioma } from \"@/services/api\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Loader2, Globe } from \"lucide-react\";\n\n/**\n * Interface para opções de idioma\n */\ninterface OpcaoIdioma {\n  valor: string;\n  rotulo: string;\n}\n\n/**\n * Opções de idioma disponíveis\n */\nconst opcoesDeLinguagem: OpcaoIdioma[] = [\n  { valor: \"pt-BR\", rotulo: \"Português (Brasil)\" },\n  { valor: \"en-US\", rotulo: \"English (US)\" },\n];\n\n/**\n * Esquema de validação para o formulário de idioma\n */\nconst formSchema = z.object({\n  idioma: z.string({\n    required_error: \"Por favor selecione um idioma\",\n  }),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\n/**\n * Formulário para configuração de idioma\n */\nexport function LanguageSettings() {\n  // Busca configuração de idioma atual\n  const { data: idiomaAtual, isLoading } = useQuery({\n    queryKey: ['idioma-usuario'],\n    queryFn: buscarIdioma,\n  });\n\n  // Configuração do formulário\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      idioma: \"pt-BR\",\n    },\n    values: idiomaAtual ? { idioma: idiomaAtual.codigo } : undefined,\n  });\n\n  // Mutação para atualizar idioma\n  const mutation = useMutation({\n    mutationFn: (values: FormValues) => atualizarIdioma(values.idioma),\n    onSuccess: () => {\n      toast.success(\"Idioma atualizado com sucesso!\");\n    },\n    onError: () => {\n      toast.error(\"Erro ao atualizar idioma. Tente novamente.\");\n    },\n  });\n\n  /**\n   * Função para enviar o formulário\n   * @param values - Valores do formulário\n   */\n  function onSubmit(values: FormValues) {\n    mutation.mutate(values);\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center py-4\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"idioma\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Idioma padrão</FormLabel>\n              <div className=\"relative\">\n                <Globe className=\"absolute left-2 top-2.5 h-5 w-5 text-muted-foreground\" />\n                <FormControl>\n                  <Select \n                    onValueChange={field.onChange} \n                    defaultValue={field.value}\n                  >\n                    <SelectTrigger className=\"pl-9 w-full\">\n                      <SelectValue placeholder=\"Selecione um idioma\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {opcoesDeLinguagem.map((opcao) => (\n                        <SelectItem key={opcao.valor} value={opcao.valor}>\n                          {opcao.rotulo}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n              </div>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button \n          type=\"submit\" \n          className=\"w-full sm:w-auto\"\n          disabled={mutation.isPending}\n        >\n          {mutation.isPending ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Salvando...\n            </>\n          ) : \"Salvar preferência\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":4067},"src/components/settings/NotificationPreferences.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { buscarPreferenciasNotificacao, atualizarPreferenciasNotificacao } from '@/services/api';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n\ninterface PreferenciasNotificacao {\n  novosLeads: boolean;\n  oportunidadesAtualizadas: boolean;\n  lembretesTarefas: boolean;\n  emailMarketing: boolean;\n  notificacoesPush: boolean;\n}\n\nexport const NotificationPreferences: React.FC = () => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [preferencias, setPreferencias] = useState<PreferenciasNotificacao>({\n    novosLeads: true,\n    oportunidadesAtualizadas: true,\n    lembretesTarefas: true,\n    emailMarketing: false,\n    notificacoesPush: true\n  });\n\n  const { data: preferenciasDados } = useQuery({\n    queryKey: ['preferencias-notificacao'],\n    queryFn: buscarPreferenciasNotificacao\n  });\n\n  const mutationAtualizar = useMutation({\n    mutationFn: atualizarPreferenciasNotificacao,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['preferencias-notificacao'] });\n      toast({\n        title: \"Preferências atualizadas\",\n        description: \"Suas preferências de notificação foram salvas com sucesso.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível atualizar as preferências.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (preferenciasDados) {\n      setPreferencias(preferenciasDados);\n    }\n  }, [preferenciasDados]);\n\n  const handleToggle = (campo: keyof PreferenciasNotificacao) => {\n    setPreferencias(prev => ({\n      ...prev,\n      [campo]: !prev[campo]\n    }));\n  };\n\n  const handleSalvar = () => {\n    mutationAtualizar.mutate(preferencias);\n  };\n\n  return (\n    <Card className=\"glass-card\">\n      <CardHeader>\n        <CardTitle>Preferências de Notificação</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <div className=\"text-base font-medium\">Novos Leads</div>\n            <div className=\"text-sm text-muted-foreground\">\n              Receber notificações quando novos leads forem cadastrados\n            </div>\n          </div>\n          <Switch\n            checked={preferencias.novosLeads}\n            onCheckedChange={() => handleToggle('novosLeads')}\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <div className=\"text-base font-medium\">Oportunidades Atualizadas</div>\n            <div className=\"text-sm text-muted-foreground\">\n              Notificações sobre mudanças no pipeline de vendas\n            </div>\n          </div>\n          <Switch\n            checked={preferencias.oportunidadesAtualizadas}\n            onCheckedChange={() => handleToggle('oportunidadesAtualizadas')}\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <div className=\"text-base font-medium\">Lembretes de Tarefas</div>\n            <div className=\"text-sm text-muted-foreground\">\n              Alertas sobre tarefas próximas do vencimento\n            </div>\n          </div>\n          <Switch\n            checked={preferencias.lembretesTarefas}\n            onCheckedChange={() => handleToggle('lembretesTarefas')}\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <div className=\"text-base font-medium\">Email Marketing</div>\n            <div className=\"text-sm text-muted-foreground\">\n              Receber novidades e dicas sobre vendas\n            </div>\n          </div>\n          <Switch\n            checked={preferencias.emailMarketing}\n            onCheckedChange={() => handleToggle('emailMarketing')}\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-0.5\">\n            <div className=\"text-base font-medium\">Notificações Push</div>\n            <div className=\"text-sm text-muted-foreground\">\n              Notificações no navegador\n            </div>\n          </div>\n          <Switch\n            checked={preferencias.notificacoesPush}\n            onCheckedChange={() => handleToggle('notificacoesPush')}\n          />\n        </div>\n\n        <Button \n          onClick={handleSalvar} \n          disabled={mutationAtualizar.isPending}\n          className=\"w-full\"\n        >\n          {mutationAtualizar.isPending ? 'Salvando...' : 'Salvar Preferências'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":5004},"src/components/settings/PasswordChangeForm.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { alterarSenha } from '@/services/api';\nimport { useMutation } from '@tanstack/react-query';\n\ninterface DadosAlteracaoSenha {\n  senhaAtual: string;\n  novaSenha: string;\n  confirmarSenha: string;\n}\n\nexport const PasswordChangeForm: React.FC = () => {\n  const { toast } = useToast();\n  \n  const [dados, setDados] = useState<DadosAlteracaoSenha>({\n    senhaAtual: '',\n    novaSenha: '',\n    confirmarSenha: ''\n  });\n\n  const mutationAlterarSenha = useMutation({\n    mutationFn: alterarSenha,\n    onSuccess: () => {\n      toast({\n        title: \"Senha alterada\",\n        description: \"Sua senha foi alterada com sucesso.\"\n      });\n      setDados({\n        senhaAtual: '',\n        novaSenha: '',\n        confirmarSenha: ''\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Não foi possível alterar a senha.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleChange = (campo: keyof DadosAlteracaoSenha, valor: string) => {\n    setDados(prev => ({\n      ...prev,\n      [campo]: valor\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (dados.novaSenha !== dados.confirmarSenha) {\n      toast({\n        title: \"Erro\",\n        description: \"As senhas não coincidem.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (dados.novaSenha.length < 6) {\n      toast({\n        title: \"Erro\",\n        description: \"A nova senha deve ter pelo menos 6 caracteres.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    mutationAlterarSenha.mutate(dados);\n  };\n\n  return (\n    <Card className=\"glass-card\">\n      <CardHeader>\n        <CardTitle>Alterar Senha</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"senhaAtual\">Senha Atual</Label>\n            <Input\n              id=\"senhaAtual\"\n              type=\"password\"\n              value={dados.senhaAtual}\n              onChange={(e) => handleChange('senhaAtual', e.target.value)}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"novaSenha\">Nova Senha</Label>\n            <Input\n              id=\"novaSenha\"\n              type=\"password\"\n              value={dados.novaSenha}\n              onChange={(e) => handleChange('novaSenha', e.target.value)}\n              required\n              minLength={6}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmarSenha\">Confirmar Nova Senha</Label>\n            <Input\n              id=\"confirmarSenha\"\n              type=\"password\"\n              value={dados.confirmarSenha}\n              onChange={(e) => handleChange('confirmarSenha', e.target.value)}\n              required\n              minLength={6}\n            />\n          </div>\n\n          <Button \n            type=\"submit\" \n            disabled={mutationAlterarSenha.isPending}\n            className=\"w-full\"\n          >\n            {mutationAlterarSenha.isPending ? 'Alterando...' : 'Alterar Senha'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":3569},"src/components/settings/PersonalInfoForm.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { buscarDadosUsuario, atualizarDadosPessoais } from '@/services/api';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n\ninterface DadosPessoais {\n  nome: string;\n  email: string;\n  telefone: string;\n}\n\nexport const PersonalInfoForm: React.FC = () => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [dados, setDados] = useState<DadosPessoais>({\n    nome: '',\n    email: '',\n    telefone: ''\n  });\n\n  const { data: dadosUsuario } = useQuery({\n    queryKey: ['dados-usuario'],\n    queryFn: buscarDadosUsuario\n  });\n\n  const mutationAtualizar = useMutation({\n    mutationFn: atualizarDadosPessoais,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['dados-usuario'] });\n      toast({\n        title: \"Dados atualizados\",\n        description: \"Suas informações pessoais foram salvas com sucesso.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível atualizar os dados.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (dadosUsuario) {\n      setDados({\n        nome: dadosUsuario.nome,\n        email: dadosUsuario.email,\n        telefone: dadosUsuario.telefone\n      });\n    }\n  }, [dadosUsuario]);\n\n  const handleChange = (campo: keyof DadosPessoais, valor: string) => {\n    setDados(prev => ({\n      ...prev,\n      [campo]: valor\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutationAtualizar.mutate(dados);\n  };\n\n  return (\n    <Card className=\"glass-card\">\n      <CardHeader>\n        <CardTitle>Informações Pessoais</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"nome\">Nome Completo</Label>\n            <Input\n              id=\"nome\"\n              value={dados.nome}\n              onChange={(e) => handleChange('nome', e.target.value)}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">E-mail</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={dados.email}\n              onChange={(e) => handleChange('email', e.target.value)}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"telefone\">Telefone</Label>\n            <Input\n              id=\"telefone\"\n              value={dados.telefone}\n              onChange={(e) => handleChange('telefone', e.target.value)}\n              placeholder=\"(11) 99999-9999\"\n            />\n          </div>\n\n          <Button \n            type=\"submit\" \n            disabled={mutationAtualizar.isPending}\n            className=\"w-full\"\n          >\n            {mutationAtualizar.isPending ? 'Salvando...' : 'Salvar Alterações'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":3334},"src/components/settings/ProfileSettingsForm.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { useToast } from '@/hooks/use-toast';\nimport { buscarPerfis, atualizarPerfis } from '@/services/api';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Plus, Trash2 } from 'lucide-react';\n\ninterface Perfil {\n  id: string;\n  nome: string;\n  ativo: boolean;\n}\n\nexport const ProfileSettingsForm: React.FC = () => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [perfis, setPerfis] = useState<Perfil[]>([]);\n\n  const { data: perfisData } = useQuery({\n    queryKey: ['perfis-usuario'],\n    queryFn: buscarPerfis\n  });\n\n  const mutationAtualizar = useMutation({\n    mutationFn: atualizarPerfis,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['perfis-usuario'] });\n      toast({\n        title: \"Perfis atualizados\",\n        description: \"As configurações de perfil foram salvas com sucesso.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível atualizar os perfis.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (perfisData) {\n      setPerfis(perfisData);\n    }\n  }, [perfisData]);\n\n  const handleToggle = (id: string) => {\n    setPerfis(prev => prev.map(perfil => \n      perfil.id === id \n        ? { ...perfil, ativo: !perfil.ativo }\n        : perfil\n    ));\n  };\n\n  const handleNomeChange = (id: string, novoNome: string) => {\n    setPerfis(prev => prev.map(perfil => \n      perfil.id === id \n        ? { ...perfil, nome: novoNome }\n        : perfil\n    ));\n  };\n\n  const adicionarPerfil = () => {\n    const novoPerfil: Perfil = {\n      id: Math.random().toString(36).substring(2, 9),\n      nome: 'Novo Perfil',\n      ativo: true\n    };\n    setPerfis(prev => [...prev, novoPerfil]);\n  };\n\n  const removerPerfil = (id: string) => {\n    setPerfis(prev => prev.filter(perfil => perfil.id !== id));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutationAtualizar.mutate(perfis);\n  };\n\n  return (\n    <Card className=\"glass-card\">\n      <CardHeader>\n        <CardTitle>Configurações de Perfil</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            {perfis.map((perfil) => (\n              <div key={perfil.id} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                <div className=\"flex-1\">\n                  <Label htmlFor={`perfil-${perfil.id}`}>Nome do Perfil</Label>\n                  <Input\n                    id={`perfil-${perfil.id}`}\n                    value={perfil.nome}\n                    onChange={(e) => handleNomeChange(perfil.id, e.target.value)}\n                    required\n                  />\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Label htmlFor={`ativo-${perfil.id}`} className=\"text-sm\">\n                    Ativo\n                  </Label>\n                  <Switch\n                    id={`ativo-${perfil.id}`}\n                    checked={perfil.ativo}\n                    onCheckedChange={() => handleToggle(perfil.id)}\n                  />\n                </div>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => removerPerfil(perfil.id)}\n                  className=\"text-red-600 hover:text-red-700\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={adicionarPerfil}\n            className=\"w-full\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Adicionar Perfil\n          </Button>\n\n          <Button \n            type=\"submit\" \n            disabled={mutationAtualizar.isPending}\n            className=\"w-full\"\n          >\n            {mutationAtualizar.isPending ? 'Salvando...' : 'Salvar Configurações'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":4521},"src/components/tasks/NewTaskDialog.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { criarTarefa, buscarClientes } from '@/services/api';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface NewTaskDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onTaskCreated: () => void;\n}\n\nexport const NewTaskDialog: React.FC<NewTaskDialogProps> = ({\n  open,\n  onOpenChange,\n  onTaskCreated\n}) => {\n  const [formData, setFormData] = useState({\n    titulo: '',\n    descricao: '',\n    status: 'PENDENTE' as 'PENDENTE' | 'EM_ANDAMENTO' | 'CONCLUIDA' | 'CANCELADA',\n    prioridade: 'MEDIA' as 'BAIXA' | 'MEDIA' | 'ALTA' | 'URGENTE',\n    dataVencimento: '',\n    clienteId: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [clientes, setClientes] = useState<any[]>([]);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (open) {\n      carregarClientes();\n    }\n  }, [open]);\n\n  const carregarClientes = async () => {\n    try {\n      const response = await buscarClientes();\n      setClientes(response.clientes || []);\n    } catch (error) {\n      console.error('Erro ao carregar clientes:', error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      await criarTarefa(formData);\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Tarefa criada com sucesso\",\n      });\n\n      onTaskCreated();\n      \n      // Reset form\n      setFormData({\n        titulo: '',\n        descricao: '',\n        status: 'PENDENTE',\n        prioridade: 'MEDIA',\n        dataVencimento: '',\n        clienteId: ''\n      });\n    } catch (error) {\n      console.error('Erro ao criar tarefa:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar tarefa\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Nova Tarefa</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"titulo\">Título</Label>\n            <Input\n              id=\"titulo\"\n              value={formData.titulo}\n              onChange={(e) => setFormData({ ...formData, titulo: e.target.value })}\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"prioridade\">Prioridade</Label>\n            <Select\n              value={formData.prioridade}\n              onValueChange={(value: 'BAIXA' | 'MEDIA' | 'ALTA' | 'URGENTE') => \n                setFormData({ ...formData, prioridade: value })\n              }\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"BAIXA\">Baixa</SelectItem>\n                <SelectItem value=\"MEDIA\">Média</SelectItem>\n                <SelectItem value=\"ALTA\">Alta</SelectItem>\n                <SelectItem value=\"URGENTE\">Urgente</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"dataVencimento\">Data de Vencimento</Label>\n            <Input\n              id=\"dataVencimento\"\n              type=\"date\"\n              value={formData.dataVencimento}\n              onChange={(e) => setFormData({ ...formData, dataVencimento: e.target.value })}\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"cliente\">Cliente (Opcional)</Label>\n            <Select\n              value={formData.clienteId}\n              onValueChange={(value) => setFormData({ ...formData, clienteId: value })}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecione um cliente\" />\n              </SelectTrigger>\n              <SelectContent>\n                {clientes.map((cliente) => (\n                  <SelectItem key={cliente.id} value={cliente.id}>\n                    {cliente.nome}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"descricao\">Descrição</Label>\n            <Textarea\n              id=\"descricao\"\n              value={formData.descricao}\n              onChange={(e) => setFormData({ ...formData, descricao: e.target.value })}\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancelar\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? 'Criando...' : 'Criar Tarefa'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":5345},"src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3 rounded-md\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2631},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"src/components/ui/sonner.tsx":{"content":"\nimport React from 'react'\nimport { useTheme } from \"@/contexts/ThemeContext\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":922},"src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"src/components/ui/toaster.tsx":{"content":"\nimport React from 'react'\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":799},"src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"backend/seed-data.js":{"content":"\nconst { PrismaClient } = require('@prisma/client');\nconst bcrypt = require('bcryptjs');\n\nconst prisma = new PrismaClient();\n\nclass SeedData {\n  constructor() {\n    this.log = (emoji, mensagem) => console.log(`${emoji} ${mensagem}`);\n  }\n\n  async limparDadosExistentes() {\n    this.log('🧹', 'Limpando dados existentes...');\n    \n    try {\n      // Deletar em ordem devido às relações\n      await prisma.tarefa.deleteMany({});\n      await prisma.oportunidade.deleteMany({});\n      await prisma.cliente.deleteMany({});\n      await prisma.usuario.deleteMany({});\n      await prisma.empresa.deleteMany({});\n      \n      this.log('✅', 'Dados limpos com sucesso');\n    } catch (error) {\n      this.log('⚠️', `Erro ao limpar dados: ${error.message}`);\n    }\n  }\n\n  async criarEmpresas() {\n    this.log('🏢', 'Criando empresas...');\n    \n    const empresas = [\n      {\n        id: 'empresa-demo',\n        nome: 'Vision CRM Demo Corp'\n      },\n      {\n        id: 'empresa-tech',\n        nome: 'TechSolutions Ltda'\n      },\n      {\n        id: 'empresa-startup',\n        nome: 'StartupLab Inovação'\n      }\n    ];\n\n    for (const empresa of empresas) {\n      await prisma.empresa.create({\n        data: empresa\n      });\n    }\n\n    this.log('✅', `${empresas.length} empresas criadas`);\n    return empresas;\n  }\n\n  async criarUsuarios() {\n    this.log('👥', 'Criando usuários...');\n    \n    const senhaHash = await bcrypt.hash('123456', 10);\n    const agora = new Date();\n    const trialEnd = new Date(agora.getTime() + 30 * 24 * 60 * 60 * 1000); // 30 dias\n\n    const usuarios = [\n      {\n        id: 'user-admin',\n        nome: 'Admin Vision',\n        email: 'admin@demo.com',\n        senha: senhaHash,\n        empresaId: 'empresa-demo',\n        plano: 'PREMIUM',\n        trialStart: agora,\n        trialEnd: trialEnd,\n        isActive: true\n      },\n      {\n        id: 'user-vendedor',\n        nome: 'Carlos Vendedor',\n        email: 'vendedor@demo.com',\n        senha: senhaHash,\n        empresaId: 'empresa-demo',\n        plano: 'PREMIUM',\n        trialStart: agora,\n        trialEnd: trialEnd,\n        isActive: true\n      },\n      {\n        id: 'user-gerente',\n        nome: 'Ana Gerente',\n        email: 'gerente@demo.com',\n        senha: senhaHash,\n        empresaId: 'empresa-tech',\n        plano: 'TRIAL',\n        trialStart: agora,\n        trialEnd: trialEnd,\n        isActive: true\n      }\n    ];\n\n    for (const usuario of usuarios) {\n      await prisma.usuario.create({\n        data: usuario\n      });\n    }\n\n    this.log('✅', `${usuarios.length} usuários criados`);\n    return usuarios;\n  }\n\n  async criarClientes() {\n    this.log('👤', 'Criando clientes...');\n    \n    const clientes = [\n      {\n        id: 'cliente-001',\n        nome: 'João Silva Santos',\n        email: 'joao.silva@empresaabc.com.br',\n        telefone: '(11) 99999-1111',\n        nomeEmpresa: 'Empresa ABC Ltda',\n        cargo: 'Diretor Comercial',\n        endereco: 'Av. Paulista, 1000 - São Paulo/SP',\n        observacoes: 'Cliente interessado em soluções de automação. Reunião agendada para próxima semana.',\n        status: 'ATIVO',\n        fonte: 'INDICACAO',\n        tags: ['vip', 'automacao', 'grande-porte'],\n        usuarioId: 'user-admin',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'cliente-002',\n        nome: 'Maria Santos Oliveira',\n        email: 'maria@startupxyz.com',\n        telefone: '(11) 98888-2222',\n        nomeEmpresa: 'Startup XYZ',\n        cargo: 'CEO',\n        endereco: 'Rua Oscar Freire, 500 - São Paulo/SP',\n        observacoes: 'Startup em crescimento, busca CRM escalável.',\n        status: 'ATIVO',\n        fonte: 'WEBSITE',\n        tags: ['startup', 'crescimento', 'tech'],\n        usuarioId: 'user-vendedor',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'cliente-003',\n        nome: 'Pedro Costa Lima',\n        email: 'pedro@industrialtech.com.br',\n        telefone: '(11) 97777-3333',\n        nomeEmpresa: 'Industrial Tech S/A',\n        cargo: 'Gerente de TI',\n        endereco: 'Rod. Anhanguera, Km 25 - Osasco/SP',\n        observacoes: 'Empresa industrial interessada em digitalização de processos.',\n        status: 'ATIVO',\n        fonte: 'FEIRA',\n        tags: ['industrial', 'digitalizacao', 'medio-porte'],\n        usuarioId: 'user-admin',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'cliente-004',\n        nome: 'Carla Mendes Rocha',\n        email: 'carla@ecommercepro.com',\n        telefone: '(11) 96666-4444',\n        nomeEmpresa: 'E-commerce Pro',\n        cargo: 'Diretora de Marketing',\n        endereco: 'Rua Augusta, 800 - São Paulo/SP',\n        observacoes: 'Precisa integrar CRM com plataforma de e-commerce.',\n        status: 'ATIVO',\n        fonte: 'GOOGLE_ADS',\n        tags: ['ecommerce', 'marketing', 'integracao'],\n        usuarioId: 'user-vendedor',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'cliente-005',\n        nome: 'Roberto Ferreira',\n        email: 'roberto@consultoriaabc.com',\n        telefone: '(11) 95555-5555',\n        nomeEmpresa: 'Consultoria ABC',\n        cargo: 'Sócio-Diretor',\n        endereco: 'Av. Brigadeiro Faria Lima, 1500 - São Paulo/SP',\n        observacoes: 'Consultoria que atende múltiplos clientes, precisa organizar leads.',\n        status: 'INATIVO',\n        fonte: 'LINKEDIN',\n        tags: ['consultoria', 'b2b', 'organizacao'],\n        usuarioId: 'user-gerente',\n        empresaId: 'empresa-tech'\n      }\n    ];\n\n    for (const cliente of clientes) {\n      await prisma.cliente.create({\n        data: cliente\n      });\n    }\n\n    this.log('✅', `${clientes.length} clientes criados`);\n    return clientes;\n  }\n\n  async criarOportunidades() {\n    this.log('🎯', 'Criando oportunidades para Kanban...');\n    \n    const oportunidades = [\n      {\n        id: 'opp-001',\n        titulo: 'Implementação CRM Completo - Empresa ABC',\n        descricao: 'Projeto completo de implementação do CRM com customizações específicas para o setor industrial.',\n        valor: 85000.00,\n        status: 'LEAD',\n        prioridade: 'ALTA',\n        dataPrevisao: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // 15 dias\n        clienteId: 'cliente-001',\n        usuarioId: 'user-admin',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'opp-002',\n        titulo: 'CRM para Startup - Plano Growth',\n        descricao: 'Configuração do CRM para startup em fase de crescimento com foco em automação de vendas.',\n        valor: 25000.00,\n        status: 'QUALIFICADO',\n        prioridade: 'MEDIA',\n        dataPrevisao: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 dias\n        clienteId: 'cliente-002',\n        usuarioId: 'user-vendedor',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'opp-003',\n        titulo: 'Digitalização de Processos Industriais',\n        descricao: 'Projeto de digitalização completa dos processos de vendas e relacionamento com clientes.',\n        valor: 120000.00,\n        status: 'PROPOSTA',\n        prioridade: 'ALTA',\n        dataPrevisao: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias\n        clienteId: 'cliente-003',\n        usuarioId: 'user-admin',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'opp-004',\n        titulo: 'Integração CRM + E-commerce',\n        descricao: 'Integração completa entre CRM e plataforma de e-commerce existente.',\n        valor: 45000.00,\n        status: 'NEGOCIACAO',\n        prioridade: 'ALTA',\n        dataPrevisao: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 dias\n        clienteId: 'cliente-004',\n        usuarioId: 'user-vendedor',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'opp-005',\n        titulo: 'CRM Multi-cliente para Consultoria',\n        descricao: 'Solução customizada para gestão de múltiplos clientes da consultoria.',\n        valor: 35000.00,\n        status: 'FECHADO',\n        prioridade: 'MEDIA',\n        dataPrevisao: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 dias atrás (já fechado)\n        clienteId: 'cliente-005',\n        usuarioId: 'user-gerente',\n        empresaId: 'empresa-tech'\n      },\n      {\n        id: 'opp-006',\n        titulo: 'Expansão CRM - Módulo Financeiro',\n        descricao: 'Adição de módulo financeiro ao CRM existente da Empresa ABC.',\n        valor: 30000.00,\n        status: 'LEAD',\n        prioridade: 'BAIXA',\n        dataPrevisao: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000), // 45 dias\n        clienteId: 'cliente-001',\n        usuarioId: 'user-admin',\n        empresaId: 'empresa-demo'\n      },\n      {\n        id: 'opp-007',\n        titulo: 'Treinamento Avançado CRM',\n        descricao: 'Programa completo de treinamento para equipe da startup.',\n        valor: 8000.00,\n        status: 'QUALIFICADO',\n        prioridade: 'BAIXA',\n        dataPrevisao: new Date(Date.now() + 20 * 24 * 60 * 60 * 1000), // 20 dias\n        clienteId: 'cliente-002',\n        usuarioId: 'user-vendedor',\n        empresaId: 'empresa-demo'\n      }\n    ];\n\n    for (const oportunidade of oportunidades) {\n      await prisma.oportunidade.create({\n        data: oportunidade\n      });\n    }\n\n    this.log('✅', `${oportunidades.length} oportunidades criadas`);\n    return oportunidades;\n  }\n\n  async criarTarefas() {\n    this.log('📋', 'Criando tarefas...');\n    \n    const tarefas = [\n      {\n        id: 'task-001',\n        titulo: 'Ligar para João Silva - Follow-up proposta',\n        descricao: 'Acompanhar interesse na proposta de CRM e esclarecer dúvidas técnicas.',\n        status: 'PENDENTE',\n        prioridade: 'ALTA',\n        dataVencimento: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // amanhã\n        clienteId: 'cliente-001',\n        oportunidadeId: 'opp-001',\n        usuarioId: 'user-admin'\n      },\n      {\n        id: 'task-002',\n        titulo: 'Preparar apresentação para Startup XYZ',\n        descricao: 'Criar apresentação customizada mostrando cases de sucesso com startups.',\n        status: 'EM_PROGRESSO',\n        prioridade: 'ALTA',\n        dataVencimento: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 dias\n        clienteId: 'cliente-002',\n        oportunidadeId: 'opp-002',\n        usuarioId: 'user-vendedor'\n      },\n      {\n        id: 'task-003',\n        titulo: 'Enviar proposta técnica - Industrial Tech',\n        descricao: 'Finalizar e enviar proposta detalhada com cronograma de implementação.',\n        status: 'PENDENTE',\n        prioridade: 'ALTA',\n        dataVencimento: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 dias\n        clienteId: 'cliente-003',\n        oportunidadeId: 'opp-003',\n        usuarioId: 'user-admin'\n      },\n      {\n        id: 'task-004',\n        titulo: 'Reunião de negociação - E-commerce Pro',\n        descricao: 'Reunião para discussão de valores e prazos da integração.',\n        status: 'PENDENTE',\n        prioridade: 'ALTA',\n        dataVencimento: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // amanhã\n        clienteId: 'cliente-004',\n        oportunidadeId: 'opp-004',\n        usuarioId: 'user-vendedor'\n      },\n      {\n        id: 'task-005',\n        titulo: 'Documentar processo de venda fechada',\n        descricao: 'Documentar lições aprendidas da venda para Consultoria ABC.',\n        status: 'CONCLUIDA',\n        prioridade: 'MEDIA',\n        dataVencimento: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 dias atrás\n        clienteId: 'cliente-005',\n        oportunidadeId: 'opp-005',\n        usuarioId: 'user-gerente'\n      },\n      {\n        id: 'task-006',\n        titulo: 'Qualificar lead - Módulo Financeiro',\n        descricao: 'Entender melhor a necessidade do módulo financeiro.',\n        status: 'PENDENTE',\n        prioridade: 'MEDIA',\n        dataVencimento: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 dias\n        clienteId: 'cliente-001',\n        oportunidadeId: 'opp-006',\n        usuarioId: 'user-admin'\n      },\n      {\n        id: 'task-007',\n        titulo: 'Enviar material de treinamento',\n        descricao: 'Enviar cronograma e conteúdo programático do treinamento.',\n        status: 'PENDENTE',\n        prioridade: 'BAIXA',\n        dataVencimento: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 dias\n        clienteId: 'cliente-002',\n        oportunidadeId: 'opp-007',\n        usuarioId: 'user-vendedor'\n      },\n      {\n        id: 'task-008',\n        titulo: 'Análise de concorrência',\n        descricao: 'Pesquisar soluções concorrentes para embasar argumentação.',\n        status: 'EM_PROGRESSO',\n        prioridade: 'MEDIA',\n        dataVencimento: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000), // 4 dias\n        clienteId: null,\n        oportunidadeId: null,\n        usuarioId: 'user-admin'\n      },\n      {\n        id: 'task-009',\n        titulo: 'Atualizar material de marketing',\n        descricao: 'Revisar e atualizar apresentações comerciais.',\n        status: 'PENDENTE',\n        prioridade: 'BAIXA',\n        dataVencimento: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 dias\n        clienteId: null,\n        oportunidadeId: null,\n        usuarioId: 'user-vendedor'\n      },\n      {\n        id: 'task-010',\n        titulo: 'Revisar métricas do trimestre',\n        descricao: 'Analisar performance de vendas e identificar oportunidades.',\n        status: 'PENDENTE',\n        prioridade: 'ALTA',\n        dataVencimento: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000), // 6 dias\n        clienteId: null,\n        oportunidadeId: null,\n        usuarioId: 'user-gerente'\n      }\n    ];\n\n    for (const tarefa of tarefas) {\n      await prisma.tarefa.create({\n        data: tarefa\n      });\n    }\n\n    this.log('✅', `${tarefas.length} tarefas criadas`);\n    return tarefas;\n  }\n\n  async executarSeedCompleto() {\n    console.log('🌱 Vision CRM - Seed de Dados Exemplares');\n    console.log('=========================================');\n    \n    try {\n      await this.limparDadosExistentes();\n      \n      const empresas = await this.criarEmpresas();\n      const usuarios = await this.criarUsuarios();\n      const clientes = await this.criarClientes();\n      const oportunidades = await this.criarOportunidades();\n      const tarefas = await this.criarTarefas();\n      \n      console.log('\\n📊 Resumo dos dados criados:');\n      console.log(`   🏢 Empresas: ${empresas.length}`);\n      console.log(`   👥 Usuários: ${usuarios.length}`);\n      console.log(`   👤 Clientes: ${clientes.length}`);\n      console.log(`   🎯 Oportunidades: ${oportunidades.length}`);\n      console.log(`   📋 Tarefas: ${tarefas.length}`);\n      \n      console.log('\\n🔐 Credenciais de acesso:');\n      console.log('   Admin: admin@demo.com / 123456');\n      console.log('   Vendedor: vendedor@demo.com / 123456');\n      console.log('   Gerente: gerente@demo.com / 123456');\n      \n      console.log('\\n🎯 Kanban configurado com:');\n      console.log('   📊 LEADs: 2 oportunidades');\n      console.log('   ✅ QUALIFICADOs: 2 oportunidades');\n      console.log('   📝 PROPOSTAs: 1 oportunidade');\n      console.log('   🤝 NEGOCIAÇÃOs: 1 oportunidade');\n      console.log('   🎉 FECHADOs: 1 oportunidade');\n      \n      console.log('\\n✨ Seed concluído com sucesso!');\n      console.log('🚀 Execute: npm run dev (no backend)');\n      \n    } catch (error) {\n      console.error('❌ Erro durante o seed:', error);\n      throw error;\n    } finally {\n      await prisma.$disconnect();\n    }\n  }\n\n  async executarSeedApenas() {\n    console.log('🌱 Vision CRM - Seed Incremental (sem limpar dados)');\n    console.log('===============================================');\n    \n    try {\n      // Verificar se já existem dados\n      const usuariosExistentes = await prisma.usuario.count();\n      \n      if (usuariosExistentes > 0) {\n        this.log('ℹ️', `Encontrados ${usuariosExistentes} usuários existentes`);\n        this.log('⚠️', 'Para seed completo, use: node seed-data.js --reset');\n        return;\n      }\n      \n      await this.criarEmpresas();\n      await this.criarUsuarios();\n      await this.criarClientes();\n      await this.criarOportunidades();\n      await this.criarTarefas();\n      \n      this.log('✅', 'Seed incremental concluído!');\n      \n    } catch (error) {\n      console.error('❌ Erro durante o seed incremental:', error);\n      throw error;\n    } finally {\n      await prisma.$disconnect();\n    }\n  }\n}\n\n// CLI\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  const seed = new SeedData();\n  \n  if (args.includes('--help') || args.includes('-h')) {\n    console.log(`\n🌱 Vision CRM - Seed de Dados v1.0\n\nUso:\n  node seed-data.js                    # Seed incremental (preserva dados)\n  node seed-data.js --reset           # Limpa tudo e cria dados novos\n  node seed-data.js --help            # Mostra esta ajuda\n\nDados criados:\n  - 3 Empresas de exemplo\n  - 3 Usuários (admin, vendedor, gerente)\n  - 5 Clientes diversos\n  - 7 Oportunidades (distribuídas no Kanban)\n  - 10 Tarefas (algumas com prazos urgentes)\n\nCredenciais:\n  admin@demo.com / 123456 (PREMIUM)\n  vendedor@demo.com / 123456 (PREMIUM)  \n  gerente@demo.com / 123456 (TRIAL)\n    `);\n    process.exit(0);\n  }\n  \n  if (args.includes('--reset')) {\n    seed.executarSeedCompleto().catch(console.error);\n  } else {\n    seed.executarSeedApenas().catch(console.error);\n  }\n}\n\nmodule.exports = SeedData;\n","size_bytes":17452},"backend/src/middleware/trial.ts":{"content":"\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        nome: string;\n        email: string;\n        plano: string;\n        isTrialExpired: boolean;\n      };\n    }\n  }\n}\n\nexport const checkTrialStatus = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ message: 'Usuário não autenticado' });\n    }\n\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: req.user.id }\n    });\n\n    if (!usuario) {\n      return res.status(404).json({ message: 'Usuário não encontrado' });\n    }\n\n    // Verificar se o trial expirou\n    const now = new Date();\n    const trialEnd = usuario.trialEnd || new Date(usuario.trialStart.getTime() + 7 * 24 * 60 * 60 * 1000); // 7 dias\n\n    if (usuario.plano === 'TRIAL' && now > trialEnd) {\n      // Atualizar status para expirado\n      await prisma.usuario.update({\n        where: { id: usuario.id },\n        data: { \n          plano: 'EXPIRADO',\n          isActive: false \n        }\n      });\n\n      req.user.plano = 'EXPIRADO';\n      req.user.isTrialExpired = true;\n    } else {\n      req.user.plano = usuario.plano;\n      req.user.isTrialExpired = false;\n    }\n\n    next();\n  } catch (error) {\n    console.error('Erro ao verificar trial:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n};\n\nexport const requireActiveTrial = (req: Request, res: Response, next: NextFunction) => {\n  if (req.user?.plano === 'EXPIRADO' || req.user?.isTrialExpired) {\n    return res.status(403).json({ \n      message: 'Trial expirado. Upgrade para continuar usando o sistema.',\n      trialExpired: true \n    });\n  }\n  next();\n};\n","size_bytes":1865},"backend/src/routes/trial.ts":{"content":"\nimport express from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport { authMiddleware, AuthenticatedRequest } from '../middleware/auth';\nimport { checkTrialStatus } from '../middleware/trial';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Verificar status do trial\nrouter.get('/status', authMiddleware, checkTrialStatus, async (req: AuthenticatedRequest, res) => {\n  try {\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: req.userId! },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        plano: true,\n        trialStart: true,\n        trialEnd: true,\n        isActive: true\n      }\n    });\n\n    if (!usuario) {\n      return res.status(404).json({ message: 'Usuário não encontrado' });\n    }\n\n    const now = new Date();\n    const trialEnd = usuario.trialEnd || new Date(usuario.trialStart.getTime() + 7 * 24 * 60 * 60 * 1000);\n    const diasRestantes = Math.max(0, Math.ceil((trialEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\n    const isTrialExpired = usuario.plano === 'TRIAL' && now > trialEnd;\n\n    res.json({\n      usuario: {\n        ...usuario,\n        diasRestantes,\n        isTrialExpired,\n        plano: isTrialExpired ? 'EXPIRADO' : usuario.plano\n      }\n    });\n  } catch (error) {\n    console.error('Erro ao verificar status do trial:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\n// Simular upgrade para premium (para testes)\nrouter.post('/upgrade', authMiddleware, async (req: AuthenticatedRequest, res) => {\n  try {\n    const usuario = await prisma.usuario.update({\n      where: { id: req.userId! },\n      data: {\n        plano: 'PREMIUM',\n        isActive: true\n      },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        plano: true,\n        isActive: true\n      }\n    });\n\n    res.json({\n      message: 'Upgrade realizado com sucesso!',\n      usuario\n    });\n  } catch (error) {\n    console.error('Erro ao fazer upgrade:', error);\n    res.status(500).json({ message: 'Erro interno do servidor' });\n  }\n});\n\nexport default router;\n","size_bytes":2135},"shared/environment.ts":{"content":"/**\n * Utilitário para detecção automática de ambiente\n * Funciona tanto no frontend (browser) quanto no backend (Node.js)\n */\n\nexport type Environment = 'development' | 'replit' | 'vps' | 'production';\n\nexport interface EnvironmentConfig {\n  environment: Environment;\n  isProduction: boolean;\n  isDevelopment: boolean;\n  isReplit: boolean;\n  isVPS: boolean;\n  apiBaseUrl?: string;\n  frontendUrl?: string;\n  backendPort?: number;\n}\n\n/**\n * Detecta o ambiente no frontend (browser)\n */\nexport function detectBrowserEnvironment(): EnvironmentConfig {\n  if (typeof window === 'undefined') {\n    throw new Error('detectBrowserEnvironment() deve ser usado apenas no browser');\n  }\n\n  const hostname = window.location.hostname;\n  const protocol = window.location.protocol;\n  \n  let environment: Environment;\n  let apiBaseUrl: string;\n  \n  // Detectar Replit\n  if (hostname.includes('replit.app') || \n      hostname.includes('repl.co') || \n      hostname.includes('replit.dev')) {\n    environment = 'replit';\n    // No Replit, trocar a porta para 5000 (backend)\n    const backendHostname = hostname.replace(/(-\\d+)?\\./, '-5000.');\n    apiBaseUrl = `${protocol}//${backendHostname}/api`;\n  }\n  // Detectar desenvolvimento local\n  else if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    environment = 'development';\n    apiBaseUrl = 'http://localhost:5000/api';\n  }\n  // Detectar VPS/Produção\n  else {\n    environment = 'vps';\n    // Em VPS, assumir que o backend roda na porta 5000\n    apiBaseUrl = `${protocol}//${hostname}:5000/api`;\n  }\n  \n  return {\n    environment,\n    isProduction: environment === 'vps',\n    isDevelopment: environment === 'development',\n    isReplit: environment === 'replit',\n    isVPS: environment === 'vps',\n    apiBaseUrl,\n    frontendUrl: `${protocol}//${hostname}${window.location.port ? ':' + window.location.port : ''}`\n  };\n}\n\n/**\n * Detecta o ambiente no backend (Node.js)\n */\nexport function detectServerEnvironment(): EnvironmentConfig {\n  const NODE_ENV = process.env.NODE_ENV || 'development';\n  const REPL_ID = process.env.REPL_ID;\n  const REPL_SLUG = process.env.REPL_SLUG;\n  const REPL_OWNER = process.env.REPL_OWNER;\n  const REPLIT_DB_URL = process.env.REPLIT_DB_URL;\n  \n  let environment: Environment;\n  let backendPort: number;\n  let frontendUrl: string;\n  \n  // Detectar Replit\n  if (REPL_ID || REPLIT_DB_URL || REPL_SLUG) {\n    environment = 'replit';\n    backendPort = 5000; // Replit usa porta 5000 para backend\n    \n    if (REPL_SLUG && REPL_OWNER) {\n      frontendUrl = process.env.FRONTEND_URL || `https://${REPL_SLUG}-${REPL_OWNER}-5173.replit.app`;\n    } else {\n      frontendUrl = process.env.FRONTEND_URL || 'https://repl-frontend.replit.app';\n    }\n  }\n  // Detectar desenvolvimento local\n  else if (NODE_ENV === 'development') {\n    environment = 'development';\n    backendPort = parseInt(process.env.PORT || '5000', 10);\n    frontendUrl = process.env.FRONTEND_URL || 'http://localhost:5173';\n  }\n  // Detectar VPS/Produção\n  else {\n    environment = 'vps';\n    backendPort = parseInt(process.env.PORT || '5000', 10);\n    frontendUrl = process.env.FRONTEND_URL || 'https://seu-dominio.com';\n  }\n  \n  return {\n    environment,\n    isProduction: environment === 'vps',\n    isDevelopment: environment === 'development', \n    isReplit: environment === 'replit',\n    isVPS: environment === 'vps',\n    backendPort,\n    frontendUrl\n  };\n}\n\n/**\n * Configurações específicas do ambiente para CORS\n */\nexport function getCorsOrigins(config: EnvironmentConfig): string[] {\n  if (config.isDevelopment) {\n    return [\n      'http://localhost:5173',\n      'http://localhost:5000', \n      'http://127.0.0.1:5173',\n      'http://127.0.0.1:5000',\n      'http://0.0.0.0:5173',\n      'http://0.0.0.0:5000'\n    ];\n  }\n  \n  if (config.isReplit) {\n    const replSlug = process.env.REPL_SLUG;\n    const replOwner = process.env.REPL_OWNER;\n    \n    const origins = [config.frontendUrl];\n    \n    if (replSlug && replOwner) {\n      origins.push(\n        `https://${replSlug}-${replOwner}.replit.app`,\n        `https://${replSlug}-${replOwner}-5173.replit.app`,\n        `https://${replSlug}-${replOwner}-5000.replit.app`,\n        `https://${replSlug}-${replOwner}.repl.co`,\n        `https://${replSlug}-${replOwner}-5173.repl.co`,\n        `https://${replSlug}-${replOwner}-5000.repl.co`\n      );\n    }\n    \n    return origins.filter(Boolean) as string[];\n  }\n  \n  if (config.isVPS) {\n    return [\n      config.frontendUrl,\n      process.env.FRONTEND_URL\n    ].filter(Boolean) as string[];\n  }\n  \n  return [config.frontendUrl].filter(Boolean) as string[];\n}\n\n/**\n * Log das configurações de ambiente\n */\nexport function logEnvironmentConfig(config: EnvironmentConfig, context: 'frontend' | 'backend') {\n  console.log(`🌍 [${context.toUpperCase()}] Ambiente detectado: ${config.environment}`);\n  \n  if (context === 'backend') {\n    console.log(`🚀 Porta do backend: ${config.backendPort}`);\n    console.log(`🌐 Frontend URL: ${config.frontendUrl}`);\n  } else {\n    console.log(`📡 API Base URL: ${config.apiBaseUrl}`);\n  }\n  \n  if (config.isReplit) {\n    console.log('🔧 Configurações do Replit ativas');\n  }\n  \n  if (config.isVPS) {\n    console.log('🖥️  Configurações de VPS/Produção ativas');\n  }\n}","size_bytes":5269}},"version":1}